{{fbdoc item="title" value="PCOPY"}}----
Copies one graphical or text page onto another

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgSub sub]] **Pcopy** ( [[KeyPgByval byval]] //source// [[KeyPgAs as]] [[KeyPgInteger integer]] = -1, [[KeyPgByval byval]] //destination// [[KeyPgAs as]] [[KeyPgInteger integer]] = -1 )
##
{{fbdoc item="usage"}}##
	**Pcopy** [ //source// ] [, //destination// ]
##
{{fbdoc item="param"}}
	##//source//##
		page to copy from
	##//destination//##
		page to copy to

{{fbdoc item="desc"}}
	Copies one graphical or text video page to another. Useful for drawing all graphics on one invisible page and copying it to the active visible page - creating smooth graphics and animation. Known as 'double buffering' or 'page flipping'.

	##//source//## and ##//destination//## refer to page numbers. The 'source' page is copied over the 'destination' page when pcopy is called.

	If the ##//source//## argument is omitted, the current working page is assumed.  If the ##//destination//## page is omitted, the current visible page is assumed.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/gfx/pcopy.bas"}}%%(freebasic)
screenres 320, 240, 32, 2    'Sets up the screen to be 320x240 in 32-bit color with 2 video pages.
dim as integer max_x_value = 270, x_value = 50    'Dimension our working variables.

do while x_value < max_x_value     'Loop while x_value is less than the max
	screenset 2,1     'Sets the working page to 2 and the displayed page to 1
	cls    'Clears the screen so we can start fresh
	circle (x_value,50),50,&h00FFFF00     'Draws a circle with a 50 pixel radius in yellow on page 2
	screenset 1,1    'Sets the working page to 1 and the displayed page to 1
	screensync    'Waits for vertical refresh
	pcopy 2,1    'Copies our circle from page 2 to page 1
	x_value += 1     'Increments x_value so it will move.
	sleep 25     'Waits for 25 milliseconds.
loop     'Goes back to do as long as x_value is less than x_max_value

sleep   'Waits for any key to be pressed so you can see the work done.
%%

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/gfx/pcopy_cons.bas"}}%%(freebasic)
' Console mode example:

'' set the working page number to 0, and the visible page number to 1
#if __FB_LANG__ = "QB"
screen ,, 0, 1
#else
screen , 0, 1
#endif

dim as integer i, frames, fps
dim as double t

t = timer

do


	'' fill working page with a certain color and character
	cls
	locate 1, 1
	color (i and 15), 0
	print string$(80 * 25, hex$(i, 1));
	i += 1


	'' show frames per second
	color 15, 0
	locate 1, 1
	print "fps: " & fps,
	if int(t) <> int(timer) then
		t = timer
		fps = frames
		frames = 0
	end if
	frames += 1


	'' copy working page to visible page
	pcopy


	'' sleep 50ms per frame to free up cpu time
	sleep 50, 1


	'' run loop until user presses a key
loop until len(inkey$)
%%

{{fbdoc item="target"}}
	- Maximum number of text pages in Windows is 4.
	- Maximum number of text pages in DOS is 8.
	- Maximum number of text pages in all other targets is 1.
	- Maximum number of graphics pages depends on what was specified when the ##[[KeyPgScreengraphics Screen]]## or ##[[KeyPgScreenres Screenres]]## statement was called.

{{fbdoc item="diff"}}
	- None

{{fbdoc item="see"}}
	- ##[[KeyPgScreencopy Screencopy]]##
	- ##[[KeyPgFlip Flip]]##
	- ##[[KeyPgScreengraphics Screen]]##


{{fbdoc item="back" value="CatPgGfxScreen|Screen Functions"}}