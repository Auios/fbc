{{fbdoc item="title" value="TYPE"}}----
Declares a user-defined type.

{{fbdoc item="syntax"}}##

	**Type** //typename//
		//fieldname1// [[KeyPgAs as]] //[[DataType DataType]]//
		//fieldname2// [[KeyPgAs as]] //[[DataType DataType]]//
		...
	**End Type**

	**Type** //typename// [ [[KeyPgField Field]] = //alignment// ]
		[ [[KeyPgVisPrivate Private]]: ]
		[ [[KeyPgVisPublic Public]]: ]
		[ [[KeyPgVisProtected Protected]]: ]
		[[KeyPgDeclare declare]] [[KeyPgConstructor constructor]] [ ( [ //parameters// ] ) ]
		[[KeyPgDeclare declare]] [[KeyPgDestructor destructor]]  [ () ]
		[[KeyPgDeclare declare]] [ [[KeyPgStaticMember Static]] | [[KeyPgConstMember Const]] ] [[KeyPgMemberSub sub]] //fieldname// [//calling convention specifier//] [ [[KeyPgAlias alias]] //external_name// ] [ ( [ //parameters// ] ) ] [ [[KeyPgStatic Static]] ]
		[[KeyPgDeclare declare]] [ [[KeyPgStaticMember Static]] | [[KeyPgConstMember Const]] ] [[KeyPgMemberFunction function]] //fieldname// [//calling convention specifier//] [ [[KeyPgAlias alias]] //external_name// ] [ ( [ //parameters// ] ) ] [ [[KeyPgAs as]] [[DataType datatype]] ] [ [[KeyPgStatic Static]] ]
		//fieldname// [ ( //array subscripts// ) | : //bits// ] [[KeyPgAs as]] //[[DataType DataType]]// [ = //initializer// ]
		[[KeyPgAs as]] [[DataType DataType]] //fieldname// [ ( //array subscripts// ) | : //bits// ] [ = //initializer// ], ...
		[[KeyPgDeclare declare]] [[KeyPgOperator operator]] //operatorname//[ ( [ //parameters// ] ) ]
		[[KeyPgDeclare declare]] [[KeyPgProperty property]] //fieldname//[ ( [ //parameters// ] ) ] [ [[KeyPgAs as]] [[DataType datatype]] ]
		...
	**End Type**
##
{{fbdoc item="param"}}
	##//alignment//##
		Specifies the byte alignment for data fields.
	##//fieldname//##
		Name of the data field or member procedure.
	##//external_name//##
		Name of field as seen when externally linked.
	##//parameters//##
		The parameters to be passed to a member procedure.
	##//array subscripts//##
		Subscripts to declare a fixed-length array.
	##//bits//##
		Number of bits a data field occupies.
	##//initializer//##
		Default initializer for the data field.
	##//operatorname//##
		The name of the operator to be overloaded.
	##//calling convention specifier//##
		Can be ##[[KeyPgCdecl Cdecl]]##, ##[[KeyPgStdcall Stdcall]]## or ##[[KeyPgPascal Pascal]]##.

{{fbdoc item="desc"}}
	##**Type**## is used to declare custom data types containing one or more bit, scalar, array or other ##**Type**## fields.

	Types support member functions including ##[[KeyPgConstructor Constructor]]##, ##[[KeyPgDestructor Destructor]]##, ##[[KeyPgMemberFunction Function]]##, ##[[KeyPgOperator Operator]]##, ##[[KeyPgProperty Property]]## and ##[[KeyPgMemberSub Sub]]##.

	Fields default to ##[[KeyPgVisPublic Public:]]## member access unless, ##[[KeyPgVisPrivate Private:]]## or ##[[KeyPgVisProtected Protected:]]## is specified.

	An anonymous ##[[KeyPgUnion Union]]## can be nested in a ##**Type**## declaration.

	The optional ##[[KeyPgField Field]]=//number//## when given will change the default field alignment. ##[[KeyPgField Field]]=1## will disable any alignment, making the ##**Type**## contiguous in memory. 

	##**Type**## can be used to return a temporary type variable.  See ##[[KeyPgTypeTemp Type()]]##.

	##**Type**## can be used to declare a type definition ( i.e. an alias or alternative name ) for an already declared or yet to be declared type.  See ##[[KeyPgTypeAlias Type (Alias)]]##

	Data fields may have an optional default ##//initializer//## value.  This default value initializes the data field immediately before any constructor is called.

	##[[KeyPgStaticMember Static]]## immediately preceding ##[[KeyPgMemberSub Sub]]## or ##[[KeyPgMemberFunction Function]]## indicates that no hidden ##[[KeyPgThis This]]## parameter is to be passed to the member procedure.

	##[[KeyPgConstMember Const]]## immediately preceding ##[[KeyPgMemberSub Sub]]## or ##[[KeyPgMemberFunction Function]]## indicates that the hidden ##[[KeyPgThis This]]## parameter is to be considered read-only.

	 **Warning** Special care must be taken when using a user defined type for file I/O.  It is recommended to use ##Field = 1## for such cases, and it may be required to read files created by other applications.
	UDTs that contain pointers to data should not be written to file as-is: when the data is read later, the pointers will almost certainly be invalid, and the data they pointed to will no longer be available.  Instead, custom input/output routines should be used, to save the allocated data in a different format in the file.  This includes UDTs containing variable-length strings.
	Additionally, reading fixed length strings in UDT's from files is problematic: at present, fixed-length strings contain an extra NULL character on the end.  To preserve alignment the field would need to be declared with one char less than the actual size and accessing the field by its name makes the last character unavailable.  It also means there may be potential problems passing the string to functions that expect the NULL character to be there.
	A better solution is to use ubyte arrays, this requires a couple of auxiliary functions converting to/from string. See the example.

{{fbdoc item="ex"}}
This is an example of a QB-style type, not including procedure definitions
{{fbdoc item="filename" value="examples/manual/udt/type1.bas"}}%%(freebasic)
TYPE clr
	red AS UBYTE
	green AS UBYTE
	blue AS UBYTE
END TYPE

DIM c AS clr
c.red = 255
c.green = 128
c.blue = 64
%%

And this is an example of a type working as an object:
{{fbdoc item="filename" value="examples/manual/udt/type2.bas"}}%%(freebasic)
'' Example showing the problems with fixed length string fields in UDTs
'' Suppose we have read a GIF header from a file
''                        signature         width        height
dim as zstring*(10+1) z => "GIF89a" + mkshort(10) + mkshort(11)

print "Using fixed-length string"

type hdr1 field = 1
   as string*(6-1) sig /' We have to dimension the string with 1 char
	                    '  less to avoid misalignments '/
   as ushort wid, hei
end type

dim as hdr1 ptr h1 = cptr(hdr1 ptr, @z)
print h1->sig, h1->wid, h1->hei '' Prints GIF89 (misses a char!)  10  11

'' We can do comparisons only with the 5 visible chars and creating a temporary string with LEFT

if left(h1->sig, 5) = "GIF89" then print "ok" else print "error"


'' Using a ubyte array, we need an auxiliary function to convert it to a string
function ub2str( ub() as ubyte ) as string
	dim as integer length = ubound(ub) + 1
	dim as string res = space(length)
	for i as integer = 0 to length-1
	    res[i] = ub(i): next
	function = res
end function


print
print "Using an array of ubytes"

type hdr2 field = 1
   sig(0 to 6-1) as ubyte '' Dimension 6
   as ushort wid, hei
end type

dim as hdr2 ptr h2 = cptr(hdr2 ptr, @z)
'' Viewing and comparing is correct but a conversion to string is required

print ub2str(h2->sig()), h2->wid, h2->hei '' Prints GIF89a  10  11 (ok)
if ub2str(h2->sig()) = "GIF89a" then print "ok" else print "error" '' Prints ok
%%

{{fbdoc item="target"}}
	- The default field alignment is 4 bytes for DOS and Linux targets.
	- The default field alignment is 8 bytes for Windows targets.
	
{{fbdoc item="lang"}}
	- Object-related features such as functions declared inside ##**Type**## blocks are supported only with the //[[CompilerOptlang -lang fb]]// dialect since version 0.17b
	- In the //[[CompilerOptlang -lang fb]]// and //[[CompilerOptlang -lang fblite]]// dialects, the default field alignment depends on the target platform.
	- With the //[[CompilerOptlang -lang qb]]// dialect the fields are aligned to byte boundaries by default, unless otherwise specified.
	- To force byte alignment use ##FIELD=1##.

{{fbdoc item="diff"}}
	- At present, fixed-length strings have an extra, redundant character on the end, which means they take up one more byte than they do in QB.  For this reason, UDTs that use them are not compatible with QB when used for file I/O.

{{fbdoc item="see"}}
	- ##[[KeyPgTypeAlias Type (Alias)]]##
	- ##[[KeyPgTypeTemp Type (Temporary)]]##
	- ##[[KeyPgUnion Union]]##
	- ##[[KeyPgEnum Enum]]##
	- ##[[KeyPgTypeof Typeof]]##
	- ##[[KeyPgOffsetof OffsetOf]]##
	- ##[[KeyPgField Field]]##

{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}