type UDT1
	i as integer
end type

type UDT2
	i as integer
end type

namespace ns1
	type UDT1
		i as integer
	end type
end namespace

type FWDREF1 as FWDREF1_
type FWDREF2 as FWDREF2_

dim byrefany as sub( byref as any )
dim b     as sub( as byte      )
dim ub    as sub( as ubyte     )
dim sh    as sub( as short     )
dim ush   as sub( as ushort    )
dim l     as sub( as long      )
dim ul    as sub( as ulong     )
dim ll    as sub( as longint   )
dim ull   as sub( as ulongint  )
dim i     as sub( as integer   )
dim ui    as sub( as uinteger  )
dim f     as sub( as single    )
dim d     as sub( as double    )
dim s     as sub( as string    )
dim z     as sub( as zstring   )
dim w     as sub( as wstring   )
dim udt1  as sub( as UDT1      )
dim udt2  as sub( as UDT2      )
dim fwd1  as sub( as FWDREF1   )
dim fwd2  as sub( as FWDREF2   )
dim psub  as sub( as sub( )    )
dim pfi   as sub( as function( ) as integer )
dim pany  as sub( as any      ptr )
dim pb    as sub( as byte     ptr )
dim pub   as sub( as ubyte    ptr )
dim psh   as sub( as short    ptr )
dim push  as sub( as ushort   ptr )
dim pl    as sub( as long     ptr )
dim pul   as sub( as ulong    ptr )
dim pll   as sub( as longint  ptr )
dim pull  as sub( as ulongint ptr )
dim pi    as sub( as integer  ptr )
dim pui   as sub( as uinteger ptr )
dim pf    as sub( as single   ptr )
dim pd    as sub( as double   ptr )
dim ps    as sub( as string   ptr )
dim pz    as sub( as zstring  ptr )
dim pw    as sub( as wstring  ptr )
dim pudt1 as sub( as UDT1     ptr )
dim pudt2 as sub( as UDT2     ptr )
dim pfwd1 as sub( as FWDREF1  ptr )
dim pdwf2 as sub( as FWDREF2  ptr )
dim ppsub as sub( as typeof( sub( ) ) ptr )
dim ppfi  as sub( as typeof( function( ) as integer ) ptr )

#define stringify( s ) #s

#macro checkLhsAndRhs( lhs, rhs )
	#if stringify( lhs ) <> stringify( rhs )
		#print lhs = rhs, 1 warning:
		lhs = rhs
	#endif
#endmacro

#macro checkLhs( lhs )
	checkLhsAndRhs( lhs, byrefany )
	checkLhsAndRhs( lhs, b     )
	checkLhsAndRhs( lhs, ub    )
	checkLhsAndRhs( lhs, sh    )
	checkLhsAndRhs( lhs, ush   )
	checkLhsAndRhs( lhs, l     )
	checkLhsAndRhs( lhs, ul    )
	checkLhsAndRhs( lhs, ll    )
	checkLhsAndRhs( lhs, ull   )
	checkLhsAndRhs( lhs, i     )
	checkLhsAndRhs( lhs, ui    )
	checkLhsAndRhs( lhs, f     )
	checkLhsAndRhs( lhs, d     )
	checkLhsAndRhs( lhs, s     )
	checkLhsAndRhs( lhs, z     )
	checkLhsAndRhs( lhs, w     )
	checkLhsAndRhs( lhs, udt1  )
	checkLhsAndRhs( lhs, udt2  )
	checkLhsAndRhs( lhs, fwd1  )
	checkLhsAndRhs( lhs, fwd2  )
	checkLhsAndRhs( lhs, psub  )
	checkLhsAndRhs( lhs, pfi   )
	checkLhsAndRhs( lhs, pany  )
	checkLhsAndRhs( lhs, pb    )
	checkLhsAndRhs( lhs, pub   )
	checkLhsAndRhs( lhs, psh   )
	checkLhsAndRhs( lhs, push  )
	checkLhsAndRhs( lhs, pl    )
	checkLhsAndRhs( lhs, pul   )
	checkLhsAndRhs( lhs, pll   )
	checkLhsAndRhs( lhs, pull  )
	checkLhsAndRhs( lhs, pi    )
	checkLhsAndRhs( lhs, pui   )
	checkLhsAndRhs( lhs, pf    )
	checkLhsAndRhs( lhs, pd    )
	checkLhsAndRhs( lhs, ps    )
	checkLhsAndRhs( lhs, pz    )
	checkLhsAndRhs( lhs, pw    )
	checkLhsAndRhs( lhs, pudt1 )
	checkLhsAndRhs( lhs, pudt2 )
	checkLhsAndRhs( lhs, pfwd1 )
	checkLhsAndRhs( lhs, pdwf2 )
	checkLhsAndRhs( lhs, ppsub )
	checkLhsAndRhs( lhs, ppfi  )
#endmacro

checkLhs( byrefany )
checkLhs( b     )
checkLhs( ub    )
checkLhs( sh    )
checkLhs( ush   )
checkLhs( l     )
checkLhs( ul    )
checkLhs( ll    )
checkLhs( ull   )
checkLhs( i     )
checkLhs( ui    )
checkLhs( f     )
checkLhs( d     )
checkLhs( s     )
checkLhs( z     )
checkLhs( w     )
checkLhs( udt1  )
checkLhs( udt2  )
checkLhs( fwd1  )
checkLhs( fwd2  )
checkLhs( psub  )
checkLhs( pfi   )
checkLhs( pany  )
checkLhs( pb    )
checkLhs( pub   )
checkLhs( psh   )
checkLhs( push  )
checkLhs( pl    )
checkLhs( pul   )
checkLhs( pll   )
checkLhs( pull  )
checkLhs( pi    )
checkLhs( pui   )
checkLhs( pf    )
checkLhs( pd    )
checkLhs( ps    )
checkLhs( pz    )
checkLhs( pw    )
checkLhs( pudt1 )
checkLhs( pudt2 )
checkLhs( pfwd1 )
checkLhs( pdwf2 )
checkLhs( ppsub )
checkLhs( ppfi  )
