{{fbdoc item="title" value="PUT (GRAPHICS)"}}----
Graphics statement to copy an image on to another image or screen

{{fbdoc item="syntax"}}##
	**Put** [ //target//, ] [ STEP ] ( //x//,//y// ), //source// [ ,( //x1//,//y1// )-( //x2//,//y2// ) ] [ ,//method// [ ,( //alpha//|//value//|//blender// [ ,//param//]) ] ]
##
{{fbdoc item="param"}}
	##//target//##
		is the address of the buffer where the image is to be drawn. If it's omitted, the image gets blitted to screen. See below.
	##STEP##
		indicates that ##(//x//,  //y//)## offsets are relative to the current graphics cursor position.	
	##(//x//,  //y//)##
		specify offsets from the upper-left corner of the destination buffer, or screen, that the image gets drawn to. 
	##//source//##
		is the address of the buffer of the image to be drawn. See below.
	##(//x1//, //y1//)-(//x2//, //y2//)##
		specify a rectangular area in the source buffer to draw. If omitted, the entire buffer is drawn.
	##//method//##
		specifies the method used to draw the image to the destination buffer, and can be any one of the following (the default method is XOR):

		Background-independent methods
			##PSET## : Source pixel values are copied without modification.
			##PRESET## : Source pixel values are 1's-complement negated before being copied.
			##TRANS## : Source pixel values are copied without modification. Does not draw source pixels of mask color. See below.
		Background-dependent methods
			##AND## : Destination pixels are bitwise ANDed with source pixels. See below.
			##OR## : Destination pixels are bitwise ORed with source pixels. See below.
			##XOR## : Destination pixels are bitwise XORed with source pixels. See below.
			##ALPHA## : Source is blended with a translucency factor specified in the alpha parameter. Does not draw source pixels of mask color. See below.
			##ADD##: Source is multiplied by a value and added with saturation to the destination. See below.
			##CUSTOM## : Uses a user-defined function to perform blending the source with the destination. See below.

	##//alpha//## 
		is a 0-255 value specifying the opacity of an ALPHA method blit.
	##//value//##
		is a 0-255 value specifying the multiplier factor for the ADD method blit.
	##//blender//## 
		specifies the address of a user-defined function to be called in a CUSTOM method blit. See below.
	##//param//## 
		specifies a parameter to pass to the custom blender.

{{fbdoc item="desc"}}
	The ##**Put**## statement can be used to draw an image onto another image. The 'x' and 'y' coordinates are affected by the last call to the ##[[KeyPgViewgraphics View]]## and ##[[KeyPgWindow Window]]## statements, and plotted image respects the current clipping region set by last call to the ##[[KeyPgViewgraphics View]]## statement. The source image is clipped if it is drawn outside the destination buffer.

	**Valid Image Buffers**
		The ##//source//## and ##//target//## image buffers must be valid image buffers. Valid image buffers are created using the ##[[KeyPgGetgraphics Get]]## or ##[[KeyPgImagecreate ImageCreate]]## statements. Valid image buffers can be specified in a ##**Put**## statement using an array name with optional index, or a pointer with optional index.

	**Drawing methods**
		Depending on the method used, the existing pixel values in the destination buffer are used to calculate the pixel values that are actually drawn. The ##PSET##, ##PRESET## and ##TRANS## methods do not use the destination buffer for calculating final pixel values, while the ##AND##, ##OR##, ##XOR##, ##ALPHA## and ##ADD## methods do. Images that are drawn with these latter methods will look differetly depending on the content of the destination buffer.

	**Different pixel formats**
		The pixel format of an image buffer must be compatible with the current gfx mode color depth; that is, if you acquire an image using ##[[KeyPgGetgraphics Get]]## and you later change screen mode via the ##[[KeyPgScreengraphics Screen]]## statement, the image data may not be valid in the new gfx mode, and may produce undesired results.

		The ##AND##, ##OR## and ##XOR## methods produce different results depending on the current color depth, as pixels are stored in different formats; see [[GfxInternalFormats Internal pixel formats]] for details. 

	**Mask Color**
		The ##TRANS##, ##ALPHA## and ##ADD## methods do not draw pixels in the source image that use the mask color. The mask color depends on the current color depth: in paletted modes (up to 8 bpp) it is equal to color index 0, while in hi/truecolor modes (15, 16, 24 and 32 bpp) it is equal to color &hFF00FF (bright pink) or the value returned by [[KeyPgRgb RGB]](255, 0, 255). Note that in 24/32 bpp modes the alpha value of a color does not affect the identification of the transparent color; only the lower 24 bits are used to identify it. See [[GfxInternalFormats Internal pixel formats]] for details. 

	**Alpha drawing**
		The ##ALPHA## method can be used in two modes. If the ##//alpha//## parameter is specified, this is used to specify the level of translucency for the whole image to be drawn; a value of 0 will draw a completely transparent image, whereas a value of 255 will draw a completely solid one. This mode works only in hi/truecolor modes (15, 16, 24 and 32 bpp). If the ##//alpha//## parameter is omitted, the ##ALPHA## method will take the alpha level value on a per-pixel basis, allowing to draw images with an alpha channel (certain parts of the image can be made more or less translucent than others). This mode works only in 32 bpp mode, as this is the only color depth that allows for an embedded alpha value in each pixel.

	**Custom Blend Function**
		The ##CUSTOM## method uses a user-defined function to calculate the final pixel values to be drawn to the destination buffer. This function will be called once for every pixel of the source image, and will recieve the source and destination pixel values, and a data pointer passed by the PUT function. The pixel value returned will be the value used to draw to the destination buffer. The function has the form:

		##[[KeyPgDeclare declare]] [[KeyPgFunction function]] //identifier// ( [[KeyPgByval byval]] //source_pixel// [[KeyPgAs as]] [[KeyPgUinteger uinteger]], [[KeyPgByval byval]] //destination_pixel// [[KeyPgAs as]] [[KeyPgUinteger uinteger]], [[KeyPgByval byval]] //parameter// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]) [[KeyPgAs as]] [[KeyPgUinteger uinteger]]##

			##//identifier//## is the name of the function. Can be anything.
			##//source_pixel//## is the current pixel value of the source image.
			##//destination_pixel//## is the current pixel value of the destination image.
			##//parameter//## is the parameter that is passed by the PUT command.  If it was omitted, its value will be zero.

{{fbdoc item="ex"}}
	The following example shows how to allocate memory for an image, draw that image using various methods including a custom blender, and free the memory for the image:
%%(qbasic)declare function checkered_blend( byval src as uinteger, byval dest as uinteger, byval param as any ptr ) as uinteger

   screen 14, 32                                   '' set 320x240x32 gfx mode
   
   dim as any ptr sprite
   dim as integer counter = 0
   
   sprite = ImageCreate( 32, 32 )                  '' allocate memory for 32x32 sprite
   
   line sprite, ( 0, 0 )-( 31, 31 ), rgba(255, 0, 0, 64), bf  '' draw a sprite ...
   line sprite, ( 4, 4 )-( 27, 27 ), rgba(255, 0, 0, 192), bf
   line sprite, ( 0, 0 )-( 31, 31 ), rgb(0, 255, 0), b
   line sprite, ( 8, 8 )-( 23, 23 ), rgba(255, 0, 255, 64), bf
   line sprite, ( 1, 1 )-( 30, 30 ), rgba(0, 0, 255, 192)
   line sprite, ( 30, 1 )-( 1, 30 ), rgba(0, 0, 255, 192)
   
   cls
   dim as integer i : for i = 0 to 63              '' draw the background
	  line( i,0 )-( i,240 ), rgb( i * 4, i * 4, i * 4 )
   next i
   
   '' demonstrate all drawing methods ...
   put( 8,14 ), sprite, pset
   put step( 16,20 ), sprite, preset
   put step( -16,20 ), sprite, and
   put step( 16,20 ), sprite, or
   put step( -16,20 ), sprite, xor
   put step( 16,20 ), sprite, trans
   put step( -16,20 ), sprite, alpha, 96
   put step( 16,20 ), sprite, alpha
   put step( -16,20 ), sprite, add, 192
   put step( 16,20 ), sprite, custom, @checkered_blend, @counter
   
   '' print a description near each demo
   draw string (100, 26), "<- pset"
   draw string step (0, 20), "<- preset"
   draw string step (0, 20), "<- and"
   draw string step (0, 20), "<- or"
   draw string step (0, 20), "<- xor"
   draw string step (0, 20), "<- trans"
   draw string step (0, 20), "<- alpha (uniform)"
   draw string step (0, 20), "<- alpha (per pixel)"
   draw string step (0, 20), "<- add"
   draw string step (0, 20), "<- custom"
   
   ImageDestroy( sprite )                          '' free allocated memory for sprite
   sleep : end 0

'' custom blender function: chequered put
function checkered_blend( byval src as uinteger, byval dest as uinteger, byval param as any ptr ) as uinteger
   dim as integer ptr counter
   dim as uinteger pixel
   
   counter = cast(integer ptr, param)
   pixel = iif(((*counter and 4) shr 2) xor ((*counter and 128) shr 7), src, dest)
   *counter += 1
   return pixel
end function
%%
{{image class="center" title="Put example output" url="http://img297.imageshack.us/img297/3752/keypgputgraphicsputexamgh6.png" link="http://img297.imageshack.us/my.php?image=keypgputgraphicsputexamgh6.png"}}

{{fbdoc item="diff"}}
	- The ##TRANS##, ##ALPHA##, ##ADD## and ##CUSTOM## methods are new to FreeBASIC.
	- In QB, the destination was always the screen.
	- QB throws a run-time error instead of clipping out of bounds images.
	- In QB, only arrays can be specified as source images.

{{fbdoc item="see"}}
	- ##[[KeyPgGetgraphics Get (Graphics)]]##
	- ##[[KeyPgPutgraphics Put (Graphics)]]##
	- ##[[KeyPgImagecreate ImageCreate]]##
	- ##[[KeyPgAlphaGfx Alpha]]##
	- [[GfxInternalFormats Internal pixel formats]]

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}