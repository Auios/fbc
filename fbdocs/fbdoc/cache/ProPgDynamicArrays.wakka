{{fbdoc item="title" value="Dynamic Arrays"}}----
Resizable homogenous data structures

{{fbdoc item="section" value="Overview"}}
	Dynamic arrays are [[ProPgArrays arrays]] that can, during program execution, either be resized to hold more or less elements, or have their dimension[s] use a different subscript range. The memory used by a dynamic array to store its elements is allocated at runtime, in the free store (the heap). This allows dynamic arrays a larger potential maximum size than static arrays, since they are not limited to stack space.

{{fbdoc item="section" value="Declaration and definition"}}
	A dynamic array is declared with the ##[[KeyPgExtern EXTERN]]## keyword, followed by a variable identifier, a parenthesized list of zero (0) or more subscript ranges and an element [[CatPgStdDataTypes datatype]]. For an array to be declared dynamic, either an empty subscript range list can be used, or one or more of the subscript ranges must have non-constant values - ie., the ranges must be specified by variables or objects convertible to ##[[KeyPgInteger INTEGER]]##.

%%(qbasic)
	dim maxLowerBound as integer = -5
	dim maxUpperBound as integer = 10
	
	'' Declares a two dimensional dynamic array of elements of type STRING..
	extern arrayOfStrings(maxLowerBound to maxUpperBound, 20) as string

	'' Declares a one-dimensional dynamic array of elements of type BYTE..
	extern arrayOfBytes() as byte
%%
	A dynamic array is defined with either the ##[[KeyPgDim DIM]]## or ##[[KeyPgRedim REDIM]]## keywords, following the same form as declaration. The ##[[KeyPgRedim REDIM]]## keyword, however, always defines dynamic arrays, whether the subscript ranges are constant or not.

%%(qbasic)
	'' Defines one-dimensional dynamic arrays of type SHORT and INTEGER..
	dim arrayOfShorts() as short
	redim arrayOfIntegers(9) as integer
%%
	Since the memory for dynamic arrays is allocated at runtime, when they are defined, the elements of dynamic arrays declared with ##[[KeyPgExtern EXTERN]]## cannot be accessed until the array is defined. Similarly, dynamic arrays defined with empty subscript range lists have zero size - they hold zero elements - so they too must be resized before any elements can be accessed.

{{fbdoc item="section" value="Resizing"}}
	Resizing a dynamic array refers to "redefining" the array with different values for its subscript range[s], allowing the array to grow or shrink. Elements outside the new subscript range[s] are erased, while new elements initialized with a zero or //null// value are added when resizing with greater subscript bounds. Dynamic arrays are resized using the ##[[KeyPgRedim REDIM]]## keyword following the same form as definition.

%%(qbasic)
	'' Define an empty dynamic array of SINGLE elements..
	dim array() as single

	'' Resize the array to hold ten (10) SINGLE elements..
	redim array(9) as single
%%
	By default, element values of a dynamic array are lost when resized - the array will contain zero or more elements initialized to a zero or //null// value. To retain the previous element values during a resize, use the ##[[KeyPgPreserve PRESERVE]]## keyword.

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}