{{fbdoc item="title" value="Frequently Asked FB Graphics Library Questions"}}----

{{anchor name="item0"}}
**FreeBASIC Graphics Library questions:**
	==- {{anchor name="item5|How can I link/use Gfxlib?"}}==
	==- {{anchor name="item6|What about the fbgfx.bi header file?"}}==
	==- {{anchor name="item1|How are GET/PUT arrays managed?"}}==
	==- {{anchor name="item7|Why is BSAVE/BLOAD crashing?"}}==
	==- {{anchor name="item2|Can I get rid of the 'DOS' screen?"}}==
	==- {{anchor name="item3|How can I get the red, green, blue, or alpha component of a colour?"}}==
	==- {{anchor name="item4|How can I make the 'x' close my application?"}}==


----
@@**FreeBASIC Graphics Library questions**@@

{{anchor name="item5"}}==How can I link/use Gfxlib?==
	Gfxlib is "built in" into the language, it is not necessary to include any .bi file or to link any library explicitely. FB detects you want to use Gfxlib when it finds a [[KeyPgScreengraphics SCREEN]] or [[KeyPgScreenres SCREENRES]] instruction. So to use Gfxlib, just start a graphics screen mode and use the graphics commands.
	
	{{anchor name="item0|Back to top"}}

{{anchor name="item6"}}==What about the fbgfx.bi header file?==
	The fbgfx.bi header file is available for inclusion by your program, and contains constant and type definitions that may be helpful to the programmer when using Gfxlib. You do not have to explicitely include this file to use Gfxlib however; the header is only available as an aid. Contents include [[KeyPgScreengraphics SCREEN]]/[[KeyPgScreenres SCREENRES]] mode flag constants, definitions of [[GfxScancodes Keyboard scancodes]] and more.
	
	{{anchor name="item0|Back to top"}}

{{anchor name="item1"}}==How are GET/PUT arrays managed?==
	In FreeBASIC, images can be used as arrays (as in QB) or as pointers. Either way, the image data is contained in one continuous chunk. The chunk consists of an header followed by the image data. The header can be of two types (old-style and new-style) and determines the format of the following image data.
	
		**Old-style** chunk header consists of 4 bytes (32 bits). The first 3 bits contain the image color depth in bytes per pixel (8-bit color, depth = 1; 16-bit color, depth = 2; 32-bit color, depth = 4). The next 13 bits contain the image width. The last 16 bits contain the image's height. Please note the instrinsic nature of the header allows only for images of sizes up to 8191x65535. The actual pixel data follows the header, and is compacted one row of pixels after another; no data alignment is assumed. The final size of the chunk can then be computed using the formula:
	
			##size = 4 + ( width * height * bytes_per_pixel )##

		**New-style** chunk header consists of 32 bytes. The first word (32 bits) must be equal to the value &h7, allowing Gfxlib to identify the new type of chunk. The secord word contains the image color depth in bytes per pixel. The third and fourth words contain the image width and height respectively, effectively removing the image size limit enforced by the old-style image chunks. The fifth word contains the pixel row pitch in bytes; this tells how many bytes a row of pixels of the image is long. The pitch in new-style chunks is always a multiple of 16, to allow pixels row data to be aligned on the paragraph boundary. The other 3 remaining words (12 bytes) of the header are currently unused and reserved for future use. The final size of the image is:

			##size = 32 + ( ( ( ( width * bytes_per_pixel ) + &hF ) and not &hF ) * height )##

	The [[KeyPgGetgraphics GET]] and [[KeyPgImagecreate IMAGECREATE]] functions both create a new-style image chunk, with an exception: [[KeyPgGetgraphics GET]] creates an old-style chunk when working in a gfx mode with a color depth equal or less than 8 bits per pixel; this was made to preserve compatibility with old QuickBasic sources, as the old-style chunks use the same internal format as used in QB.
	All gfx primitives can work with both old-style and new-style image chunks. For more informations on the GET/PUT structure, please refer to [[FaqPggetputstructure this example]].

	{{anchor name="item0|Back to top"}}

{{anchor name="item7"}}==Why is BSAVE/BLOAD crashing?==
	BSAVE/BLOAD can only be used to load and save graphics screens in FB. It can't be used to save a Textmode screen. To load and save an array check this   [[FaqPgbloadworkaround snippet using file GET/PUT]]

{{anchor name="item0|Back to top"}}

{{anchor name="item2"}}==Can I get rid of the 'DOS' screen?==
	Definitely. You have to give FB the right command for it when you compile your program.
		- If you compile from a command prompt, simply add "-s gui" to the end, like "fbc myprg.bas -s gui"
		- If you compile in a specific IDE, you have to edit the "Compiler Defaults". In Jelly-Fish Pro, its "Compiler->Set Compiler Defaults->Compiler Options". Add "-s gui" (NO QUOTES) in that box.

	{{anchor name="item0|Back to top"}}


{{anchor name="item3"}}==How can I get the red, green, blue, or alpha component of a colour?==

	Each byte in a colour attribute corresponds with the red, green, blue, and alpha components.  The following example shows how to extract the component values from a 16, 24, or 32 bit colour attribute.
	
	%%(qbasic)
#define rgb_a(x) ((x) Shr 24)
#define rgb_r(x) ((x) Shr 16 And 255)
#define rgb_g(x) ((x) Shr 8 And 255)
#define rgb_b(x) ((x) And 255)

'' Assume a 16, 24, or 32 bit screen mode has been set
c = point(x, y)
red = rgb_r(c)
green = rgb_g(c)
blue = rgb_b(c)
alpha = rgb_a(c)
%%

	{{anchor name="item0|Back to top"}}

{{anchor name="item4"}}==How can I make the 'x' close my application?==
	The "Close" button, or "X" button, however you prefer to call it, can be enabled by checking for the right ascii scan code. Ascii scancodes can be read through inkey. 

	Here is a small example of how to enable the "x":

%%(qbasic)
Screen 13
Do
  Print "Click the 'x' to close this app."
  sleep
Loop Until Inkey = Chr( 255 ) + "k"
%%

	NOTE: If you use an old version of FB, you may have to use:
	- Chr( 255 ) + "X"

	{{anchor name="item0|Back to top"}}

{{fbdoc item="back" value="DocToc|Table of Contents"}}