{{fbdoc item="title" value="VALULNG"}}----
Converts a string to a unsigned long integer number.

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Valulng** [[KeyPgOverload overload]] ( [[KeyPgByref byref]] //str// [[KeyPgAs as]] [[KeyPgStringtype string]] ) [[KeyPgAs as]] [[KeyPgUlongint ulongint]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Valulng** ( [[KeyPgByval byval]] //str// [[KeyPgAs as]] [[KeyPgWstring wstring]] [[KeyPgPtr ptr]] ) [[KeyPgAs as]] [[KeyPgUlongint ulongint]]
##
{{fbdoc item="usage"}}##
	//result// = **Valulng**( //str// )
##
{{fbdoc item="param"}}
	##//str//##
		the string containing a number to convert

{{fbdoc item="ret"}}
	Returns a converted ##[[KeyPgUlongint Ulongint]]## number.

	If the first character of the string is invalid, ##**Valulng**## will return a 0.

{{fbdoc item="desc"}}
	For example, ##**Valulng**##("10") will return 10, and ##**Valulng**##("10.10") will return 10 too. The function parses the string from the left and returns the longest integer it can read, stopping at the first non-suitable charater.

	Incidentally, this function is the opposite of ##[[KeyPgStr Str]]##, which converts a number to a string.

{{fbdoc item="ex"}}
%%(qbasic)
dim a as string,  b as ulongint
a = "20xa211"
b = valulng(a)
print a, b
%%

%%
20xa211   20
%%

{{fbdoc item="diff"}}
	- New to FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgStr Str]]##
	- ##[[KeyPgVal Val]]##
	- ##[[KeyPgValint Valint]]##
	- ##[[KeyPgVallng Vallng]]##
	- ##[[KeyPgChr Chr]]##
	- ##[[KeyPgAsc Asc]]##

{{fbdoc item="back" value="CatPgCasting|Converting Data Types"}}{{fbdoc item="back" value="CatPgString|String Functions"}}