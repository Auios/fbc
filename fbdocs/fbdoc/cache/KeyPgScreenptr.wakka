{{fbdoc item="title" value="SCREENPTR"}}----
Graphics function to return a pointer to the current work page framebuffer memory.

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Screenptr** ( ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
##
{{fbdoc item="usage"}}##
	//result// = **Screenptr**
##
{{fbdoc item="ret"}}
	a pointer to the current work page framebuffer memory, or NULL (0) if no gfx mode is set.

{{fbdoc item="desc"}}
	**Screenptr** provides a way to directly read/write the working page's framebuffer. [[KeyPgScreenlock Screenlock]] should be used before any read or writes are attempted. The pointer returned is valid up until any subsequent call to [[KeyPgScreengraphics Screen]] or [[KeyPgScreenres Screenres]], which invalidates it.

	**Screenptr** can also be used to test if a call to [[KeyPgScreengraphics Screen]] or [[KeyPgScreenres Screenres]] was successful, indicated by a non-NULL (<> 0) return value.

{{fbdoc item="ex"}}
%%(qbasic)
const w as integer = 800
const h as integer = 600

screenres w, h, 32

' Get the address of the 32 bit/pixel frame buffer. An
' uinteger ptr is used to simplify 32-bit pointer arithmetic.
dim buffer as uinteger ptr = screenptr()
if (0 = buffer) then
	print "error: graphics screen not initialized."
	end -1
end if

' Lock the screen to allow direct framebuffer access.
screenlock()

' Plot a green pixel at (400, 300).
buffer[400 + w * 300] = RGB(0, 255, 0)

' Unlock the screen.
screenunlock()

sleep
%%

{{fbdoc item="diff"}}
	- New to FreeBasic

{{fbdoc item="see"}}
	- ##[[KeyPgScreengraphics Screen (Graphics)]]##
	- ##[[KeyPgScreenres Screenres]]##
	- ##[[KeyPgScreenlock Screenlock]]##
	- ##[[KeyPgScreenunlock Screenunlock]]##

{{fbdoc item="back" value="CatPgGfx|GFX Functions Index"}}