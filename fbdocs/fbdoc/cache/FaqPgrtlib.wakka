{{fbdoc item="title" value="Frequently Asked FB Run-Time Library Questions"}}
{{anchor name="item0"}}
----

**FreeBASIC Run-Time Library questions:**
	==- {{anchor name="item1|Why is BSAVE/BLOAD crashing?"}}==
	==- {{anchor name="item8|How do I play sound?"}}==
	==- {{anchor name="item2|How do I play sound through a soundcard in DOS?"}}==
	==- {{anchor name="item3|FreeBASIC gives me an error 'ld: can't find -lX11' or something similar!"}}==
	==- {{anchor name="item4|How do I access the DOS interrupts?"}}==
	==- {{anchor name="item5|How do I access the serial ports?"}}==
	==- {{anchor name="item6|How do I print?"}}==
	==- {{anchor name="item7|How do I access the harware ports?"}}==




----
@@**FreeBASIC Run-Time Library questions**@@

{{anchor name="item1"}}==Why is BSAVE/BLOAD crashing?==
	BSAVE/BLOAD can only be used to load and save graphics screens in FB. It can't be used to save a Textmode screen. To load and save an array check this   [[FaqPgbloadworkaround snippet using file GET/PUT]]

{{anchor name="item0|Back to top"}}

{{anchor name="item8"}}== How do I play sound?==
	Of the QB's sound keywords only BEEP is implemented in FB. 
	If PC speaker sound is required, it should be programmed using IN and OUT. See the example in the OUT keyword for a replacement of SOUND. 
	There is a library called QBSound that allows to emulate qb's ability to PLAY in the background tunes encoded in strings, it uses the soundcard's synthesizer.
	If what's required is to play .wav or .mp3 files thru a soundcard, external libraries as FMOD or BASS can be used in Linux and Windows. For DOS see the next answer.

{{anchor name="item0|Back to top"}}

{{anchor name="item2"}}==How do I play sound through a soundcard in DOS?==
	This is not easy in bare DOS; there is built-in access to standard libraries which works well if you're in a DOS box under Windows. If you are in bare DOS, you can either access the soundcard using a (mostly SB16 compatible) driver, if it is available for your card (unfortunately, this is becoming more and more a problem, the DOS drivers are poor or even inexistent), or access the card directly (this is low-level programming, hardware-related, assembler is also needed, and you need technical docs about the card). The probably only source of inspiration is the DOS audio player MPXPLAY (written in C with some ASM), supporting both methods. To play compressed files (MP3, OGG, FLAC, ...) , you additionally need the decompressing code.  

{{anchor name="item0|Back to top"}}
	
{{anchor name="item3"}}==FreeBASIC gives me an error 'ld: can't find -lX11' or something similar!==
	FreeBASIC under linux uses ld to link it's files under linux. This program requires that any libraries you use have the '-dev' versions installed. For example, for the above error message, you'd want to install xlib-dev for your distribution. Other common errors are for glibc, which requires glibc-dev, and sdl, which requires sdl-dev. Most distributions make these easily available on your install media.

{{anchor name="item0|Back to top"}}

{{anchor name="item4"}}==How do I access the DOS interrupts?==
	The DOS interrupts can be accessed only from the DOS version, only because you must be in a DOS session for the interrupts to exist. 

	The access to interrupts is much slower than QB's: in FB the DPMI server will have to do 2 context switches, going to real-mode and coming back. All of that will eat hundreds of clocks in raw DOS and thousands of clocks if emm386 is loaded or if inside a Windows' DOS box. 
Use DJGPP's DPMI wrapper:

%%(qbasic)
#include "dos/dpmi.bi"

type RegTypeX as __dpmi_regs

#define INTERRUPTX(v,r) __dpmi_int( v, @r )
%%

{{anchor name="item0|Back to top"}}

{{anchor name="item5"}}==How do I access the serial ports?==

	Only the Windows version of FB allows to access to ports in a QB-like way, using OPEN COM.
	**DOS**
	The DOS INT14 is not very useful as it sends/reads a single char in each call. So it's better to use  an external DOS32 comms library. /* does someone know a good one ? */

	**Windows**
	As of v0.15 OPEN COM is implemented for Windows

	**Linux**
	Linux is based on the UNIX paradigm, so serial ports are accessed as files(everything in Unix is a file or a process). This means that a developer can use standard documentation and the OPEN command to open /dev/ttys devices and manipulate them in a manner similar to C/""C++"".
	!!!WRITEME!!!

{{anchor name="item0|Back to top"}}

{{anchor name="item6"}}==How do I print?==
	FB Version 0.15 supports character output to printer. 
	To print graphics two approaches are possible:
	- Preprocess the graphics, program the printer and send the pixels in FB. This is portable but depends on the printer model.  
	- In Windows and Linux there are specific API calls. This is not OS-portable but the OS's printer driver makes it printer-independent 

{{anchor name="item0|Back to top"}}

{{anchor name="item7"}}==How do I access the harware ports?==

	As of V0.15 QB's INP, OUT and WAIT are implemented. 
	The GfxLib intercepts the calls to some VGA ports to emulate the widely used QB's palete manipulation and vsync methods. So ports &H3DA, &H3C7, &H3C8 and &H3C9 can't be accessed it GfxLib is used. All other ports are accessible. 
	No further care is required to use INP and OUT in Linux or DOS. For the Windows version the required device driver is installed each first time the program is run in a windows session; this requires Administrator rights for this first run or the program will end with an error. 

{{anchor name="item0|Back to top"}}
	