{{fbdoc item="title" value="GET (GRAPHICS)"}}----
Copies pixel data to an array

{{fbdoc item="syntax"}}##
	**Get** [//target//,] [STEP] (//x1//, //y1//)-[STEP](//x2//, //y2//), //arrayname//[(//idx//)]
##
{{fbdoc item="param"}}
	##//target//##
		is the address of the image buffer to get from
	##STEP##
		indicates that, ##(//x1//,  //y1//)## offsets are relative to the current graphics cursor position.	
	##(//x1//,  //y1//)##
		upper-left coordinates of image area to get
	##STEP##
		indicates that, ##(//x2//,  //y2//)## offsets are relative
	##(//x2//,  //y2//)##
		lower-right coordinates of image area to get
	##//arrayname//##
		array variable or pointer to memory location to store the new image

{{fbdoc item="desc"}}
	Statement to save a block of pixels data into an array for later use. Pixel data is taken from the current work page as set by ##[[KeyPgScreenset Screenset]]##, or from the target ##[[KeyPgGetgraphics Get]]##/##[[KeyPgPutgraphics Put]]## buffer if specified.

	##(//x1//, //y1//)##  and ##(//x2//, //y2//)## are coordinates of the opposite corners of the graphics blocks to retrieve. The first is the upper-left corner, and the second is the lower-right corner. ##STEP## specifies a pair of coordinates is relative to the last graphics cursor position. ##STEP## before the second pair of coordinates specifies those are relative to the first pair. Pixel data is stored into ##//arrayname//##, which can be an array (with or without index) or a pointer to a buffer big enough to hold the data (for example a buffer created by the ##[[KeyPgImagecreate Imagecreate]]## function).

	The coordinates of the block are affected by the most recent ##[[KeyPgWindow Window]]## and ##[[KeyPgViewgraphics View (Graphics)]]## statements, and must be both inside the current clipping region set by ##[[KeyPgViewgraphics View (Graphics)]]##, otherwise an illegal function call runtime error will be triggered, and the function will have no effect.

	As previously said, the supplied array must be large enough to hold the block you're going to save; the required array size depends on both the block size in pixels and the current color depth. Use the following formulas to compute the right size in bytes:

	For color depths 1, 2, 4 and 8:
	##size = 32 + (((w + &hF) and not &hF) * h)##
	For color depths 15 and 16:
	##size = 32 + ((((w * 2) + &hF) and not &hF) * h)##
	For color depths 24 and 32:
	##size = 32 + ((((w * 4) + &hF) and not &hF) * h)##

	Where w and h are the width and height of the graphics block you want to save. Pixel data starts at the 33th byte in the buffer, and pixel rows are byte-aligned on the paragraph size (16 bytes). Data is stored in the current pixel format.
	Note that the ##size## formula was changed in FreeBASIC 0.17 to allow for extended sprite header capabilities. Previously the correct formula, which was compatible with QB, was:

	##size = 4 + (w * h * bpp)##

	Where bpp is the bytes per pixel used by the current video mode. All the graphics primitives working with buffers accept both old-style and new-style buffers. ##**Get**## will always produce new-style (32 bytes extended header) buffers, except while working in a 8 bit or lower color depth mode; in this case the statement will produce an old-style (4 bytes compact header) buffer to retain compatibility with old QB sources.

	The use of ##**Get**## is not recommended; an easier way to create suitable buffers for your images is by using the ##[[KeyPgImagecreate ImageCreate]]## function, you may like to have a look at it.

{{fbdoc item="ex"}}
	For an example see ##[[KeyPgPutgraphics Put (Graphics)]]##.

{{fbdoc item="see"}}
	- ##[[KeyPgPutgraphics Put (Graphics)]]##
	- ##[[KeyPgGetfileio Get (File I/O)]]##
	- ##[[KeyPgScreengraphics Screen (Graphics)]]##
	- ##[[KeyPgWindow Window]]##
	- ##[[KeyPgViewgraphics View (Graphics)]]##
	- [[GfxInternalFormats Internal pixel formats]]

{{fbdoc item="back" value="CatPgGfx2D|2D Drawing Functions"}}