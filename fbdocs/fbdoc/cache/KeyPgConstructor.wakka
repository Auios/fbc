{{fbdoc item="title" value="CONSTRUCTOR"}}----
Called automatically when a class or user defined type is created

{{fbdoc item="syntax"}}##
	[[KeyPgType Type]] //typename//
		[[KeyPgDeclare declare]] **Constructor** ( )
		[[KeyPgDeclare declare]] **Constructor** ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //parameter// [[KeyPgAs as]] [[DataType datatype]] [ = //default// ] [, ... ] )
	End Type

	**Constructor** //typename// ( [ //parameters// ] )
		//statements//
	**End Constructor**
##
{{fbdoc item="desc"}}
	##**Constructor**## methods are called when a user defined ##[[KeyPgType Type]]## or CLASS variable is created.  ##//typename//## is the name of the type for which the ##**Constructor**## method is declared and defined.  The ##//typename//## is resolved similiar to the way function names are resolved when used in a ##[[KeyPgNamespace Namespace]]##.  The ##//typename//## may be resolved by prefixing the name of the namespace, or by using the ##[[KeyPgUsing Using]]## statement.

	More than one **Constructor** may exist for a type or class.  The exact constructor called depends on the ##//parameter//## signature matched where used.  More than one ##//parameter//## may exist in a constructor method declaration.

	A Constructor method is similiar to overloaded functions in most respects, except there is a hidden ##//this//## parameter having the same type as ##//typename//##.  ##//this//## is used to access the fields of the ##[[KeyPgType Type]]## or CLASS which is to be initialized in the ##**Constructor**## method.

	Any fields that have their own default constructor are called first.

{{fbdoc item="ex"}}
%%(qbasic)
type sample

  _text as string

  declare constructor ()
  declare constructor ( a as integer )
  declare constructor ( a as single  ) 
  declare constructor ( a as string, b as byte ) 

  declare operator cast () as string

end type

constructor sample ()
  print "constructor sample ()"
  print
  this._text = "Empty"
end constructor

constructor sample ( a as integer )
  print "constructor sample ( a as integer )"
  print "  a = "; a
  print
  this._text = str(a)
end constructor

constructor sample ( a as single )
  print "constructor sample ( a as single )"
  print "  a = "; a
  print
  this._text = str(a)
end constructor

constructor sample ( a as string, b as byte )
  print "constructor sample ( a as string, b as byte )"
  print "  a = "; a
  print "  b = "; b
  print
  this._text = str(a) + "," + str(b)
end constructor

operator sample.cast () as string
  return this._text
end operator

print "Creating x1"
dim x1 as sample

print "Creating x2"
dim x2 as sample = 1

print "Creating x3"
dim x3 as sample = 99.9

print "Creating x4"
dim x4 as sample = sample( "aaa", 1 )

print "Values:"
print "  x1 = "; x1
print "  x2 = "; x2
print "  x3 = "; x3
print "  x4 = "; x4
%%

{{fbdoc item="diff"}}
	- New to FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgModuleConstructor Constructor (Module)]]##
	- ##[[KeyPgDestructor Destructor]]##
	- ##[[KeyPgNamespace Namespace]]##
	- ##[[KeyPgType Type]]##

{{fbdoc item="back" value="CatPgCompound|Compound Statements"}}