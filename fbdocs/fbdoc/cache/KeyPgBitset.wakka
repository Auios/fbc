{{fbdoc item="title" value="BITSET"}}----
Macro that sets a bit in an integer.

{{fbdoc item="syntax"}}##
	[[KeyPgPpdefine #define]] **Bitset**( //value//, //bit_number// ) ((//value//) [[KeyPgOr or]] (1 [[KeyPgShl shl]] (//bit_number//)))
##
{{fbdoc item="usage"}}##
	//result// = **Bitset**(//value//, //bit_number//)
##
{{fbdoc item="param"}}
	##//value//##
		The integer value to set a bit in.  It is not modified.
	##//bit_number//##
		The zero-based number of the bit to set; 0 is the least-significant bit.

{{fbdoc item="ret"}}
	##//value//## with bit ##//bit_number//## set to 1.

{{fbdoc item="desc"}}
	Macro returning ##//value//## with the bit ##//bit_number//## set to 1.
	##foo = **Bitset**( bar, 5 )##  does the same as ##foo = bar or (1 shl 5)##.

	To set the bit on a 64 bit integer, pass the ##//bit_number//## as a 64 bit integer.

{{fbdoc item="ex"}}
%%(qbasic)
print bitset(4, 0)
print bitset(0, 63LL)
%%
	will produce the output:

%%5
8000000000000000
%%

{{fbdoc item="diff"}}
	- New to FreeBasic.

{{fbdoc item="see"}}
	- ##[[KeyPgBit Bit]]##
	- ##[[KeyPgBitreset Bitreset]]##
	
{{fbdoc item="back" value="CatPgBits|Bit Manipulation"}}