{{fbdoc item="title" value="#DEFINE"}}----
Preprocessor directive to define a macro

{{fbdoc item="syntax"}}##
	#define //identifier//
	#define //identifier// //text//
	#define //identifier//([//parameters//]) //macro_text//
##
{{fbdoc item="desc"}}
	Preprocessor keyword that defines an identifier with a custom meaning:
		- Empty defines (without //text//) can be checked for existence with ##[[KeyPgPpifdef #ifdef]]## and ##[[KeyPgPpifndef #ifndef]]## to hide parts of code to the compiler (conditional compiling).
		- Non-empty defines (with //text//) are substituted by its //text// when the source is parsed, allowing a sort of "shorthand".
		- Defines with parameters are substituted by the //macro_text//, that will contain all the arguments passed replaced.  **Note:** The open parentheses character ('(') must immediately follow the //identifier//, there should be no white-spaces between them.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/prepro/define.bas"}}%%(freebasic)
#define DEBUGGING
#ifdef DEBUGGING
  ' ... statements
#endif

#define FALSE 0
#define TRUE (not FALSE)

#define MyRGB(R,G,B) (((R)SHL 16)  OR ((G)SHL 8) OR (B)) 
print hex( MyRGB(&hff, &h00, &hff) )

#define printval(bar) _
	print #bar; " ="; bar
%%

{{fbdoc item="diff"}}
	- New to FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgPpmacro #macro]]##
	- ##[[KeyPgPpif #if]]##
	- ##[[KeyPgPpelse #else]]## 
	- ##[[KeyPgPpelseif #elseif]]## 
	- ##[[KeyPgPpendif #endif]]## 
	- ##[[KeyPgPpifdef #ifdef]]##
	- ##[[KeyPgPpifndef #ifndef]]##
	- ##[[KeyPgPpundef #undef]]##
	- ##[[KeyPgDefined defined]]##

{{fbdoc item="back" value="CatPgPreProcess|Preprocessor"}}