{{fbdoc item="title" value="VAL"}}----
Converts a string to a floating point number.

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Val** [[KeyPgOverload overload]] ( [[KeyPgByref byref]] //str// [[KeyPgAs as]] [[KeyPgStringtype string]] ) [[KeyPgAs as]] [[KeyPgDouble double]]
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Val** ( [[KeyPgByval byval]] //str// [[KeyPgAs as]] [[KeyPgWstring wstring]] [[KeyPgPtr ptr]] ) [[KeyPgAs as]] [[KeyPgDouble double]]
##
{{fbdoc item="usage"}}##
	//result// = **Val**( //str// )
##
{{fbdoc item="param"}}
	##//str//##
		the string containing a number to convert

{{fbdoc item="ret"}}
	Returns a converted ##[[KeyPgDouble Double]]## precision number.

	If the first character of the string is invalid, ##**Val**## will return a 0.

{{fbdoc item="desc"}}
	##**Val**##("10") will return 10.0, and ##**Val**##("10.10") will return 10.1. The function parses the string from the left and returns the longest number it can read, stopping at the first non-suitable charater it finds.

	Incidentally, this function is the opposite of ##[[KeyPgStr Str]]##, which converts a number to a string.

{{fbdoc item="ex"}}
%%(qbasic)
dim a as string, b as integer
a = "20xa211"
b = val(a)
print a, b
%%

%%
20xa211   20
%%

{{fbdoc item="diff"}}
	- None

{{fbdoc item="see"}}
	- ##[[KeyPgStr Str]]##
	- ##[[KeyPgValint Valint]]##
	- ##[[KeyPgVallng Vallng]]##
	- ##[[KeyPgChr Chr]]##
	- ##[[KeyPgAsc Asc]]##

{{fbdoc item="back" value="CatPgString|String Functions"}}