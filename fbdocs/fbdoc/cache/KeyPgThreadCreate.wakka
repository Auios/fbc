{{fbdoc item="title" value="THREADCREATE"}}----
Starts a user-defined procedure in a separate execution thread

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Threadcreate** ( [[KeyPgByval byval]] //proc// [[KeyPgAs as]] [[KeyPgSub sub]] ( [[KeyPgByval byval]] [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] ), [[KeyPgByval byval]] //param// [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] = 0, [[KeyPgByval byval]] //stack_size// [[KeyPgAs as]] [[KeyPgInteger integer]] = 0 ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
##
{{fbdoc item="usage"}}##
	//result// = **Threadcreate** ( //proc// [, [ //param// ] [, //stack_size// ] ] )
##
{{fbdoc item="param"}}
	##//proc//##
		A pointer to the ##[[KeyPgSub Sub]]## intended to work as a thread.
	##//param//##
		Optional [[KeyPgAny any]] [[KeyPgPtr ptr]] argument for the ##[[KeyPgSub Sub]]## pointed to by ##//proc//## (it can be a pointer to a structure or an array if more arguments are needed).
	##//stack_size//##
		Optional number of bytes to reserve for this thread's stack.

{{fbdoc item="ret"}}
	**Threadcreate** returns an ##[[KeyPgAny any]] [[KeyPgPtr ptr]]## handle to the thread created, or the null pointer (0) on failure.

{{fbdoc item="desc"}}
	The user function is started as a thread executes in parallel with the main part of the program. The OS achieves this by assigning it to a different processor if it exists, or using the waiting times in the main program.

	Before closing, a program must wait for the termination of all the threads it has launched; see ##[[KeyPgThreadWait Threadwait]]##.

	To avoid simultaneous access to shared resources from different threads, FreeBASIC implements mutexes, mutual exclusion locks that can be "owned" by a single thread when doing critical work. See ##[[KeyPgMutexCreate Mutexcreate]]##, ##[[KeyPgMutexLock Mutexlock]]##, ##[[KeyPgMutexUnlock Mutexunlock]]##, ##[[KeyPgMutexDestroy Mutexdestroy]]##.

	On some systems, the stack automatically grows beyond ##//stack_size//## if more space is needed; on others, this is the fixed maximum allowed. Behavior is undefined when more stack is used than the reserved size on systems where stacks are not able to grow.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/threads/threadcreate.bas"}}%%(freebasic)
Dim Shared terminate As Integer = 0

Sub mythread (param As Any Ptr)	
	
	dim as double t = timer
	While( 1 )
		
		Print "*";
		
		'' pause for .1 second
		while( abs( timer - t ) < .1 )
			sleep 1, 1
		wend
		t = timer
		
		If terminate=1 Then Exit Sub
	Wend
	
End Sub

Dim thread As Any Ptr
Dim b As Integer
dim as double t

Print "Main program prints dots"
Print "Thread prints asterisks"
thread = ThreadCreate( @mythread, 0 )
Print "Thread launched";

While b < 30
	
	Print ".";
	
	'' pause for .1 second
	while( abs( timer - t ) < .1 )
		sleep 1, 1
	wend
	t = timer
	
	b += 1
	
Wend

terminate=1
Print "Terminate launched";
ThreadWait (thread)
Print "Thread terminated"
Sleep
%%

{{fbdoc item="lang"}}
	- Threading is not allowed in ##-lang qb##

{{fbdoc item="target"}}
	- **Threadcreate** is not available with the DOS version / target of FreeBASIC, because multithreading is not supported by DOS kernel nor the used extender.
	- In Linux the threads are always started in the order they are created, this can't be assumed in Win32. It's an OS, not a FreeBASIC issue. 

{{fbdoc item="diff"}}
	- New to ""FreeBASIC""

{{fbdoc item="see"}}
	- ##[[KeyPgThreadWait Threadwait]]##
	- ##[[KeyPgMutexCreate Mutexcreate]]##
	- ##[[KeyPgMutexLock Mutexlock]]##
	- ##[[KeyPgMutexUnlock Mutexunlock]]##
	- ##[[KeyPgMutexDestroy Mutexdestroy]]##

{{fbdoc item="back" value="CatPgThreading|Threading Support Functions"}}