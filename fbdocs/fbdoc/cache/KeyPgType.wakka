{{fbdoc item="title" value="TYPE"}}----
Declares a user-defined type

{{fbdoc item="syntax"}}##
	**Type** //typename// [ [[KeyPgField Field]] = //alignment// ]
		[ [[KeyPgVisPrivate Private]]: ]
		[ [[KeyPgVisPublic Public]]: ]
		[ [[KeyPgVisProtected Protected]]: ]
		[[KeyPgDeclare declare]] [[KeyPgConstructor constructor]] [ ( [ //parameters// ] ) ]
		[[KeyPgDeclare declare]] [[KeyPgDestructor destructor]]  [ () ]
		[[KeyPgDeclare declare]] [ [[KeyPgStaticMember Static]] ] [[KeyPgMemberSub sub]] //fieldname// [//calling convention specifier//] [ [[KeyPgAlias alias]] //external_name// ] [ ( [ //parameters// ] ) ] [ [[KeyPgStatic Static]] ]
		[[KeyPgDeclare declare]] [ [[KeyPgStaticMember Static]] ] [[KeyPgMemberFunction function]] //fieldname// [//calling convention specifier//] [ [[KeyPgAlias alias]] //external_name// ] [ ( [ //parameters// ] ) ] [ [[KeyPgAs as]] [[DataType datatype]] ] [ [[KeyPgStatic Static]] ]
		//fieldname// [ ( //array subscripts// ) | : //bits// ] [[KeyPgAs as]] //[[DataType DataType]]//
		[[KeyPgAs as]] [[DataType DataType]] //fieldname// [ ( //array subscripts// ) | : //bits// ], ...
		[[KeyPgDeclare declare]] [[KeyPgOperator operator]] //operatorname//[ ( [ //parameters// ] ) ]
		[[KeyPgDeclare declare]] [[KeyPgProperty property]] //fieldname//[ ( [ //parameters// ] ) ] [ [[KeyPgAs as]] [[DataType datatype]] ]
		...
	**End Type**
##
{{fbdoc item="param"}}
	##//alignment//##
		specifies the byte alignment for data fields
	##//fieldname//##
		name of the data field or member procedure
	##//external_name//##
		name of field as seen when externally linked
	##//parameters//##
		the parameters to be passed to a member procedure
	##//array subscripts//##
		subscripts to declare a fixed-length array
	##//bits//##
		number of bits a data field occupies
	##//operatorname//##
		the name of the operator to be overloaded
	##//calling convention specifier//##
		can be ##[[KeyPgCdecl Cdecl]]##, ##[[KeyPgStdcall Stdcall]]## or ##[[KeyPgPascal Pascal]]##.

{{fbdoc item="desc"}}
	##**Type**## is used to declare custom data types containing one or more bit, scalar, array or other ##**Type**## fields.

	Types support member functions including ##[[KeyPgConstructor Constructor]]##, ##[[KeyPgDestructor Destructor]]##, ##[[KeyPgMemberFunction Function]]##, ##[[KeyPgOperator Operator]]##, ##[[KeyPgProperty Property]]## and ##[[KeyPgMemberSub Sub]]##.

	Fields default to ##[[KeyPgVisPublic Public:]]## member access unless, ##[[KeyPgVisPrivate Private:]]## or ##[[KeyPgVisProtected Protected:]]## is specified.

	An anonymous ##[[KeyPgUnion Union]]## can be nested in a ##**Type**## declaration.

	The optional ##[[KeyPgField Field]]=//number//## when given will change the default field alignment. ##[[KeyPgField Field]]=1## will disable any alignment, making the ##**Type**## contiguous in memory. 

	##**Type**## can be used to return a temporary type variable.  See ##[[KeyPgTypeTemp Type()]]##.

	##**Type**## can be used to declare a type definition ( i.e. an alias or alternative name ) for an already declared or yet to be declared type.  See ##[[KeyPgTypeAlias Type (Alias)]]##

{{fbdoc item="ex"}}
This is an example of a QB-style type, not including procedure definitions
{{fbdoc item="filename" value="examples/manual/udt/type1.bas"}}%%(freebasic)
TYPE clr
	red AS UBYTE
	green AS UBYTE
	blue AS UBYTE
END TYPE

DIM c AS clr
c.red = 255
c.green = 128
c.blue = 64
%%

And this is an example of a type working as an object
{{fbdoc item="filename" value="examples/manual/udt/type2.bas"}}%%(freebasic)
Type bar
  Declare Constructor()
  Declare Destructor()
  Declare Property x() As Integer
  Declare Property x(Byval n As Integer)
  Declare Sub Mul5()
  Declare Function Addr() As Integer Ptr
Private:
  p_x As Integer Ptr
End Type
%%

{{fbdoc item="target"}}
	- The default field alignment is 4 bytes for DOS and Linux targets.
	- The default field alignment is 8 bytes for Windows targets.
	- Special care must be taken when using a user defined type for file I/O.  It is recommended to use ##Field = 1## for such cases, as it saves space and is more cross platform compatible.

{{fbdoc item="lang"}}
	- Object-related features such as functions declared inside ##**Type**## blocks are supported only with the //[[ProPgCompOptlang -lang fb]]// dialect since version 0.17b
	- In the //[[ProPgCompOptlang -lang fb]]// and //[[ProPgCompOptlang -lang deprecated]]// dialects, the default field alignment depends on the target platform.
	- With the //[[ProPgCompOptlang -lang qb]]// dialect the fields are aligned to byte boundaries by default, unless otherwise specified.
	- To force byte alignment use ##FIELD=1##.

{{fbdoc item="diff"}}
	- None, in the //[[ProPgCompOptlang -lang qb]]// dialect.

{{fbdoc item="see"}}
	- ##[[KeyPgUnion Union]]##
	- ##[[KeyPgEnum Enum]]##
	- ##[[KeyPgOffsetof OffsetOf]]##
	- ##[[KeyPgTypeTemp Type (Temporary)]]##
	- ##[[KeyPgTypeAlias Type (Alias)]]##
	- ##[[KeyPgTypeof Typeof]]##
	- ##[[KeyPgField Field]]##

{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}