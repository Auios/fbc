{{fbdoc item="title" value="TYPE"}}
----
{{fbdoc item="syntax"}}
	TYPE //typename// [FIELD=//number//]
		[PRIVATE:]
		[PUBLIC:]
		DECLARE CONSTRUCTOR identifier [([parameter_list])]
		DECLARE DESTRUCTOR identifier [()]
		DECLARE SUB identifier [Alias external_identifier] [([parameter_list])]
		DECLARE FUNCTION identifier [Alias external_identifier] [([parameter_list])] [As return_type]
		//fieldname// [( //static array dimensions// ) | : //bits//] AS //[[DataType DataType]]//
		...
	END TYPE

	Or

	TYPE //typename// [FIELD=//number//]
		AS [[DataType DataType]] //fieldname// [( //static array dimensions// ) | : //bits//], ...
	END TYPE
	
	Or 
	TYPE //newtypename//  as //oldtypename//

{{fbdoc item="desc"}}
	TYPE is used to define custom data types containing one or more bit, scalar, array or other TYPE fields.

	TYPE's may contain constructors, a destructor, and member FUNCTIONs and SUBs. For more information on how to use these features, see [[TutBeginnersGuideToTypesAsObjects The Beginners Guide To Types As Objects]]

	Anonymous [[KeyPgUnion UNION]]s can be also nested in TYPEs.

	The optional FIELD=//number// when given will change the default field alignment. FIELD=1 will disable any alignment, making the TYPE contiguous in memory. 


{{fbdoc item="ex"}}
%%(qbasic)
TYPE clr
	red AS UBYTE
	green AS UBYTE
	blue AS UBYTE
END TYPE

DIM c AS clr
c.red = 255
c.green = 128
c.blue = 64
%%

	The third syntax allows to create a new type name with the properties of a previously existant type. 
%%(qbasic)
TYPE BOOLEAN as integer
%%

	


{{fbdoc item="diff"}}
	- None, if the compiler switch "-lang qb" is used.

{{fbdoc item="see"}}
	- [[KeyPgUnion UNION...END UNION]]
	- [[KeyPgOffsetof OFFSETOF]]
	- [[KeyPgTypeTemp TYPE()]]
	- [[KeyPgTypeDef TYPE AS]]
	- [[KeyPgField FIELD]]

{{fbdoc item="back" value="CatPgUserDefTypes|User Defined Types"}}