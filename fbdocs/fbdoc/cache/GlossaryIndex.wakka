{{fbdoc item="title" value="Glossary"}}----
Brief definitions and explantions for words and phrases used in the FreeBASIC manual.

**any pointer**
	A variable or expression that points to a memory address where it is not known, at least from the compiler's point of view, what type of data is stored at that address.  In C this would be the same as a void pointer or (void *).  See ##[[KeyPgPtr ptr]]##.

**archive**

**argument**
	In computing jargon an argument is one of the pieces of data passed to a procedure. Another name is parameter.

**array**
	A series of data items all having the same size and structure in a single block of memory that can be accessed by an index number.

**assignment**
	Asignment is one of the fundamental operations of computing.  All it means is copying a value into the memory location pointed at by a variable.  The value might be a literal, another variable, or the result of some expression.

**byref**
	##[[KeyPgByref Byref]]## specifies a method for passing parameters to procedures by reference.  Parameters passed in this way can be modified by the procedure and the results used by the caller.

**byval**
	##[[KeyPgByref Byval]]## specifies a method for passing parameters to procedures by value.  A copy of the parameter is made before it is passed to the procedure.

**binaries**

**cast**

**compiler**

**compiler directives**
	These are instructions included in the text of the program that affect the way the compiler behaves.  For instance the compiler might be directed to include one section of code or another of depending on the target operating system.

**constant**

**CVS**
	Concurrent Versions System. The file manager implemented at Sourceforge where the sources of FB are stored, it keeps an history of the changes introduced by the developers.  All the users can browse and download sources  [[http://fbc.cvs.sourceforge.net/fbc/FreeBASIC/ here]]

**declaration**
	A source code statement that introduces a symbol, constant, variable, procedure, data type, or similar, to the compiler but not necessarily allocate any space for it.  See ##[[KeyPgDeclare Declare]]##, ##[[KeyPgExtern Extern]]##, ##[[KeyPgType Type]]##.

**definition**
	A source code statement (or statements) that allocates space for data or code.  For example, ##[[KeyPgSub Sub]]## defines a procedure by allocating space for the program code it will contain.  Some statements can be both a declaration and a definition.  For example, ##[[KeyPgDim Dim]]## both declares and defines a variable.

**executable**

**exit sub/function**
	When called inside a procedure, leaves the procedure and returns control to the calling program.

**expression**

**field**

**function**

**get/put buffer**

**gfx primitive**

**header**

**image buffer**

**include file**

**library**
	Compiled code stored in a single file that can be used when making other programs.  A library typically has one or more headers (or include files) to provide all the needed declarations for using the library.

**member function**

**method**

**module**

**non-static member function**

**object code**

**operand**
	One of the arguments to an operator.  For example in ##a = b + c##, a,b, and c are operands.  + and = are operators.

**operator**
	A function taking one or more operands (arguments) and returning a value.  Operators can work on built-in data types, or can be overloaded to work on user defined types.  See [[CatPgOperators Operators]].

**overload**

**parameter**

**pointer**

**ragged array**
	A ragged array is an array having rows of differing lengths.

**real number**
	Any positive or negative number including fractions.  Variables containing a real number have a limited range and precision depending on the number of bits used to represent the number.  See: ##[[KeyPgSingle Single]]## and ##[[KeyPgDouble Double]]##.

**source code**

**static member function**

**parameter passing convention**

**procedure**
	A generic name for any block of code that can be called from somewhere else in a program.  For example see ##[[KeyPgSub Sub]]##, ##[[KeyPgFunction Function]]##.

**property**

**sub**
	A proecedure defined using ##[[KeyPgSub Sub]]##, optionally taking parameters and not returning a value.

**symbol**

**user defined data type**
	A ##[[KeyPgType Type]]##, ##[[KeyPgUnion Union]]##, ##[[KeyPgEnum Enum]]##, or ##[[KeyPgClass Class]]## data type.

**variable**

**vector**
	A series of data items in memory that can be accessed by an index number.  Similar to an array except that vector elements are not necessarily all contained within a single block of memory.

**wiki**
	Typically used to refer to the FreeBASIC online documentation.


{{fbdoc item="back" value="DocToc|Table of Contents"}}