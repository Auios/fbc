{{fbdoc item="title" value="OR"}}----
Operator that finds the bitwise ##**Or**## (disjunction) of two integers.

{{fbdoc item="syntax"}}##
	//number1// **Or** //number2//
##
{{fbdoc item="usage"}}##
	//result// = //number1// **Or** //number2//
##
{{fbdoc item="desc"}}
	Or, at its most primitive level, is a boolean operation, a logic function that takes in two bits and outputs a resulting bit. 

	If given two bits, this function returns true if either bit is true, and false if both bits are false. The truth table below demonstrates all combinations of a boolean or operation:

##%%(qbasic)
Bit1     Bit2    Result
 0         0        0
 1         0        1
 0         1        1
 1         1        1
%%##
	This holds true for conditional expressions in FreeBasic.  When using ##**Or**## encased in an If block, While loop, or Do loop, the output will behave quite literally:
##%%(qbasic)If condition1 Or condition2 Then expression1%%##
	Is translated as:
##%%(qbasic)If condition1 is true, or condition2 is true, then perform expression1%%##
	When given two expressions, numbers, or variables that return a number that is more than a single bit, ##**Or**## is performed "bitwise". A 		bitwise operation compares each bit of one number, with each bit of another number, performing a logic operation for every bit.
	The boolean math expression below describes this:
##%%(qbasic)
00001111 Or
00011110 
--------  equals
00011111
%%##
	Notice how in the resulting number of the operation, reflects an ##**Or**## operation performed on each bit of the top operand, with each corresponding bit of the bottom operand.  The same logic is also used when working with conditions. ##**Or**##, when used bitwise, is mostly performed with positive integers, such as ##[[KeyPgUinteger UInteger]]##, ##[[KeyPgUbyte UByte]]##, or ##[[KeyPgUlongint ULongInt]]##. It can, however, be used with any numerical type.

{{fbdoc item="ex"}}
%%(qbasic)
' Using the OR operator on two numeric values
DIM AS UBYTE numeric_value1, numeric_value2
numeric_value1 = 15 '00001111
numeric_value2 = 30 '00011110

'Result =  31  =     00011111       
PRINT numeric_value1 OR numeric_value2
SLEEP
%%

%%(qbasic)
' Using the OR operator on two conditional expressions
Dim As UByte numeric_value
numeric_value = 10

IF numeric_value = 5 OR numeric_value = 10 Then Print "Numeric_Value equals 5 or 10"
SLEEP

' This will output "Numeric_Value equals 5 or 10" because
' while the first condition of the first IF statement is false, the second is true
%%

{{fbdoc item="diff"}}
	- None

{{fbdoc item="see"}}
	- [[CatPgOpLogical Logical Operators]]
	- [[TblTruth Operator Truth Tables]]

{{fbdoc item="back" value="CatPgOperators|Operators"}}