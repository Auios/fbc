{{fbdoc item="title" value="RND"}}----
Returns a random [[KeyPgDouble double]] precision number in the range ##[0, 1)##

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Rnd** ( [[KeyPgByval byval]] //number// [[KeyPgAs as]] [[KeyPgSingle single]] = 1.0 ) [[KeyPgAs as]] [[KeyPgDouble double]]
##
{{fbdoc item="usage"}}##
	//result// = **Rnd** ( //number// )
##
{{fbdoc item="param"}}
	##//number//##
		Optional ##[[KeyPgInteger integer]]## argument. If ##//number//## has a value of 0, the last random number generated is repeated, for any other number a new random number is returned. With the QB-compatible algorithm, a negative number fully reseeds the generator.  The default for no argument is to return a new random number.

{{fbdoc item="ret"}}
	Returns the random number generated.

{{fbdoc item="desc"}}
	Returns a number of type ##[[KeyPgDouble double]]## in the range ##[0, 1)## (i.e. ##0 <= **Rnd** < 1##), based on a random seed (see ##[[KeyPgRandomize Randomize]]##).

	##**Rnd**## can use a variety of different algorithms - see ##[[KeyPgRandomize Randomize]]## for details of the default and selectable algorithms.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/math/rnd.bas"}}%%(freebasic)
'' Returns a random number in the range [first, last), or {first <= x < last}.
declare function rnd_range (first as double, last as double) as double

'::
randomize timer

'' prints a random number in the range [0, 1), or {0 <= x < 1}.
print rnd

'' prints a random number in the range [0, 10), or  {0 <= x < 10}.
print rnd * 10

'' prints a random integral number in the range [1, 11), or  {1 <= x < 11}.
print int(rnd * 10) + 1

'' prints a random integral number in the range [69, 421), or {69 <= x < 421}
print int(rnd_range(69, 421))

'::
function rnd_range (first as double, last as double) as double
	function = rnd * (last - first) + first
end function
%%

{{fbdoc item="lang"}}
	The default algorithm used depends on the current dialect in use:
		- With the //[[ProPgCompOptlang -lang fb]]// dialect, a 32 bit Mersenne Twister function with a granularity of 32 bits is used.
		- With the //[[ProPgCompOptlang -lang qb]]// dialect, a function giving the same output as ##**Rnd**## in QB is used. The granularity is 24 bits.
		- With the //[[ProPgCompOptlang -lang deprecated]]// dialect, the function in the C runtime available in the system is used. The function available in Win32 has a granularity of 15 bits, and 32 bits in Linux and DOS.
		- ##[[KeyPgRandomize Randomize]]## accepts an additional parameter, allowing to select the algorithm used in ##**Rnd**##.

{{fbdoc item="diff"}}
	- None, if compiled in the //[[ProPgCompOptlang -lang qb]]// dialect.
	- For the non-QB-compatible algorithms, if the optional argument is less than 0, it has the same meaning as passing an argument of 1.

{{fbdoc item="see"}}
	- ##[[KeyPgRandomize Randomize]]##

{{fbdoc item="back" value="CatPgMath|Math"}}