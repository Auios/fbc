{{fbdoc item="title" value="COMMAND$"}}
----
Returns command line parameters used to call the program.

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Command** ( [[KeyPgByval byval]] //index// [[KeyPgAs as]] [[KeyPgInteger integer]] = -1 ) [[KeyPgAs as]] [[KeyPgStringtype string]]
##

{{fbdoc item="usage"}}##
	//args// = COMMAND$
	//args// = COMMAND$( //index// )
##
{{fbdoc item="param"}}
	##//index//##
		Optional ##[[KeyPgInteger integer]]## argument specifying the index of the command line parameter to return.
{{fbdoc item="ret"}}
	##//args//##
	    A ##[[KeyPgStringtype string]]## to be set to the command line parameter.

{{fbdoc item="desc"}}
	If the ##//index//## argument is omitted, COMMAND$ returns the full string of parameters (excluding the name of the executable).

	If used with an ##//Index//## number, ##//Index 0//## returns the name of the executable; ##//Index 1//## and greater return each argument from the command line.  If ##//Index//## is greater than the number of arguments on the command line, a null string is returned.

	When the command line is parsed for arguments, everthing between double quotes in the parameter list will be considered as a single parameter, and is returned with the double quotes.

{{fbdoc item="ex"}}
%%(qbasic)
''
'' command-line arguments example
''

 	print "exe name= "; command$( 0 )

 	dim argc as integer, argv as string

 	argc = 1
 	do
 		argv = command$( argc )

 		if( len( argv ) = 0 ) then
 			exit do
 		end if

 		print "arg"; argc; " = """; argv; """"

 		argc += 1
 	loop

 	if( argc = 1 ) then
 		print "(no arguments)"
 	end if
 	print "The complete list: ";command$

	sleep
%%

{{fbdoc item="diff"}}
	- The numeric argument was not supported in QB.
	- QB converted  the parameter list to uppercase before returning it.

{{fbdoc item="see"}}
	- ##[[KeyPgExec Exec]]##

{{fbdoc item="back" value="CatPgOpsys|Operating System Functions"}} {{fbdoc item="back" value="CatPgFullIndex|Alphabetical Keywords List"}}