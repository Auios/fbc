{{fbdoc item="title" value="Pointers to Procedures"}}----
Pointers that point to procedures

	Just as pointers can be made to point to an ##[[KeyPgInteger Integer]]## or ##[[KeyPgSingle Single]]## type, pointers can also point to procedures, that is, they can store the address of a procedure.

{{fbdoc item="section" value="Declaration"}}
	To declare a pointer to procedure, use the ##[[KeyPgSub Sub]]## or ##[[KeyPgFunction Function]]## keywords, followed by any parameters and return value type:

%%(qbasic)
' declares a pointer to sub procedure that takes no arguments
dim pointerToProcedure as sub
%%
	Procedure pointers store procedure addresses, which are retrieved using ##[[KeyPgOpAt Operator @]]## (Address of) or the ##[[KeyPgOpProcptr ProcPtr operator]]##:

%%(qbasic)
function Add (a as integer, b as integer) as integer
	return a + b
end function

dim pFunc as function (as integer, as integer) as integer = @Add
%%

{{fbdoc item="section" value="Calling a procedure pointer"}}
	The interesting thing about procedure pointers is that they can be called just like a procedure:

%%(qbasic)
' .. Add and pFunc as before ..

print "3 + 4 = " & pFunc(3, 4)
%%

{{fbdoc item="section" value="Passing procedure pointers to procedures"}}
	Passing procedure pointers to other procedures is similar as well:

%%(qbasic)
' .. Add and pFunc as before ..

function DoOperation (a as integer, b as integer, operation as function (as integer, as integer) as integer) as integer
	return operation(a, b)
end function

print "3 + 4 = " & DoOperation(3, 4, @Add)
%%
	Because procedure pointer declarations can be lengthy, it often helps to create a type alias for the procedure pointer, in an effort to make clearer code:

%%(qbasic)
' .. Add and pFunc as before ..

type operation as function (as integer, as integer) as integer

function DoOperation (a as integer, b as integer, op as operation) as integer
	return op(a, b)
end function

print "3 + 4 = " & DoOperation(3, 4, @Add)
%%

{{fbdoc item="section" value="Pointers to procedure pointers"}}
	Because the syntax of a procedure pointer does not allow declaration of a pointer to procedure pointer, a type alias is used. Notice how it is necessary to surround a dereferenced pointer to procedure pointer by parenthesis when calling the procedure. This is because the function-call operator '()' has higher precedence than ##[[KeyPgOpValueOf Operator *]]## (Value of):

%%(qbasic)
sub Halve (byref i as integer)
	i /= 2
end sub

sub Triple (byref i as integer)
	i *= 3
end sub

type operation as sub (byref as integer)

' an array of procedure pointers, NULL indicates the
' end of the array
dim operations(20) as operation = _
{ @Halve, @Triple, 0 }

dim i as integer = 280

' apply all of the operations to a variable by iterating through the array
' with a pointer to procedure pointer
dim op as operation ptr = @operations(0)
while (0 <> *op)
	' call the procedure that is pointed to, note the extra parenthesis
	(*op)(i)
	op += 1
wend

print "Value of 'i' after all operations performed: " & i
%%

{fbdoc item="see"}}
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgPointer Pointer]]##
	- ##[[KeyPgOpAt Operator * (Address of)]]##
	- ##[[KeyPgOpProcptr ProcPtr operator]]##

{{fbdoc item="back" value="CatPgProgrammer|Programmer's Guide"}}