{{fbdoc item="title" value="ALLOCATE"}}----
Allocates a certain number of bytes from the free store

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Allocate**( //count// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]]
##
{{fbdoc item="usage"}}##
	//result// = **Allocate**( //count// )
##
{{fbdoc item="param"}}
	##//count//##
		An integer specifying the number of bytes to be allocated.

{{fbdoc item="ret"}}
	The address of the newly allocated memory. A null (0) pointer is returned if the requested memory could not be allocated, or if ##//count//## < 0.

{{fbdoc item="desc"}}
	Attempts to allocate, or reserve, ##//count//## number of bytes from the free store (heap). The initial value of newly allocated memory is unspecified. The pointer that is returned is an [[KeyPgAny any]] [[KeyPgPtr ptr]] and points to the start of the allocated memory. This pointer is guaranteed to be unique, even if ##//count//## is zero.

	Allocated memory must be deallocated, or returned back to the free store, with ##[[KeyPgDeallocate Deallocate]]## when no longer needed.

~&##**Allocate**## is an alias for the C runtime library's ##**malloc**## function, which is not guaranteed to be thread safe in all platforms.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/memory/allocate.bas"}}%%(freebasic)
'' This program uses the ALLOCATE(...) function to create a buffer of 15 integers that is
'' then filled with the first 15 numbers of the Fibonacci Sequence, then output to the
'' screen. Note the call to DEALLOCATE(...) at the end of the program.

	const integerCount as integer = 15

	'' Try allocating memory for a number of integers.
	''
	dim buffer as integer ptr
	buffer = allocate(integerCount * sizeof(integer))

	if (0 = buffer) then
		print "Error: unable to allocate memory, quitting."
		end -1
	end if

	'' Prime and fill the memory with the fibonacci sequence.
	''
	buffer[0] = 0
	buffer[1] = 1
	for i as integer = 2 to integerCount - 1
		buffer[i] = buffer[i - 1] + buffer[i - 2]
	next

	'' Display the sequence.
	''
	for i as integer = 0 to integerCount - 1
		print buffer[i] ;
	next

	deallocate(buffer)
	end 0
%%
	Output is:
	<<## 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377##>>
	::c::

	It is important to free allocated memory if it's not going to be used anymore. Unused memory that isn't freed is simply wasting memory, and if the address of that memory is somehow overwritten or forgotten, that memory can never be freed (this condition is known as a memory leak, and should be avoided at all costs). The following example demonstrates a function with a memory leak, where the address of allocated memory is lost, never to be freed (if this function is called frequently, the memory that is wasted can add up quickly).

{{fbdoc item="filename" value="examples/manual/memory/allocate2.bas"}}%%(freebasic)
sub AllocateExample2()
   dim p as byte ptr = 0

   p = allocate(420)               '' assign pointer to new memory

   p = allocate(420)               '' reassign pointer to different memory,
	                               '' old address is lost and that memory is leaked
   deallocate(p)
end sub

   AllocateExample2()
   end 0
%%

{{fbdoc item="lang"}}
	- Not available in the //[[ProPgCompOptlang -lang qb]]// dialect.

{{fbdoc item="diff"}}
	- New to FreeBasic

{{fbdoc item="see"}}
	- ##[[KeyPgReallocate Reallocate]]##
	- ##[[KeyPgDeallocate Deallocate]]##

{{fbdoc item="back" value="CatPgMemory|Memory Functions"}}