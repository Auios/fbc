{{fbdoc item="title" value="Operator Let (Assign)"}}----
Indicates the assignment operator when overloading [[KeyPgOpAssignment Operator = (Assignement]]

{{fbdoc item="syntax"}}##
	{ [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] | [[KeyPgEnum Enum]] } //typename//
		[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Let** ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //rhs// [[KeyPgAs as]] [[DataType datatype]] )
	End { [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] }

	[[KeyPgOperator operator]] //typename//.**Let** ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //rhs// [[KeyPgAs as]] [[DataType datatype]] )
##
{{fbdoc item="usage"}}##
	//lhs// **=** //rhs//
##
{{fbdoc item="param"}}
	##//typename//## 
		name of the ##[[KeyPgType Type]]##, ##[[KeyPgClass Class]]##, ##[[KeyPgUnion Union]]##, or ##[[KeyPgEnum Enum]]##
	##//lhs//##
		The variable to assign to.
	##//rhs//##
		The value to assign.

{{fbdoc item="desc"}}
	##**Let**## is used to overload the ##[[KeyPgOpAssignment Operator = (Assignment)]]## operator and to distinguish it from the comparison operator ##[[KeyPgOpEqual Operator = (Equal)]]##.

	##//lhs// **=** //rhs//## will assign the ##//rhs//## to ##//lhs//## by invoking the **Let** operator procedure defined int ##//typename//##.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/operator/let.bas"}}%%(freebasic)
type T
  x as integer
  y as integer
  declare operator let( byref rhs as T )
end type

operator T.let( byref rhs as T )
  x = rhs.x
  y = rhs.y
end operator

dim a as T = ( 5, 7 )
dim b as T

'' Do the assinment invoking the LET
'' operator procedure
b = a

print "a.x = "; a.x
print "a.y = "; a.y
print
print "b.x = "; b.x
print "b.y = "; b.y
%%
Output:
%%
a.x =  5
a.y =  7

b.x =  5
b.y =  7
%%

{{fbdoc item="lang"}}
	- In the //[[ProPgCompOptlang -lang qb]]// dialect, this operator cannot be overloaded.
	- In the //[[ProPgCompOptlang -lang qb]]// dialect, an assignment expression can be preceded by the ##[[KeyPgLet Let]]## keyword.

{{fbdoc item="diff"}}
	- None

{{fbdoc item="see"}}
	- ##[[KeyPgLet Let]]##
	- ##[[KeyPgOpEqual Operator Let() (Assignment)]]##
	- ##[[KeyPgOpEqual Operator = (Assignment)]]##
	- ##[[KeyPgOpEqual Operator = (Equal)]]##

{{fbdoc item="back" value="CatPgOpAssignment|Assignment Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}