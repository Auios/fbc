{{fbdoc item="title" value="BYVAL"}}
----
Declaration specifier to explicitly pass a parameter by value

{{fbdoc item="syntax"}}##
	**Byval** //param1// [[KeyPgAs as]] [[DataType DataType]]
##
{{fbdoc item="usage"}}##
	[ [[KeyPgDeclare declare]] ] [[KeyPgSub sub]] | [[KeyPgFunction function]] //Name// ( **Byval** //param1// [[KeyPgAs as]] [[DataType DataType]]  )
##
{{fbdoc item="desc"}}
	##**Byval**## in a parameter list of a declare statement causes a copy of the variable to be passed to the procedure (either sub or function) by its value rather than the usual way by sending the address to the value.

	This means that if you pass say the value of the variable 'x' then x cannot be modified in anyway, where as if you send the address the procedure could modify the value of 'x' to anything.

	For string arguments, ##**Byval**## has a special meaning: it passes a pointer to the string, while BYREF passes the Basic string descriptor. This behavior allows passing a ##[[KeyPgStringtype String]]## to C procedures. The string passed this way should not be changed by the calling ##[[KeyPgSub Sub]]##/##[[KeyPgFunction Function]]##, as the string descriptor would not be updated. Passing ##[[KeyPgStringtype String]]## ##**Byval**## should be avoided,  ##[[KeyPgZstring Zstring]]## is more suited for this purpose.

	Opposite of ##[[KeyPgByref Byref]]##.

{{fbdoc item="ex"}}
%%(qbasic)
Sub MySub(byval value as integer)
	value += 1
End Sub

Dim MyVar As Integer

MyVar = 1
Print "MyVar: "; MyVar 'output = 1
MySub MyVar
Print "MyVar: "; MyVar 'output = 1, because byval won't change the values passed into it globally.
Sleep
End
%%

{{fbdoc item="diff"}}
	- 

{{fbdoc item="see"}}
	- ##[[KeyPgDeclare Declare]]##
	- ##[[KeyPgByref Byref]]##

{{fbdoc item="back" value="CatPgClause|CLAUSE"}}