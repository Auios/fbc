{{fbdoc item="title" value="PUT (File I/O)"}}----
Writes data from a buffer to a file

{{fbdoc item="syntax"}}##
	**Put** #//filenum// [[KeyPgAs As]] [[KeyPgInteger integer]], [//position// [[KeyPgAs As]] [[KeyPgLongint longint]]], //data// [[KeyPgAs As]] [[KeyPgAny Any]] [, //amount// [[KeyPgAs As]] [[KeyPgInteger Integer]]]
	**Put** #//filenum// [[KeyPgAs As]] [[KeyPgInteger Integer]], [//position// [[KeyPgAs As]] [[KeyPgLongint longint]]], //data()// [[KeyPgAs As]] [[KeyPgAny Any]]
##
{{fbdoc item="usage"}}##
	**Put** #//filenum//, //position//, //data// [, //amount//]
##
{{fbdoc item="param"}}
	##//filenum//##
		The value passed to ##[[KeyPgOpen Open]]## when the file was opened.
	##//position//##
		Is the position where ##Put## must start in the file. If the file was opened ##For Random##, the position is in records, else it is given in bytes. If omitted, writing starts at the present file pointer position. The number for the first byte in the file is 1.
	##//data//##
		Is the buffer where data is written from. It can be a numeric variable, a string, an array or a user-defined type. The operation will try to transfer to disk the complete variable, unless ##//amount//## is given.  When putting arrays, ##//data//## should be followed by an empty pair of brackets: "()".  Put will write all of the data in the array.  ##//amount//## is not allowed.
	##//amount//##
		Makes ##Put## write to file ##//amount// * [[KeyPgSizeof Sizeof]](//buffer_datatype//)## bytes of data.  If ##//amount//## is omitted, ##Put## just writes a single variable.

{{fbdoc item="ret"}}
	0 on success; nonzero on error.

{{fbdoc item="desc"}}
	Writes binary data from a buffer variable to a file.

	##**Put**## can be used as a function, and will return 0 on success or an error code on failure.	

	For files opened in ##[[KeyPgRandom Random]]## mode, the size in bytes of the data to write must match the specified record size.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/fileio/put.bas"}}%%(freebasic)
' Create a integer variable
Dim buffer As Integer, f as integer

' Find the first free file file number.
f = Freefile

' Open the file "file.ext" for binary usage, using the file number "f".
Open "file.ext" For Binary As #f
  buffer=10
  ' Write 4 bytes from the buffer into the file, using file number "f"
  ' starting at the beginning of the file (1).
  Put #f, 1, buffer

' Close the file.  
Close #f

' End the program.
End
%%

{{fbdoc item="filename" value="examples/manual/fileio/put-array.bas"}}%%(freebasic)
' Create an integer array
Dim buffer(1 To 10) As Integer
Dim i As Integer
For i = 1 To 10
	buffer(i) = i
Next

' Find the first free file file number.
Dim f As Integer
f = Freefile

' Open the file "file.ext" for binary usage, using the file number "f".
Open "file.ext" For Binary As #f
' Write the array into the file, using file number "f"
' starting at the beginning of the file (1).
Put #f, 1, buffer()

' Close the file.
Close #f

' End the program.
End
%%

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/fileio/put-buffer.bas"}}%%(freebasic)
Dim As Byte Ptr lpBuffer
Dim As Integer hFile, Counter, Size

Size=256

lpBuffer=Allocate(Size)
For Counter=0 to Size-1
  lpBuffer[Counter]=(Counter and &HFF)
Next

' Get free file file number.
hFile = Freefile()

' Open the file "test.bin" in binary writing mode.
Open "test.bin" For Binary Access Write As #hFile
  ' Write 256 bytes from the memory pointened by lpBuffer.
  Put #hFile, , lpBuffer[0],Size
' Close the file.  
Close #hFile
' Free the allocated memory.
Deallocate lpBuffer
' End the program.
End
%%
{{fbdoc item="diff"}}
	- PUT can write full arrays as in VB or, alternatively, write a multiple of the data size from //buffer//'s memory location.
	- PUT can now be used as a function.

{{fbdoc item="see"}}
	- ##[[KeyPgOpen Open]]##
	- ##[[KeyPgClose Close]]##
	- ##[[KeyPgGetfileio Get (File I/O)]]##
	- ##[[KeyPgFreefile Freefile]]##

{{fbdoc item="back" value="CatPgFile|File I/O Functions"}}