{{fbdoc item="title" value="Arrays"}}----
Multi-dimensional container types

{{fbdoc item="desc"}}
	Arrays are [[DtVariables Variables]] which hold one or more values, or elements. You can think of them as a heterogenous container, that is, a container that can hold a number of elements of a single type.

	FreeBASIC arrays can be multi-dimensional; they can be used to represent, for example, a line of elements (1 dimension), a grid of elements (2 dimensions), a cube of elements (3 dimensions) and more (a 4-dimensional array could perhaps be modelled by a line of cubes). The number of dimensions an array has is determined where it is declared or defined, and like all FreeBASIC variables, arrays must be declared or defined before they're used.

	- See ##[[KeyPgExtern Extern]]## for declaring arrays
	- See ##[[KeyPgDim Dim]]## and ##[[KeyPgRedim Redim]]## for defining arrays

	Arrays come in two flavors: static and dynamic. Static arrays are allocated at compile-time, on the stack, while dynamic (non-static) arrays are allocated at run-time, on the free store (the heap). FreeBASIC reserves a limited amount of stack space by default (1,024 KB), which may not be enough memory if you have many large static arrays. Dynamic arrays, on the other hand, have the entire free store available to them, and so can potentially be much larger.

	Wherever an array's memory is located, it's always allocated in a single block. The elements of an array are stored contiguously in memory, that is, one after the other. More specifically, elements are stored in row-major order. So for multi-dimensional arrays, elements with the same highest dimension are next to one another. These elements can be accessed using array notation, or, because they're stored contiguously, pointer notation. !!!WRITEME a brief about the math involved in using pointer notation with multidimensional arrays? WRITEME!!!

	- See [[ProPgArrayIndex Array Indexing]] for accessing elements with array notation
	- See [[KeyPgPtrIndex Pointer Indexing]] for accessing elements with pointer notation

{{fbdoc item="see"}}
	- [[ProPgArrayIndex Array Index]]
	- [[ProPgVariableScope Variable Scope]]
	- [[KeyPgDim DIM]]
	- [[KeyPgRedim REDIM]]

{{fbdoc item="back" value="DocToc|Table of Contents"}}