{{fbdoc item="title" value="RETURN"}}----
Control flow statement to return from a procedure or Gosub

{{fbdoc item="syntax"}}##
	**Return** [ //return value// ]
##
{{fbdoc item="desc"}}
	##**Return**## is used to return control back to the statement immediately following a previous ##[[KeyPgGosub Gosub]]## call. When used in combination with ##[[KeyPgGosub Gosub]]##, no return value can be specified. 
	
	##**Return**## can also be used inside a ##[[KeyPgSub Sub]]## or ##[[KeyPgFunction Function]]## to exit the ##Sub## or ##[[KeyPgFunction Function]]##. In a ##Sub##, ##Return## cannot specify a return value.  In a ##Function##, ##Return## must specify its return value. It is equivalent to the ##Function = //return value// : [[KeyPgExit Exit]] Function## idiom.

	A ##[[KeyPgGosub Gosub]]## call must always have a matching ##**Return**## statement, to avoid stack corruption. Thus, it is often preferrable to use a ##[[KeyPgSub Sub]]## rather than ##[[KeyPgGosub Gosub]]##/##Return##.

	When compiling with the -lang qb switch, ##**Return**## can only be used to return from a ##[[KeyPgGosub Gosub]]##.

{{fbdoc item="ex"}}
%%(qbasic)'' Compile with -lang qb
print "Let's Gosub!"
gosub MyGosub
print "Back from Gosub!"
sleep
end

MyGosub:
print "In Gosub!"
return
%%

%%(qbasic)type rational_number                   '' simple rational number type
   numerator as integer
   denominator as integer
end type

type rational as rational_number       '' type alias for clearer code

'' multiplies two rational types (note: r1 remains unchanged due to the BYVAL option)
function rational_multiply( r1 as rational, r2 as rational ) as rational

   r1.numerator *= r2.numerator        '' multiply the divisors ...
   r1.denominator *= r2.denominator
   return r1                           '' ... and return the rational

end function

dim as rational r1 = ( 6, 105 )        '' define some rationals r1 and r2
dim as rational r2 = ( 70, 4 )
dim as rational r3

r3 = rational_multiply( r1, r2 )       '' multiply and store the result in r3

'' display the expression (using STR to eliminate leading space when printing numeric types)
print str( r1.numerator ) ; "/" ; str( r1.denominator ) ; " * " ;
print str( r2.numerator ) ; "/" ; str( r2.denominator ) ; " = " ;
print str( r3.numerator ) ; "/" ; str( r3.denominator )

sleep 
end 0
%%
{{fbdoc item="lang"}}
	- In //-lang qb// return can be used only to return from a [[KeyPgGosub GOSUB]]
	- In //-lang deprecated// and //-lang fb// RETURN cann be used only to set the return value of a function and exit it.

{{fbdoc item="diff"}}
	- None if using the //-lang qb// switch.
{{fbdoc item="see"}}
	- ##[[KeyPgSub Sub]]##
	- ##[[KeyPgFunction Function]]##
	- ##[[KeyPgGosub Gosub]]##

{{fbdoc item="back" value="CatPgControlFlow|Control Flow"}}