{{fbdoc item="title" value="SCREENEVENT"}}----
Graphics function to query for and retrieve system events.

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **""ScreenEvent""** ( [[KeyPgByval byval]] event [[KeyPgAs as]] [[KeyPgAny any]] [[KeyPgPtr ptr]] = 0 ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="param"}}
	##//event//##
		specifies the buffer where the function should store the event data

{{fbdoc item="desc"}}

	This function returns the latest available system event from the internal GfxLib events queue. By "event" we mean any mouse or keyboard activity for example.

	The event data if available will be copied into the buffer pointed to by the ##//event//## parameter; this buffer must currently be at least 5 integers long (20 bytes). The first integer will contain the event type ID, while the remaining 4 integers will hold sensitive data to the event type. The fbgfx.bi header file contains a definition of the ##EVENT## user datatype, whose memory layout is compatible with the event data returned by this function; this can be used to ease the interpretation of the event data. Here we report the ##EVENT## structure for clarity:
		
	%%(qbasic)type EVENT field = 1
	type as integer
	union
		type
			scancode as integer
			ascii as integer
		end type
		type
			x as integer
			y as integer
			dx as integer
			dy as integer
		end type
		button as integer
		z as integer
	end union
end type%%
		
	__Event types__
		The event type is identified by an ID number returned into the first integer of the ##//event//## buffer (the ##.type## field in the ##EVENT## structure). Known event type IDs are:

	- EVENT_KEY_PRESS (1) A key was pressed on the keyboard. The ##.scancode## field contains the platform indipendent scancode value for the key; if the key has an ascii representation, it is held into the ##.ascii## field, which otherwise has a value of 0.
	- EVENT_KEY_RELEASE (2) A key was released on the keyboard. The ##.scancode## and ##.ascii## fields have the same meaning as with the EVENT_KEY_PRESS event.
	- EVENT_KEY_REPEAT (3) A key is being held down repeatedly. The ##.scancode## and ##.ascii## fields have the same meaning as with the EVENT_KEY_PRESS event.
	- EVENT_MOUSE_MOVE (4) The mouse was moved while it was on the program window. The ##.x## and ##.y## fields contain the new mouse position relative to the upper-left corner of the screen, while the ##.dx## and ##.dy## fields contain the motion deltas.
	- EVENT_MOUSE_BUTTON_PRESS (5) One of the mouse buttons was pressed. The ##.button## field has one bit set identifying the button that was pressed; bit 0 identifies the left mouse button, bit 1 the right mouse button and bit 2 the middle mouse button.
	- EVENT_MOUSE_BUTTON_RELEASE (6) One of the mouse buttons was released. The ##.button## field has the same meaning as with the EVENT_MOUSE_BUTTON_PRESS event.
	- EVENT_MOUSE_DOUBLE_CLICK (7)  One of the mouse buttons was double clicked. The ##.button## field has the same meaning as with the EVENT_MOUSE_BUTTON_PRESS event.
	- EVENT_MOUSE_WHEEL (8) The mouse wheel was used; the new wheel position is returned into the ##.z## field.
	- EVENT_MOUSE_ENTER (9) The mouse was moved into the program window.
	- EVENT_MOUSE_EXIT (10) The mouse was moved out of the program window.
	- EVENT_WINDOW_GOT_FOCUS (11) The program window has got focus.
	- EVENT_WINDOW_LOST_FOCUS (12) The program window has lost focus.
	- EVENT_WINDOW_CLOSE (13) The user attempted to close the program window.

	__Querying for events__
		The function returns -1 if there are pending events to be retrieved, 0 otherwise. If the ##//event//## parameter is set to 0 (the default if omitted) ##[[KeyPgScreenevent ScreenEvent]]## will not be able to copy the event data and it will not dequeue it from the internal events queue. Calling the function this way can be useful to check if there are pending events without actually fetching them.

{{fbdoc item="ex"}}
%%(qbasic)'' include fbgfx.bi for some useful definitions
#include "fbgfx.bi"

using fb

dim e as EVENT

screenres 640, 480
do
	if (screenevent(@e)) then
		select case e.type
		case EVENT_KEY_PRESS
			if (e.scancode = SC_ESCAPE) then
				end
			end if
			if (e.ascii > 0) then
				print "'" & e.ascii & "'";
			else
				print "unknown key";
			end if
			print " was pressed (scancode " & e.scancode & ")"
		case EVENT_KEY_RELEASE
			if (e.ascii > 0) then
				print "'" & e.ascii & "'";
			else
				print "unknown key";
			end if
			print " was released (scancode " & e.scancode & ")"
		case EVENT_KEY_REPEAT
			if (e.ascii > 0) then
				print "'" & e.ascii & "'";
			else
				print "unknown key";
			end if
			print " is being repeated (scancode " & e.scancode & ")"
		case EVENT_MOUSE_MOVE
			print "mouse moved to " & e.x & "," & e.y & " (delta " & e.dx & "," & e.dy & ")"
		case EVENT_MOUSE_BUTTON_PRESS
			if (e.button = BUTTON_LEFT) then
				print "left";
			elseif (e.button = BUTTON_RIGHT) then
				print "right";
			else
				print "middle";
			end if
			print " button pressed"
		case EVENT_MOUSE_BUTTON_RELEASE
			if (e.button = BUTTON_LEFT) then
				print "left";
			elseif (e.button = BUTTON_RIGHT) then
				print "right";
			else
				print "middle";
			end if
			print " button released"
		Case EVENT_MOUSE_DOUBLE_CLICK
			If (e.button = BUTTON_LEFT) Then
				Print "left";
			Elseif (e.button = BUTTON_RIGHT) Then
				Print "right";
			Else
				Print "middle";
			End If
			Print " button double clicked"
		case EVENT_MOUSE_WHEEL
			print "mouse wheel moved to position " & e.z
		case EVENT_MOUSE_ENTER
			print "mouse moved into program window"
		case EVENT_MOUSE_EXIT
			print "mouse moved out of program window"
		case EVENT_WINDOW_GOT_FOCUS
			print "program window got focus"
		case EVENT_WINDOW_LOST_FOCUS
			print "program window lost focus"
		case EVENT_WINDOW_CLOSE
			end
		end select
	end if
loop%%

{{fbdoc item="diff"}}
	- New to FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgScreengraphics Screen (Graphics)]]##
	- ##[[KeyPgMultikey Multikey]]##
	- ##[[KeyPgGetmouse Getmouse]]##

{{fbdoc item="back" value="CatPgGfx|GFX Functions Index"}}