{{fbdoc item="title" value="Operator Step (Iteration)"}}----
Increments the iterator of a ##[[KeyPgFornext For...Next]]## loop

{{fbdoc item="syntax"}}##
	{ [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] } //typename//
		[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Step** ()
		[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **Step** ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //stp// [[KeyPgAs as]] //typename// )
		//...//
	End { [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] }
##
{{fbdoc item="usage"}}##
	[[KeyPgFornext For]] //iterator// [ As //typename// ] = //start_value// To //end_value// [ [[KeyPgFornext Step]] //step_value// ]
		[// ...statements... //]
	[[KeyPgFornext Next]]
##
{{fbdoc item="param"}}
	##//typename//##
		name of the ##[[KeyPgType Type]]##, ##[[KeyPgClass Class]]##, or ##[[KeyPgUnion Union]]##
	##//stp//##, ##//step_value//##
		a ##//typename//## object used as an incremental value
	##//iterator//##
		a ##//typename//## object used as an iterator
	##//end_value//##
		a ##//typename//## object used as a loop-terminating value
	##//start_value//##
		a ##//typename//## object used to copy construct or assign to the iterator initially

{{fbdoc item="desc"}}
	##[[KeyPgOpFor Operator For]]##, ##[[KeyPgOpNext Operator Next]]## and ##**Operator Step**## can be overloaded in user-defined type definitions to allow objects of that type to be used as iterators and step values in ##[[KeyPgFornext For...Next]]## loops.

	##**Operator Step**## is called to increment the iterator immediately after all statements in the ##[[KeyPgFornext For...Next]]## body are executed, if any.

	The first version of ##**Operator Step**## is used if no step value is given in the ##[[KeyPgFornext For...Next]]## statement. If a step value is given, the second version is used and is passed the step value.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/udt/step.bas"}}%%(freebasic)
'' Example Type
Type T
  '' value is set by the constructor
  value As Double
  Declare Constructor( ByVal x As Double = 0 )

  Declare Operator For( ByRef stp As T )
  Declare Operator Step( ByRef stp As T )
  Declare Operator Next( ByRef cond As T, ByRef stp As T ) As Integer
End Type

Constructor T ( ByVal x As Double )
  print "T iterator constructed with value " & x
  value = x
End Constructor

Operator T.for( ByRef stp As T )
End Operator

Operator T.step( ByRef stp As T )
  print " incremented by " & stp.value & " in step."
  value += stp.value
End Operator

Operator T.next( ByRef cond As T, ByRef stp As T ) As Integer
  '' iterator's moving from a high value to a low value (step >= 0)
  If( stp.value < 0 ) Then
	return( value >= cond.value )
  Else
  '' iterator's moving from a low value to a high value (step < 0)
	return( value <= cond.value )
  End If
End Operator

'' Example Usage. It looks like we are working with numbers, but the iterators
'' have overloaded constructors. The 10, 1, and -1 are all of type T.
For i As T = 10 To 1 Step -1
  Print i.value;
Next i
%%
A more practical example demonstrating file iteration based on [[http://www.freebasic.net/forum/viewtopic.php?p=83564 cha0s' file iteration class]].
{{fbdoc item="filename" value="examples/manual/udt/stepFileIteration.bas"}}%%(freebasic)
'' a class which iterates through files
type FileIter
	as string pathName, fileName
	declare constructor( byref pathName as string )

	declare operator for()
	declare operator step()
	declare operator next( byref endCond as FileIter) as integer
end type

Constructor FileIter( Byref pathName As String )   
	this.pathName = pathName
End Constructor

Operator FileIter.for( )   
	fileName = dir(pathName & "/*.*")   
End Operator

Operator FileIter.step( )   
	fileName = dir("")
End Operator

Operator FileIter.next( Byref endCond As FileIter ) As Integer
	Return(fileName <> endCond.pathName)   
	'' the c'tor sets the path name and so we check against that
End Operator

'' example code
'' change it to any directory
For i As FileIter = "./" To ""
	print i.fileName
Next
%%
{{fbdoc item="lang"}}
	- Only available in the //[[CompilerOptlang -lang fb]]// dialect.

{{fbdoc item="see"}}
	- ##[[KeyPgOpFor Operator For]]##
	- ##[[KeyPgOpNext Operator Next]]##
	- ##[[KeyPgFornext For...Next]]##

{{fbdoc item="back" value="CatPgOpIterating|Iterating Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}