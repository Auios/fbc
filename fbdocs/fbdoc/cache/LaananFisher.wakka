{{fbdoc item="title" value="fbgfx.bi (GfxlibFbgfxBi)"}}----
Include file for FreeBASIC's graphics library

	This is the main include file for FreeBASIC's graphics library, and contains the declarations and definitions used to work with many of the procedures in the library. It is recommended to include this file for the constants and enumerations it provides rather than using literal values in your code, as these values may change in the future.

	The symbols in this file are placed in namespace ##fb## by default (-lang fb). Using the "-lang qb" compiler switch places them in the global namespace.

**{{anchor name="LIBRARIES|Libraries included"}}**
	Libraries set to link when including this file via the ##[[KeyPgInclib #INCLIB]]## preprocessor command.
**{{anchor name="CONSTANTS|Constants defined"}}**
	Constants defined in this include file.
**{{anchor name="ENUMERATIONS|Enumerations defined"}}**
	Enumerations defined in this include file.
**{{anchor name="TYPECLASS|Types and Classes defined"}}**
	Types and Classes defined in this include file.

<<=={{anchor name="LIBRARIES"}}{{fbdoc item="section" value="Libraries included"}}==
	##libfbgfx##
		Contains all of the procedure definitions and internal code for the FreeBASIC graphics library.

	=={{fbdoc item="subsect" value="Windows specific"}}==
		##libgdi32##
		##libwinmm##
		##libuser32##

	=={{fbdoc item="subsect" value="Linux specific"}}==
		##libX11##
		##libXext##
		##libXpm##
		##libXrandr##
		##libXrender##
		##libpthread##

=={{anchor name="CONSTANTS"}}{{fbdoc item="section" value="Constants defined"}}==
	##PUT_HEADER_NEW##: //##const PUT_HEADER_NEW as integer = &h7##//
		Value matched against the ##EVENT.TYPE## member to differentiate new and old style image buffer headers.

	{{fbdoc item="keyword" value="GfxLibScreenModeFlags|Screen mode flags"}}
		Flags used in calls to ##[[KeyPgScreengraphics SCREEN]]## and ##[[KeyPgScreenres SCREENRES]]## for determining the type of graphics window to create.
	{{fbdoc item="keyword" value="GfxLibScreenControlCommands|ScreenControl commands"}}
		Values used in calls to ##[[KeyPgScreencontrol SCREENCONTROL]]## to get and set information about the screen, window and OpenGL state, if available.
	{{fbdoc item="keyword" value="GfxLibEventTypeIDs|Event type IDs"}}
		Values used to determine the type of ##[[GfxLibEvent EVENT]]## recieved from calls to ##[[KeyPgScreenevent SCREENEVENT]]##.
	{{fbdoc item="keyword" value="GfxLibMouseButtonIDs|Mouse button IDs"}}
		Values used to determine mouse buttons pressed from calls to ##[[KeyPgGetmouse GETMOUSE]]##.
	{{fbdoc item="keyword" value="GfxLibTransMasks|Transparency Masks"}}
		Values used as transparency mask pixels in image buffers.
<<>>=={{anchor name="ENUMERATIONS"}}{{fbdoc item="section" value="Enumerations defined"}}==
	{{fbdoc item="keyword" value="GfxLibKeyboard scancodes|Keyboard scancodes"}}
		Values used to check keypresses in calls to ##[[KeyPgMultikey MULTIKEY]]##.

=={{anchor name="TYPECLASS"}}{{fbdoc item="section" value="Types and Classes defined"}}==
	##{{fbdoc item="keyword" value="GfxLibEvent|EVENT"}}##
		##[[KeyPgType Type]]## used to store information from calls to ##[[KeyPgScreenevent ScreenEvent]]##.
	##{{fbdoc item="keyword" value="GfxLibImage|IMAGE"}}##
		##[[KeyPgType Type]]## used to store information about image buffers for calls to drawing procedures.
	##PUT_HEADER##
		A type alias for ##[[GfxLibImage IMAGE]]##.
>>::c::

{{fbdoc item="back" value="GfxlibFbgfxBi|fbgfx.bi"}}

{{fbdoc item="title" value="Screen mode flags (GfxlibScreenModeFlags)"}}----
Controls how graphics windows are created and used

	Constants used as flags in calls to ##[[KeyPgScreengraphics SCREEN]]## and ##[[KeyPgScreenres SCREENRES]]## for determining the type of graphics window to create. They are defined in [[GfxlibFbgfxBi fbgfx.bi]].

<<{{fbdoc item="section" value="Graphics mode flags"}}
	==##const GFX_NULL as integer = -1##==
		Creates a graphics buffer but not a window. User is responsible for implementing the window, including drawing to the screen. This flag overrides all others.

{{fbdoc item="section" value="Window mode flags"}}
	==##const GFX_WINDOWED as integer = &h00##==
		Creates a window on the desktop of the requested size and color depth. If not supported by hardware a fullscreen window is created instead. Failing that, no window is created.
	==##const GFX_FULLSCREEN as integer = &h01##==
		Tries to create a fullscreen window of the requested size and color depth. If not supported by hardware a desktop window is created instead. Failing that, no window is created.
	==##const GFX_NO_SWITCH as integer = &h04##==
		Prevents the user from changing between fullscreen and windowed mode by pressing Alt-Enter.
	==##const GFX_NO_FRAME as integer = &h08##==
		Creates a window without a border.
	==##const GFX_SHAPED_WINDOW as integer = &h10##==
		Creates transparent regions in the window wherever RGBA(255, 0, 255, 0) is drawn on the screen.
	==##const GFX_ALWAYS_ON_TOP as integer = &h20##==
		Forces window to the top of the desktop regardless of focus changes.
	==##const GFX_ALPHA_PRIMITIVES as integer = &h40##==
		When used in non-OpenGL modes, forces alpha channel blending in drawing procedures, if available.
<<>>{{fbdoc item="section" value="OpenGL flags"}}
	==##const GFX_OPENGL as integer = &h02##==
		Initializes the OpenGL library. FreeBASIC drawing procedures cannot be used, and the screen is not automatically updated.
	==##const GFX_STENCIL_BUFFER as integer = &h10000##==
		Forces OpenGL to use the stencil buffer.
	==##const GFX_ACCUMULATION_BUFFER as integer = &h20000##==
		Forces OpenGL to use the accumulation buffer.
	==##const GFX_MULTISAMPLE as integer = &h40000##==
		Requests fullscreen antialiasing thru the ##ARB_multisample## extension.
>>::c::

{{fbdoc item="back" value="GfxlibFbgfxBi|fbgfx.bi"}}

{{fbdoc item="title" value="ScreenControls commands (GfxlibScreenControlCommands)"}}----
Controls internal FreeBASIC graphics library settings

	Constants defined in the standard FreeBASIC header [[GfxlibFbgfxBi fbgfx.bi]] that are used as //what// arguments in calls to ##[[KeyPgScreencontrol SCREENCONTROL]]## for getting and setting information about windows, graphics buffers and OpenGL.

<<{{fbdoc item="section" value="Getting information"}}
	{{fbdoc item="subsect" value="Desktop"}}
		==##const GET_WINDOW_POS as integer = 0##==
			Gets the current window position, in desktop coordinates.
		==##const GET_WINDOW_TITLE as integer = 1##==
			Gets the title of the window.
		==##const GET_WINDOW_HANDLE as integer = 2##==
			Gets a handle to the window. This is a ##HWND## in Windows, a "Window" ##XID## in X11 (Linux).
		==##const GET_DESKTOP_SIZE as integer = 3##==
			Gets the size of the desktop, in pixels.

	{{fbdoc item="subsect" value="Graphics window"}}
		==##const GET_SCREEN_SIZE as integer = 4##==
			Gets the dimensions of the graphics window, in pixels.
		==##const GET_SCREEN_DEPTH as integer = 5##==
			Gets the color depth of the screen buffer, in bits per pixel.
		==##const GET_SCREEN_BPP as integer = 6##==
			Gets the color depth of the screen buffer, in bytes per pixel.
		==##const GET_SCREEN_PITCH as integer = 7##==
			Gets the width of the screen buffer, in bytes.
		==##const GET_SCREEN_REFRESH as integer = 8##==
			Gets the refresh rate, in hertz.
		==##const GET_VIEWPORT as integer = 11##==
			Gets the current viewport as set by ##[[KeyPgViewgraphics VIEW]]##, in screen coordinates.
		==##const GET_PEN_POS as integer = 12##==
			Gets the last graphical pen position, in screen coordinates. This position is used in gfx functions supporting relative coordinates using the ##[KeyPgStep Step]]## keyword.
		==##const GET_COLOR as integer = 13##==
			Gets the current color as set by ##[[KeyPgColor COLOR]]##, used by drawing procedures.

	{{fbdoc item="subsect" value="OpenGL"}}
		==##const GET_GL_EXTENSIONS as integer = 15##==
			Gets a ##[[KeyPgStringtype STRING]]## of space-seperated OpenGL extensions currently supported, or the null string (##"####"##) if not in OpenGL mode.

	{{fbdoc item="subsect" value="Miscellaneous"}}
		==##const GET_DRIVER_NAME as integer = 9##==
			Gets the name of the graphics driver currently in use.
		==##const GET_TRANSPARENT_COLOR as integer = 10##==
			Gets the transparency color mask for the current graphics mode.
		==##const GET_ALPHA_PRIMITIVES as integer = 14##==
			Determines if drawing procedures are set to blend the alpha channel, if available, by default.
<<>>{{fbdoc item="section" value="Setting Information"}}
	{{fbdoc item="subsect" value="Desktop"}}
		==##const SET_WINDOW_POS as integer = 100##==
		==##const SET_WINDOW_TITLE as integer = 101##==

	{{fbdoc item="subsect" value="Graphics window"}}
		==##const SET_PEN_POS as integer = 102##==

	{{fbdoc item="subsect" value="OpenGL"}}
		==##const SET_GL_COLOR_BITS as integer = 105##==
		==##const SET_GL_COLOR_RED_BITS as integer = 106##==
		==##const SET_GL_COLOR_GREEN_BITS as integer = 107##==
		==##const SET_GL_COLOR_BLUE_BITS as integer = 108##==
		==##const SET_GL_COLOR_ALPHA_BITS as integer = 109##==
		==##const SET_GL_DEPTH_BITS as integer = 110##==
		==##const SET_GL_STENCIL_BITS as integer = 111##==
		==##const SET_GL_ACCUM_BITS as integer = 112##==
		==##const SET_GL_ACCUM_RED_BITS as integer = 113##==
		==##const SET_GL_ACCUM_GREEN_BITS as integer = 114##==
		==##const SET_GL_ACCUM_BLUE_BITS as integer = 115##==
		==##const SET_GL_ACCUM_ALPHA_BITS as integer = 116##==
		==##const SET_GL_NUM_SAMPLES as integer = 117##==

	{{fbdoc item="subsect" value="Miscellaneous"}}
		==##const SET_DRIVER_NAME as integer = 103##==
		==##const SET_ALPHA_PRIMITIVES as integer = 104##==

{{fbdoc item="section" value="Commands"}}
	==##const POLL_EVENTS as integer = 200##==
>>::c::

{{fbdoc item="back" value="GfxlibFbgfxBi|fbgfx.bi"}}

{{fbdoc item="title" value="Event type IDs (GfxlibEventTypeIDs)"}}----
Determines the type of events recieved from the user

	Constants defined in the standard FreeBASIC header [[GfxlibFbgfxBi fbgfx.bi]] that are used in checking the ##.TYPE## member of the ##[[GfxlibEvent EVENT]]## ##[[KeyPgType TYPE]]## to determine the type of event recieved from calls to ##[[KeyPgScreenevent SCREENEVENT]]##.

	All of the members mentioned below refer to members of the ##[[GfxlibEvent EVENT]]## object passed to and set by ##[[KeyPgScreenevent SCREENEVENT]]##.

<<{{fbdoc item="section" value="Mouse"}}
	{{fbdoc item="subsect" value="Movement"}}
		==##const EVENT_MOUSE_MOVE as integer = 4##==
			The mouse was moved while it was in the graphics window. The ##.X## and ##.Y## members contain the new mouse position relative to the upper-left corner of the window, while the ##.DX## and ##.DY## fields contain the movement deltas.
	{{fbdoc item="subsect" value="Buttons"}}
		==##const EVENT_MOUSE_BUTTON_PRESS as integer = 5##==
			One of the mouse buttons was pressed. The ##.BUTTON## member has one bit set identifying the button that was pressed; bit 0 identifies the left mouse button, bit 1 the right mouse button and bit 2 the middle mouse button.
		==##const EVENT_MOUSE_BUTTON_RELEASE as integer = 6##==
			One of the mouse buttons was released. The ##.BUTTON## member has one bit set identifying the button that was pressed; bit 0 identifies the left mouse button, bit 1 the right mouse button and bit 2 the middle mouse button.
		==##const EVENT_MOUSE_DOUBLE_CLICK as integer = 7##==
			One of the mouse buttons was double-clicked. The ##.BUTTON## member has one bit set identifying the button that was pressed; bit 0 identifies the left mouse button, bit 1 the right mouse button and bit 2 the middle mouse button.
	{{fbdoc item="subsect" value="Wheel"}}
		==##const EVENT_MOUSE_WHEEL as integer = 8##==
			The mouse wheel was used. The ##.Z## member has the new wheel position.
	{{fbdoc item="subsect" value="Other"}}
		==##const EVENT_MOUSE_ENTER as integer = 9##==
			The mouse was moved in to the graphics window.
		==##const EVENT_MOUSE_EXIT as integer = 10##==
			The mouse was moved out of the graphics window.
<<>>{{fbdoc item="section" value="Keyboard"}}
	==##const EVENT_KEY_PRESS as integer = 1##==
		A key was pressed on the keyboard. The ##.SCANCODE## member contains the platform independent scancode value for the key. The ##.ASCII## member holds the ASCII representation of the key, or zero (0) if there is none.
	==##const EVENT_KEY_RELEASE as integer = 2##==
		A key was released on the keyboard. The ##.SCANCODE## member contains the platform independent scancode value for the key. The ##.ASCII## member holds the ASCII representation of the key, or zero (0) if there is none.
	==##const EVENT_KEY_REPEAT as integer = 3##==
		A key is being held down on the keyboard. The ##.SCANCODE## member contains the platform independent scancode value for the key. The ##.ASCII## member holds the ASCII representation of the key, or zero (0) if there is none.

{{fbdoc item="section" value="Window"}}
	==##const EVENT_WINDOW_GOT_FOCUS as integer = 11##==
		The graphics window gained focus.
	==##const EVENT_WINDOW_LOST_FOCUS as integer = 12##==
		The graphics window lost focus.
	==##const EVENT_WINDOW_CLOSE as integer = 13##==
		The user attempted to close the graphics window.
>>::c::

{{fbdoc item="back" value="GfxlibFbgfxBi|fbgfx.bi"}}

{{fbdoc item="title" value="Mouse button IDs (GfxlibMouseButtonIDs)"}}----
Determines which mouse buttons the user has pressed

	Constants defined in the standard FreeBASIC header [[GfxlibFbgfxBi fbgfx.bi]] that are used in checking the //##buttons##// argument in a call to ##[[KeyPgGetmouse GETMOUSE]]##. These constants are bitmasks, as multiple mouse buttons may be pressed at any one time.

{{fbdoc item="section" value="Buttons"}}
	==##const BUTTON_LEFT as integer = &h1##==
		The left mouse button is pressed.
	==##const BUTTON_RIGHT as integer = &h2##==
		The right mouse button is pressed.
	==##const BUTTON_MIDDLE as integer = &h4##==
		The middle mouse button is pressed.

{{fbdoc item="back" value="GfxlibFbgfxBi|fbgfx.bi"}}

{{fbdoc item="title" value="Transparency Masks (GfxlibTransMasks)"}}----
Mask colors for transparency

	Constants defined in the standard FreeBASIC header [[GfxlibFbgfxBi fbgfx.bi]] that are set to the transparency mask colors for graphics modes. The ##[[KeyPgTransGfx TRANS]]##, ##[[KeyPgAlphaGfx ALPHA]]## and ##ADD## blending methods in calls to ##[[KeyPgPutgraphics PUT]]## do not blit pixels within image buffers matching these mask colors, thereby allowing transparency effects.

{{fbdoc item="section" value="Masks"}}
	==##const MASK_COLOR_INDEX as integer = 0##==
		Mask color index for 8-bpp or lesser paletted graphics modes.
	==##const MASK_COLOR as integer = &hFF00FF##==
		Mask color value for 15, 16, 24 and 32-bpp graphics modes.

{{fbdoc item="back" value="GfxlibFbgfxBi|fbgfx.bi"}}

{{fbdoc item="title" value="EVENT (GfxlibEvent)"}}----
Type used to hold event information

	A ##[[KeyPgType TYPE]]## defined in the standard FreeBASIC header [[GfxlibFbgfxBi fbgfx.bi]] used to hold event information from calls to ##[[KeyPgScreenevent SCREENEVENT]]##. The purpose of this ##[[KeyPgType TYPE]]## is to be able to contain a variety of event information while remaining as small as possible. This is achieved with an ##[[KeyPgInteger INTEGER]]## member denoting the type of event that was recieved, followed by a ##[[KeyPgUnion UNION]]## containing all of the possible event information. This ##[[KeyPgType TYPE]]## is paraphrased below:

%%(qbasic)type EVENT field = 1
	as integer TYPE
	union
		type
			as integer SCANCODE, ASCII
		end type
		type
			as integer X, Y
			as integer DX, DY
		end type
		as integer BUTTON
		as integer Z
	end union
end type
%%

	The following is a list of event types and the members that are affected when these events occur:

{{fbdoc item="section" value="Keyboard events"}}
	##.TYPE##
		Equal to one of the [[GfxlibEventTypeIDs Keyboard Event Constants]].
	##.SCANCODE##
		The keyboard scancode of the key that generated the event.
	##.ASCII##
		The ASCII code of the key that generated the event, or zero (0) if no such code.

{{fbdoc item="section" value="Mouse movement events"}}
	##.TYPE##
		Equal to the [[GfxlibEventTypeIDs Mouse Movement Constant]].
	##.X##, ##.Y##
		The mouse position relative to the top-left corner of the graphics window.
	##.DX##, ##.DY##
		The mouse position relative to the last recorded mouse position.

{{fbdoc item="section" value="Mouse button events"}}
	##.TYPE##
		Equal to one of the [[GfxlibEventTypeIDs Mouse Button Event Constants]].
	##.BUTTON##
		Any number of [[GfxlibMouseButtonIDs mouse button bitmasks]].

{{fbdoc item="section" value="Mouse wheel events"}}
	##.TYPE##
		Equal to the [[GfxlibEventTypeIDs Mouse Wheel Event Constant]].
	##.Z##
		The wheel position relative to the initial position, or zero (0).