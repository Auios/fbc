{{fbdoc item="title" value="CONDCREATE"}}
----
Function that creates a conditional variable to be used in synchronizing threads.

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Condcreate** ( ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = **Condcreate** ()
##
{{fbdoc item="ret"}}
	Handle of variable returned by ##**Condcreate**##.

{{fbdoc item="desc"}}
	The integer returned is a handle that points to the variable, and must be used to access it.

	Once the conditional is ##[[KeyPgCondCreate Condcreate]]## and the threads are started, one or more of them can be set to ##[[KeyPgCondWait Condwait]]## for the conditional, they will be stopped until some other thread ##[[KeyPgCondSignal Condsignal]]##s that the waiting thread can restart. ##[[KeyPgCondBroadcast Condbroadcast]]## can be used to restart all threads waiting for the conditional. At the end of the program ##[[KeyPgCondDestroy Conddestroy]]## must be used to avoid leaking resources in the OS.

	Multihtreading is not implemented as a service in MSDOS so this function doesn't exist in FB for DOS32.

{{fbdoc item="ex"}}
%%(qbasic)
option explicit

declare sub mythread( byval id as integer )

  dim i as integer
  dim shared hcondready as integer
  dim shared hcondstart as integer
  dim threads(1 to 9) as integer

  '' create conditionals
  hcondready = Condcreate()
  hcondstart = Condcreate()

  if hcondready = 0 or hcondstart = 0 then

	print "Unable to create conditions"

  else

	print
	print "Ready..."
	print
 
	'' create some threads
	for i = 1 to 9
	  threads(i) = Threadcreate(@mythread, i)
	  if threads(i) = 0 then
	    print "Unable to create thread"
	  else
	    '' let the thread tell us it's ready
	    Condwait hcondready
	  end if
	next i
 
	print
	print "Set..."
	print
 
	sleep 1000, 1
 
	print "Go!"
	print
 
	'' start all threads
	Condbroadcast hcondstart
 
	'' wait for all threads to complete
	for i = 1 to 9
	  if threads(i) <> 0 then
	    Threadwait threads(i)
	  end if
	next i

  end if

  print
  print "Done"

  '' Clean up
  if hcondstart then Conddestroy hcondstart
  if hcondready then Conddestroy hcondready

  end

sub mythread( byval id as integer )
  dim i as integer

  print "Thread #"; id; " is waiting ... "

  '' let the thread creator know we're ready
  Condsignal hcondready

  '' wait for the start signal
  Condwait hcondstart

  '' print out the number of this thread
  for i = 1 to 40
	print id;
  next i

end sub
%%

{{fbdoc item="diff"}}
	- New to FreeBasic

{{fbdoc item="see"}}
	- ##[[KeyPgCondBroadcast Condbroadcast]]##
	- ##[[KeyPgCondDestroy Conddestroy]]##
	- ##[[KeyPgCondSignal Condsignal]]##
	- ##[[KeyPgCondWait Condwait]]##
	- ##[[KeyPgThreadCreate Threadcreate]]##

{{fbdoc item="back" value="CatPgThreading|THREADING"}}{{fbdoc item="back" value="CatPgFullIndex|Alphabetical  keywords list"}}