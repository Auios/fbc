{{fbdoc item="title" value="INPUT"}}----
Reads a list of values from the keyboard

{{fbdoc item="syntax"}}##
	**Input** [;] ["//prompt//" //seperator//] //variable_list//
##
{{fbdoc item="param"}}
	##//prompt//##
		an optional string literal that is written to the screen.
	##//seperator//##
		a semicolon (;), which appends "? " to the prompt, or comma (,), which appends nothing.
	##//variable_list//##
		a list of comma-seperated variables used to hold the values read from the user.

{{fbdoc item="desc"}}
	Reads a list of comma-seperated values from the keyboard up until the first carriage return. Numerical values are converted from their string representation into the corresponding types in the variable list. Characters are echoed to the screen as they are typed.

	The prompt - if any - is written to the screen at the current cursor location, and characters read are echoed to the screen immediately folllowing the prompt. If no prompt is specified, characters are echoed at the current cursor location.

	The optional leading semicolon after ##**Input**## is similar to the optional trailing semicolon in a ##[[KeyPgPrint Print]]## statement: the cursor will remain on the same line after all of the characters have been echoed, otherwise, the cursor will move to the beginning of the next line.

	If more values are read than are listed in the variable list, extra values will be ignored; if fewer values are read, the remaining variables will be initialized - numeric variables to zero (0), and string variables to the null string (##"####"##).

	Numeric values are converted similar to the procedures ##[[KeyPgVal Val]]##, ##[[KeyPgValint ValInt]]##, ##[[KeyPgVallng ValLng]]##, ##[[KeyPgValuint ValUint]]##, and ##[[KeyPgValulng ValUlng]]##, converting as many numeric characters as possible.

	##**Input**## has a limited edit capacity: it allows to erase characters using the backspace key.  If a better user interface is needed, a custom input routine should be used.

{{fbdoc item="ex"}}

	**Example #1**
{{fbdoc item="filename" value="examples/manual/console/input.bas"}}%%(freebasic)
Dim n As String, a As Integer
Input "Enter [Name, Age]: ", n, a
Print n
Print a
%%

	**Example #2**
{{fbdoc item="filename" value="examples/manual/console/input2.bas"}}%%(freebasic)
dim as double a, b
dim as string yn

do
	
	input   "Please enter a number: ", a
	input ; "And another: ", b
	print , "Thank you"
	sleep 500
	print
	print "The total is "; a + b
	print
	
	do
	    input "Would you like to enter some more numbers"; yn
	    yn = lcase(yn)
	loop until yn = "y" or yn = "n"
	
loop while lcase(yn) = "y"
%%

{{fbdoc item="diff"}}
	- If the user inputs the wrong number of values, or if it expects a number for a value and gets a string that is not a valid number, then QBASIC issues the message "Redo from start", and does not continue further until it receives a valid input.
	- If no prompt is given, QBASIC will prompt with "? ", while FreeBASIC will not give any prompt.

{{fbdoc item="see"}}
	- ##[[KeyPgInputPp Input #]]##
	- ##[[KeyPgInputnum Input()]]##
	- ##[[KeyPgLineinput Line Input]]##

{{fbdoc item="back" value="CatPgInput|User Input"}}