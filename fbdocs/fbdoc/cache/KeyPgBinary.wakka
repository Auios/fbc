{{fbdoc item="title" value="BINARY"}}----
{{fbdoc item="syntax"}}
	OPEN  //file_name_string// FOR BINARY [ACCESS //access_type//] [//lock_type//] AS [#]//slot// 

{{fbdoc item="desc"}}
	Opens a file or device for reading and/or writing binary data in the file //slot//, with free format.  
	If the file does not exist, a new file will be created.	The file pointer is initialized by OPEN at byte no. 1. 
	[[KeyPgGetfileio GET #]] and [[KeyPgPutfileio PUT #]] file operations move the file pointer according to the size of the data, the pointer can be set to any byte in the file.
	The data existing in the file is preserved by OPEN. 
	This file mode can use any buffer variable to read/write data in the file.   
	The data is saved in binary mode, in the same internal format FB uses, by means of [[KeyPgGetfileio GET #]] and [[KeyPgPutfileio PUT #]]
	
	//file_name_string// must be string expression resulting in a legal file name in the target OS, without wildcards. The file will be sought for in the present directory, unless a path is given.
			
	//Access_type// By default RANDOM mode allows to both read and write the file, unless an [[KeyPgAccess ACCESS]] type is specified, it mus be one of: 
		- READ - the file is opened for input only
		- WRITE - the file is opened for output only
		- READ WRITE - the file is opened for input and output (the default)

	//Lock_type// indicates the way the file is locked  for other processes (users or threads), it is one of:
		- SHARED - The file can be freely accessed by other processes     
		- LOCK READ - The file can't be opened simultaneously for reading
		- LOCK WRITE - The file can't be opened simultaneously for writing
		- LOCK READ WRITE - The file cannot be opened simultaneously by other processes.
		If no lock type is stated, the file will be SHARED for other threads of the program and LOCK READ WRITE for other programs.
		[[KeyPgLock LOCK]] and [[KeyPgUnlock UNLOCK]] can be used to restrict temporally access to parts of a file.

	//slot// Is a valid FB file slot number (in the range 1-255) not being used for any other file presently open. The slot identifies the file for the rest of file operations. A free slot can be found using the [[KeyPgFreefile FREEFILE]] function.
	
{{fbdoc item="ex"}}
%%(qbasic)
'' Create a binary data file with one number in it
Dim x As Single = 17.164
Open "MyFile.Dat" For Binary As #1
Put #1,,x
Close #1
%%

{{fbdoc item="ex"}}
%%(qbasic)
'' Now read the number from the file
Dim x As Single = 0
Open "MyFile.Dat" For Binary As #1
Get #1,,x
Close #1
Print x
%%

{{fbdoc item="ex"}}
%%(qbasic)
'' Read entire contents of a file to a string
  Dim txt As String
  Open "myfile.txt" For Binary Access Read As #1
  If Lof(1) > 0 Then
	txt = String(Lof(1),0)
	Get #1,,txt
  End If
  Close #1
  Print txt
%%

{{fbdoc item="diff"}}
	- None

{{fbdoc item="see"}}
	- [[KeyPgOpen OPEN]]
	- [[KeyPgPutfileio PUT #]]
	- [[KeyPgGetfileio GET #]]
	- [[KeyPgRandom RANDOM]]
	- [[KeyPgAppend APPEND]]
	- [[KeyPgOutput OUTPUT]]
	- [[KeyPgInputfilemode INPUT]]

{{fbdoc item="back" value="CatPgFile|File I/O Functions"}}