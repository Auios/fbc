{{fbdoc item="title" value="Operator For (iteration)"}}----
Declares or defines operators used by a ##[[KeyPgFornext For...Next]]## loop with user defined type variables

{{fbdoc item="syntax"}}##
	{ [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] } //typename//
		[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **For** ()
		[[KeyPgDeclare declare]] [[KeyPgOperator operator]] **For** ( [ [[KeyPgByref byref]] | [[KeyPgByval byval]] ] //stp// [[KeyPgAs as]] //typename// )
		//...//
	End { [[KeyPgType Type]] | [[KeyPgClass Class]] | [[KeyPgUnion Union]] }
##
{{fbdoc item="usage"}}##
	[[KeyPgFornext For]] //iterator// [ As //typename// ] = //start_value// To //end_value// [ [[KeyPgFornext Step]] //step_value// ]
		[// ...statements... //]
	[[KeyPgFornext Next]]
##
{{fbdoc item="param"}}
	##//typename//##
		name of the ##[[KeyPgType Type]]##, ##[[KeyPgClass Class]]##, or ##[[KeyPgUnion Union]]##
	##//stp//##, ##//step_value//##
		a ##//typename//## object used as an incremental value
	##//iterator//##
		a ##//typename//## object used as an iterator
	##//end_value//##
		a ##//typename//## object used as a loop-terminating value
	##//start_value//##
		a ##//typename//## object used to copy construct or assign to the iterator initially

{{fbdoc item="desc"}}
	##**Operator For**##, ##[[KeyPgOpNext Operator Next]]## and ##[[KeyPgOpStep Operator Step]]## can be overloaded in user-defined type definitions to allow objects of that type to be used as iterators and step values in ##[[KeyPgFornext For...Next]]## loops.

	##**Operator For**## is called immediately after copy constructing or assigning to the iterator object, and allows the object to perform any additional initialization needed in preparation for the loop.

	The first version of ##**Operator For**## is used if no step value is given in the ##[[KeyPgFornext For...Next]]## statement. If a step value is given, the second version is used and is passed the step value.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/udt/for.bas"}}%%(freebasic)
'' Example Type

type T

  value as double

  declare constructor( byval x as double = 0 )

  declare operator += ( byval x as double )

  declare operator for()
  declare operator step()
  declare operator next( byref cond as T ) as integer

  declare operator cast() as string

end type

constructor T ( byval x as double )
  value = x
end constructor

operator <= ( byref lhs as T, byref rhs as T ) as integer
  operator = ( lhs.value <= rhs.value )
end operator

operator T.+= ( byval x as double )
  value +=  x
end operator

operator T.for()
end operator

operator T.step()
  this += 1
end operator

operator T.next( byref cond as T ) as integer
  operator = ( this <= cond )
end operator

operator T.cast() as string
  operator = str( value )
end operator

'' Example Usage

for i as T = 1 to 10
  print i
next i
%%
{{fbdoc item="lang"}}
	- Only available in the //[[ProPgCompOptlang -lang fb]]// dialect.

{{fbdoc item="see"}}
	- ##[[KeyPgOpNext Operator Next]]##
	- ##[[KeyPgOpStep Operator Step]]##
	- ##[[KeyPgFornext For...Next]]##

{{fbdoc item="back" value="CatPgOpIterating|Iterating Operators"}}{{fbdoc item="back" value="CatPgOperators|Operators"}}