{{fbdoc item="title" value="(@) Address of"}}----
Operator that returns the address of its operand.

{{fbdoc item="syntax"}}##
	**@**{//variable// | //literal string// | //function//}
##
{{fbdoc item="usage"}}##
	//result// = @//variable//
		##//Or//##
	//result// = @"//literal string//"
		##//Or//##
	//result// = @//function//
##
{{fbdoc item="desc"}}
	The ##@## operator returns the memory address of a function or variable. ##@## can be used in place of any ##""###""Ptr## built-in function except ##[[KeyPgStrptr StrPtr]]##.

	When used with a variable-length string, ##@## returns a pointer to the internal string descriptor.  Use ##[[KeyPgStrptr StrPtr]]## to get the address of the actual character data.

	When used with an array variable, ##@## returns a pointer to the element indexed by the array subscripts.  For example, @myarray(0) returns a pointer to myarray(0).

{{fbdoc item="ex"}}
##%%(qbasic)
'This program demonstrates the use of the @ operator.
Option Explicit     'Here we ensure only declared variables may be used.


Dim a As Integer
Dim b As Integer

Dim addr As Integer Ptr

a = 5   'Here we place the values 5 and 10 into a and b, respectively.
b = 10

'Here, we print the value of the variables, then where in memory they are stored.
Print "The value in A is ";a;" but the pointer to a is ";@a
Print "The value in B is ";b;" but the pointer to b is ";@b

'Now, we will take the integer ptr above, and use @ to place a value into it.
'Note that the * will check the value in the ptr, just as @ checked the ptr 
'for a normal variable.

addr = @a

Print "The pointer addr is now pointing at the memory address to a, value: ";*addr

addr = @b

Print "The pointer addr is now pointing at the memory address to b, value: ";*addr
%%##

##%%(qbasic)
'This program demonstrates how the @ symbol can be used
'to create pointers to subroutines.

Declare Sub mySubroutine ()

Option Explicit 'Here we ensure that all variables have to be dimensioned.

Dim say_Hello As Sub() 

say_Hello = @mySubroutine   'We tell say_Hello to point to mySubroutine.
	                        'The sub() datatype acts as a pointer here.

say_Hello() 'Now we can run say_Hello just like mySubroutine.

Sub mySubroutine
	Print "hi"
End Sub
%%##

{{fbdoc item="diff"}}
	- New to FreeBasic

{{fbdoc item="see"}}
	- [[KeyPgValOf (*) Value of]]
	- ##[[KeyPgVarptr VarPtr]]##
	- ##[[KeyPgProcptr ProcPtr]]##
	- ##[[KeyPgStrptr StrPtr]]##
	- [[DtPointers Pointers]]
{{fbdoc item="back" value="CatPgOperators|Operators"}}