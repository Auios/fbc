{{fbdoc item="title" value="EXPORT"}}----
Declaration specifier to indicate that a procedure should be visible from a DLL.

{{fbdoc item="syntax"}}##
	{ [[KeyPgSub sub]] | [[KeyPgFunction function]] } //proc_name// ( //argumentlist// ) [ [[KeyPgAs as]] [[DataType datatype]] ] **Export**
##
{{fbdoc item="desc"}}
	If a function is declared with this clause in a DLL, it is added to the public export table, so external programs can dynamically link to it using [[KeyPgDylibsymbol Dylibsymbol]].

{{fbdoc item="ex"}}
%%(qbasic)
'mydll.dll
'in the DLL the function must be declared as CDECL and export
FUNCTION AddNumbers CDECL ALIAS "AddNumbers" ( BYVAL operand1 AS INTEGER, BYVAL operand2 AS INTEGER) AS INTEGER EXPORT
   AddNumbers = operand1 + operand2
END FUNCTION
%%

%%(qbasic)
'main program
' create a function pointer, arguments must be the same as in the original function
dim AddNumbers as function ( byval operand1 as integer, byval operand2 as integer ) as integer
dim hndl as any ptr
'
hndl=DYLIBLOAD("mydll.dll")
' find the proc address (case matters!)
AddNumbers = DYLIBSYMBOL( hndl, "AddNumbers" )
' call it..
print "1 + 2 ="; AddNumbers( 1, 2 )
sleep
%%

{{fbdoc item="diff"}}
	- New to Freebasic

{{fbdoc item="see"}}
	- ##[[KeyPgDylibload Dylibload]]##
	- ##[[KeyPgDylibsymbol Dylibsymbol]]##
	- ##[[KeyPgAlias Alias]]##

{{fbdoc item="back" value="CatPgProcedures|Procedures"}}