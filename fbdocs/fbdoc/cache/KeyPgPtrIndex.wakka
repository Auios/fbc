{{fbdoc item="title" value="[] Pointer Indexing"}}----
Operator to use a pointer as if it were a zero based array

{{fbdoc item="syntax"}}##
	//pointer//**[** //expression// **]**
##
{{fbdoc item="param"}}
	##//pointer//##
		A variable of pointer type to index.
	##//expression//##
		An index as a signed integral value.

{{fbdoc item="desc"}}
	This operator returns a reference to a value some distance in memory from a starting address. It is essentially shorthand for **##*(//pointer// + //expression//)##**; both do exactly the same thing. Like pointer arithmetic, any type of ##[[KeyPgPointer POINTER]]## can be indexed except for an ##[[KeyPgAny ANY]]## ##[[KeyPgPointer POINTER]]##. Also, like pointer arithmetic, it is up to the user to make sure meaningful data is being accessed.

{{fbdoc item="ex"}}
%%(qbasic)'' initialize a 5-element array
dim array(4) as integer = { 0, 1, 2, 3, 4 }

'' point to the first element
dim p as integer ptr = @array(0)

'' use pointer indexing to output array elements
for index as integer = 0 to 4
	print p[index]
next
%%

	Will give the output,

%%0 1 2 3 4
%%

{{fbdoc item="diff"}}
	- New to FreeBasic

{{fbdoc item="see"}}
	- [[KeyPgPtrAddSub Pointer Addition and substraction]]
	- [[CatPgOpPoint Pointer Operators]]
	- [[KeyPgStrIndex String Indexing]]

{{fbdoc item="back" value="CatPgOperators|Operators"}}