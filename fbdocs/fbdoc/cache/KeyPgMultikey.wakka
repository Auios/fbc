{{fbdoc item="title" value="MULTIKEY"}}----
Detects the status of keys by keyboard scancode

{{fbdoc item="syntax"}}##
	[[KeyPgDeclare declare]] [[KeyPgFunction function]] **Multikey** ( [[KeyPgByval byval]] //scancode// [[KeyPgAs as]] [[KeyPgInteger integer]] ) [[KeyPgAs as]] [[KeyPgInteger integer]]
##
{{fbdoc item="usage"}}##
	//result// = **Multikey**(//scancode//)
##
{{fbdoc item="param"}}
	##//scancode//##
		The [[GfxScancodes scan code]] of the key to check.

{{fbdoc item="ret"}}
	Returns -1 if the key for the specified [[GfxScancodes scan code]] is pressed, otherwise returns 0.

{{fbdoc item="desc"}}
	##**Multikey**## is a function which will detect the status of any key, determined by scancode, at any time. It will return -1 if the key is pressed, otherwise it will return 0. The keyboard input buffer is not disabled while you use ##**Multikey**##; that is, pressed keys will be stored and subsequently returned by your next call to ##[[KeyPgInkey Inkey]]##. This means you have to empty ##[[KeyPgInkey Inkey]]## when you finish using ##**Multikey**##:
{{fbdoc item="filename" value="examples/manual/check/KeyPgMultikey_1.bas"}}%%(freebasic)
While Inkey <> "": Wend
%%
	Keeping ##[[KeyPgInkey Inkey]]## to work while you use ##**Multikey**## allows more flexibility and can be useful to detect [[KeyPgChr Chr]](255)+"k" combo returned on window close button click, if a windowed gfx mode has been set via the ##[[KeyPgScreengraphics Screen]]## statement. For a list of accepted scancodes, see [[GfxScancodes DOS keyboard scancodes]]; these are guaranteed to be valid for all FreeBASIC supported platforms.
	##**Multikey**## works both in console and graphics mode.

{{fbdoc item="ex"}}
{{fbdoc item="filename" value="examples/manual/input/multikey.bas"}}%%(freebasic)
#include "fbgfx.bi"
DIM work_page AS INTEGER, x AS INTEGER, y AS INTEGER
' Request 640x480 with 2 pages
SCREEN 18, ,2
COLOR 2, 15
work_page = 0
x = 320
y = 240
DO
	' Let's work on a page while we display the other one
	SCREENSET work_page, work_page XOR 1
	' Check arrow keys and update position accordingly
	IF MULTIKEY(FB.SC_LEFT) AND x > 0 THEN x = x - 1
	IF MULTIKEY(FB.SC_RIGHT) AND x < 639 THEN x = x + 1
	IF MULTIKEY(FB.SC_UP) AND y > 0 THEN y = y - 1
	IF MULTIKEY(FB.SC_DOWN) AND y < 479 THEN y = y + 1
	CLS
	CIRCLE(x, y), 30, , , , ,F
	' Page flip
	work_page = work_page XOR 1
LOOP WHILE NOT MULTIKEY(FB.SC_ESCAPE)
' Clear input buffer
WHILE INKEY = "": WEND
' Restore both work and visible pages to page 0
SCREENSET
PRINT "Press CTRL and H to exit..."
DO
SLEEP 25
IF MULTIKEY(FB.SC_CONTROL) AND MULTIKEY(FB.SC_H) THEN EXIT DO
LOOP
%%

{{fbdoc item="diff"}}
	- New to FreeBasic

{{fbdoc item="see"}}
	- [[GfxScancodes Keyboard scancodes]]
	- ##[[KeyPgGetmouse Getmouse]]##
	- ##[[KeyPgGetjoystick Getjoystick]]##
	- ##[[KeyPgScreengraphics Screen (Graphics)]]##
	- ##[[KeyPgInkey Inkey]]##

{{fbdoc item="back" value="CatPgGfxInput|User Input Functions"}}