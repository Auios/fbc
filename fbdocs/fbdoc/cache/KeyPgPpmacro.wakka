{{fbdoc item="title" value="#MACRO...#ENDMACRO"}}
----
Preprocessor directive to define a multiline macro.

{{fbdoc item="syntax"}}##
	**#macro** //macro_name//( [ //param1// [, //param_list//] ] )
		//macro body//
	**#endmacro**
##
{{fbdoc item="desc"}}
	##**#macro**## defines a function like macro where ##//macro body//## may span multiple lines.

	Parameters supplied to the function like macro are substituted where they occur in the ##//macro body//##.  The entire ##//macro body//## is substituted where ever ##//macro_name//## appears in the source code.  The number of parameters supplied to a macro must match the number of parameters in its ##**#macro**## definition.

	The ##[[KeyPgPpifdef #ifdef]]## and ##[[KeyPgPpifndef #ifndef]]## preprocessor conditionals can test if ##//macro_name//## exists or does not exist.

	The ##[[KeyPgPpundef #undef]]## preprocessor directive will undefine a macro so that it may be redefined with another definition.

{{fbdoc item="ex"}}
%%(qbasic)
'' macro as an expression value
#macro Print1( a, b )
  a + b
#endmacro

print Print1( "Hello", "World" )

'' Output :
'' Hello World!
%%

%%(qbasic)
'' macro as multiple statements
#macro Print2( a, b )
  print a;
  print " ";
  print b;
  print "!"
#endmacro

Print2( "Hello", "World" )

'' Output :
'' Hello World!
%%

{{fbdoc item="diff"}}
	- New to FreeBASIC

{{fbdoc item="see"}}
	- ##[[KeyPgPpdefine #define]]##

{{fbdoc item="back" value="CatPgPreProcess|Preprocessor"}}{{fbdoc item="back" value="CatPgFullIndex|Alphabetical Keywords List"}}
