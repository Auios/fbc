{{fbdoc item="title" value="Pointers"}}----
Datatypes whose values are addresses in memory

{{fbdoc item="desc"}}
	Pointers are [[DtVariables Variables]] whose values are addresses in memory, and they are said to 'point' to this memory. The type of data that is pointed to depends on the type of pointer (an [[KeyPgInteger Integer]] [[KeyPgPointer Pointer]] points to [[KeyPgInteger Integer]] data). Pointers are defined using [[KeyPgDim Dim]], like other variables, with the suffix "pointer" or "ptr" following the type name. The following,

%%(qbasic)
Dim myInteger As Integer = 10
Dim myPointer As Integer Pointer = @myInteger
%%
	defines an integer and an integer pointer that points to it. The [[KeyPgAt address-of operator]] (@) is used to retrieve the address of myInteger.

==Accessing the pointed to data==
	The data pointed to by a pointer can be accessed with the [[KeyPgValOf dereference operator]] (*). This operator returns a reference to the data that is pointed to, that matches the type of pointer. The following,

%%(qbasic)
*myPointer = 20
Print myInteger
%%
	assigns the value of 20 to the location	at which myPointer points (which is the address of myInteger, or @myInteger). Changes to this location in memory directly affect the value of myInteger (myInteger is the same thing as *myPointer).

==Working with pointers to user-defined types==
	Pointers to user-defined types are defined and used like all other pointers. Accessing a member of a [[KeyPgType Type]] or [[KeyPgClass Class]] requires one of the following two methods:

%%(qbasic)
Type myType
	a As Integer
	b As Double
End Type

Dim x As myType
Dim p As myType Pointer = @x

'' 1) dereference the pointer and use the member access operator:
(*p).a = 10
(*p).b = 12.34

'' 2) use the shorthand form of the member access operator:
Print p->a
Print p->b
%%
	The first method uses the 'dot' form of the [[KeyPgDot member access operator]]. This operator accesses members from references, so the pointer is dereferenced first. The member access operator has higher priority over the dereference operator, so parenthesis are needed to dereference the pointer before using it with the member access operator.
	The second method uses the 'arrow' form of the [[KeyPgPtrField member access operator]]. This operator accesses members from pointers, which are automatically dereferenced. This can make code a little clearer, although both forms produce identical results.

{{fbdoc item="see"}}
	- ##[[KeyPgAt (@) Address of]]##
	- ##[[KeyPgValOf (*) Value of]]##
	- ##[[KeyPgVarptr VARPTR]]##
	- ##[[KeyPgStrptr STRPTR]]##
	- ##[[KeyPgProcptr PROCPTR]]##
	- ##[[KeyPgDim DIM]]##


{{fbdoc item="back" value="DocToc|Table of Contents"}}