{{fbdoc item="title" value="NAMESPACE"}}
----
Namespaces are used to organize code in distinguishable groups.

{{fbdoc item="syntax"}}
	##**Namespace** //identifier//
		//statements//
	**End Namespace**##

{{fbdoc item="desc"}}
	Namespaces are commonly used in libraries where you don't want all the symbols from that library to crowd the user's space (called the Global Namespace). For example, if you used the "Forms" library, it might define the Point type for describing an X and Y coordinate, and you might also define it for another purpose. This can be resolved by creating the namespace Forms for the library, and then referring to its Point type as Forms.Point, and yours as just Point. The syntax has not yet been decided at the time of this writing as to how global scope resolution will be implemented. Some ideas include: Global.""SomeSymbol"", .""SomeSymbol"", ..""SomeSymbol"", and ::""SomeSymbol"".

{{fbdoc item="ex"}}
##%%(qbasic)
namespace Forms
	type Point '' A 2D point
		as integer x
		as integer y
	end type
	'' Since we are inside of the namespace, Point resolves to Forms.Point.
	sub AdjustPoint( byref pt as Point, byval newx as integer, byval newy as integer )
		pt.x = newx
		pt.y = newy
	end sub
end namespace

type Point '' A 3D point
	as integer x
	as integer y
	as integer z
end type

sub AdjustPoint( byref pt as Point, byval newx as integer, byval newy as integer, byval newz as integer )
	pt.x = newx
	pt.y = newy
	pt.z = newz
end sub

dim pt1 as Point
AdjustPoint( pt1, 1, 1, 1 )
dim pt2 as Forms.Point
Forms.AdjustPoint( pt2, 1, 1 )
%%##

{{fbdoc item="diff"}}
	- New to FreeBASIC

{{fbdoc item="see"}}
	- [[KeyPgUsing Using (Namespaces)]]