TRAM 2 - Testing Release Archive Maker

This tool can build fbc/rtlib/gfxlib, copy in binaries & libraries from
MinGW/DJGPP or the previous FB release, package everything into archives,
build the Windows installer, and more. Everything automated, so it doesn't have
to be done manually.

The win32 version builds for either win32 or dos, the linux version builds for
linux (could easily build for all unix-like targets).

Notes:
* tram isn't smart, it just executes a bunch of steps.
* Wrong files in the code base won't stop tram.
* Only one tram can work in a code base at once, otherwise they would overwrite
  each-other's fbc executables and/or other things in the code base.
* You may want to avoid running tram in your main stable FreeBASIC installation,
  because tram may mess it up.
* No SPACE's in paths please, makefiles don't handle it, so tram doesn't either.
* All files for/in the DOS package should probably use the 8.3 filename format.
  Anyways, not all do.

Usage:
    cd src/contrib/tram2
    make
    ./tram2 [options]

tram will cd ../../.. to work in the FreeBASIC root directory.

Options:
    dos
    linux
    win32
        Enables this target, instead of defaulting to the host.
        (Note: currently only the 'dos' option is useful)

    standalone
        linux: Build the standalone compiler/package instead of the normal one.
        win32/dos: standalone is always enabled by default, this option is not
        required.

    clean
        Perform the clean-up versions of each step.

        e.g. 'pullbin clean' will remove binaries instead of copying them
        into the root tree,

        'compiler make clean' will run 'make clean' on the compiler and
        remove fbc.exe, instead of compiling it, etc.

        Steps that have nothing to clean up (e.g. remake) will be ignored.
        (e.g. for 'remake': removing fbc.exe and it's .o's can already be done
        via 'compiler make clean')

    pullbin
        Copy in binaries & libraries from MinGW/DJGPP/the system & the previous
        FB release. The binaries-<target>.ini files contain the lists.
        Only applies if standalone is enabled (i.e. not on linux if 'standalone'
        wasn't specified).

    genimplibs  (win32 only)
        Run ../genimplibs/genimplibs.exe to generate all import libraries.

    rtlib
    gfxlib2
    compiler
        What to configure/make.

    configure
        Run configure script(s); exact options are hard-coded, except for linux
        standalone.

    make
        Compile stuff.

    remake      (Requires 'pullbin compiler')
        Re-compile fbc with the one present in the root tree.

    build
        Shortcut for 'rtlib gfxlib2 compiler configure make remake',
        i.e. compile everything.

    genlist
        Generate the manifest in manifest/<target>.lst,
        based on the include/exclude patterns in
        src/contrib/tram2/manifest-pattern.ini.

    testlist
        Check whether the files specified in the manifest exist physically.
        Missing files will be reported (but not files that are not listed).

    package
        Put everything in an archive ready for uploading.

    installer
        Build the Windows installer.

    If no options are specified, tram will do nothing.

--------------------------------------------------------------------------------

All-in-one, from zero to release package:

    The resulting packages (.tar.lzma) are placed in the parent directory of
    the FreeBASIC/ tree.

    Command-lines to copy in binaries/libs, build everything, generate a new
    manifest and create the package based on that manifest:

    linux -> linux:
        $ ./tram2 build genlist package
        $ ./tram2 build clean

    linux -> linux standalone:
        $ ./tram2 standalone pullbin build genlist package
        $ ./tram2 standalone pullbin build clean

    win32 -> dos:
        $ tram2 dos pullbin build genlist package
        $ tram2 dos pullbin build clean

    win32 -> win32:
        $ tram2 pullbin genimplibs build genlist package installer
        $ tram2 pullbin genimplibs build clean

Manifest generation:

    Since manifests are in SVN you don't always need this, but it's important to
    update the manifests after files were added/removed from the code base.
    This implies all needed binaries/libraries are present in the tree.
    Make sure to check the new manifest.

    linux -> linux:             $ ./tram2 genlist
    linux -> linux standalone:  $ ./tram2 standalone genlist
    win32 -> dos:               $ tram2 dos genlist
    win32 -> win32:             $ tram2 genlist

Testing the FreeBASIC/ tree against manifests:
    linux -> linux:             $ ./tram2 testlist
    linux -> linux standalone:  $ ./tram2 standalone testlist
    win32 -> dos:               $ tram2 dos testlist
    win32 -> win32:             $ tram2 testlist

--------------------------------------------------------------------------------

Needed stuff (paths can be changed in the source code) & how to setup:

all <target>'s:
    * Working <target> FreeBASIC, defaults:
        dos:    C:/FreeBASIC-dos
        linux:  ~/FreeBASIC
        win32:  C:/FreeBASIC

    * Previous <target> FreeBASIC release, defaults:
      (only needed for standalone)
        dos:    C:/FreeBASIC-dos-0.20
        linux:  ~/FreeBASIC-0.20-standalone
        win32:  C:/FreeBASIC-0.20

dos:
    * DJGPP (GCC, binutils, etc, for DOS), default: C:/djgpp

        Download from the homepage:

            http://www.delorie.com/pub/djgpp/current/v2/djdev203.zip        (core)
            http://www.delorie.com/pub/djgpp/current/v2gnu/bnu219b.zip      (binutils 2.19 binaries)
            http://www.delorie.com/pub/djgpp/current/v2gnu/bnu219a.zip      (libiberty, BFD headers, ..)
            http://www.delorie.com/pub/djgpp/current/v2gnu/gcc442b.zip      (gcc 4.4.2 binaries)
            http://www.delorie.com/pub/djgpp/current/v2gnu/gdb611b.zip      (gdb 6.1.1 binaries)
            http://www.delorie.com/pub/djgpp/current/v2gnu/gpp442b.zip      (gpp (g++) 4.4.2 binaries)

        or from http://djgpp.cybermirror.org/current.

        Extract into C:\djgpp, so you end up with e.g. C:\djgpp\bin\gcc.exe.

        Add environment variable:
            DJGPP   =   C:\djgpp\djgpp.env

        Copy/rename
            C:\djgpp\lib\gcc\djgpp\4.42\libsupcxx.a
        to
            C:\djgpp\lib\gcc\djgpp\4.42\libsupcx.a
        (fbc expects that, some 8.3 filename issue)

        Get stdint.h (rtlib needs it) from DJGPP's CVS:
            http://www.delorie.com/bin/cvsweb.cgi/djgpp/
        goes into C:/djgpp/include

linux:
    * Several -dev packages are required that are not normally installed,
      especially for the gfxlib.

linux standalone:
    * Download recent binutils sources, e.g. binutils-2.20.51.
      Build it and install it on your system, overwriting your current tools.
      These binutils will have less shared library dependencies.
      This will also avoid issues regarding libbfd.

        Ubuntu has binutils etc in /usr, while binutils default prefix is
        /usr/local, so use /usr as prefix.

        $ cd ~/binutils-2.20.51
        $ ./configure --prefix=/usr --disable-shared --disable-nls
        $ make
        $ cd bfd      ; sudo make install-strip; cd ..
        $ cd binutils ; sudo make install-strip; cd ..
        $ cd gas      ; sudo make install-strip; cd ..
        $ cd gprof    ; sudo make install-strip; cd ..
        $ cd ld       ; sudo make install-strip; cd ..
        $ cd libiberty; sudo make install      ; cd ..
        $ cd opcodes  ; sudo make install-strip; cd ..

win32:
    * With MinGW 5.1.6 and TDM GCC 4.4.1:

        Download from http://sourceforge.net/downloads/mingw/

            binutils-2.19.1-mingw32-bin.tar.gz
            mingwrt-3.17-mingw32-dev.tar.gz
            mingwrt-3.17-mingw32-dll.tar.gz
            w32api-3.14-mingw32-dev.tar.gz
            make-3.81-20090914-mingw32-bin.tar.gz
            gdb-6.8-mingw-3.tar.bz2                 (for gdb.exe)
            gettext-0.17-1-mingw32-dev.tar.lzma     (for libintl.a)

        And from http://sourceforge.net/downloads/tdm-gcc/

            gcc-4.4.1-tdm-2-core.tar.gz
            gcc-4.4.1-tdm-2-g++.tar.gz

    * With current MinGW (GCC 4.5.0):

            Download from http://sourceforge.net/downloads/mingw/

                binutils-2.20.1-2-mingw32-bin.tar.gz
                gcc-c++-4.5.0-1-mingw32-bin.tar.lzma
                gcc-core-4.5.0-1-mingw32-bin.tar.lzma
                libgmp-5.0.1-1-mingw32-dll-10.tar.lzma
                libmpc-0.8.1-1-mingw32-dll-2.tar.lzma
                libmpfr-2.4.1-1-mingw32-dll-1.tar.lzma
                make-3.81-20090914-mingw32-bin.tar.gz
                mingwrt-3.18-mingw32-dev.tar.gz
                mingwrt-3.18-mingw32-dll.tar.gz
                w32api-3.14-mingw32-dev.tar.gz

            Download & build current binutils snapshot, e.g.  binutils-2.20.51,
            in order to replace MinGW's binutils-2.20.1, because those contain
            an 'as' which generates bad code with fbc's Intel-syntax asm output.

            Note: the libbfd built here does not depend on libintl.a, so the
            -l intl can be removed from src/compiler/Makefile.in, aswell as
            libintl.a from src/contrib/tram2/binaries-win32.ini.
            Besides that, the compiler probably can't use this directly through
            the FB headers (as in 'make FB_BFD=1 BFD_VER=2.20'), because there
            are no bfd 2.20 headers for FB yet. It'll work with the normal build
            (as in 'make', which uses the C bfd wrapper).

                $ cd /c/binutils-2.20.51
                $ ./configure --prefix=C:/MinGW --disable-shared --disable-nls
                $ make
                $ cd bfd      ; make install-strip; cd ..
                $ cd binutils ; make install-strip; cd ..
                $ cd gas      ; make install-strip; cd ..
                $ cd gprof    ; make install-strip; cd ..
                $ cd ld       ; make install-strip; cd ..
                $ cd libiberty; make install      ; cd ..
                $ cd opcodes  ; make install-strip; cd ..

            Download & build current GDB snapshot, e.g. gdb-7.1.tar.bz2, in
            order to avoid the GDB from MinGW because it depends on
            libexpat-1.dll. That way we avoid having to distribute the DLL in
            FreeBASIC/bin/win32.
                $ cd /c/gdb-7.1.50.20100613
                $ ./configure --disable-gdbmi --without-expat --without-python
                $ make
                $ cp gdb/gdb.exe C:/MinGW/bin/gdb.exe
                $ strip C:/MinGW/bin/gdb.exe

    * NSIS (for the win32 installer), default: C:/NSIS
        Download from http://nsis.sourceforge.net/Download

    * ddraw.h & dinput.h in C:/MinGW/include
      (win32 DirectX headers needed to compile gfxlib2)

