TRAM 2 - Testing Release Archive Maker

This tool can build fbc/rtlib/gfxlib, copy in binaries & libraries from
MinGW/DJGPP or the previous FB release, package everything into archives,
build the Windows installer, and more. Everything automated, so it doesn't have
to be done manually.

The win32 version builds for either win32 or dos, the linux version builds for
linux (could easily build for all unix-like targets).

Notes:
* tram isn't smart, it just executes a bunch of steps.
* Wrong files in the code base won't stop tram.
* Only one tram can work in a code base at once, otherwise they would overwrite
  each-other's fbc executables and/or other things in the code base.
* You may want to avoid running tram in your main stable FreeBASIC installation,
  because tram may mess it up.
* No SPACE's in paths please, makefiles don't handle it, so tram doesn't either.
* All files for/in the DOS package should probably use the 8.3 filename format.
  Anyways, not all do.

Usage:
    cd src/contrib/tram2
    make
    ./tram2 [options]

tram will cd ../../.. to work in the FreeBASIC root directory.

Options:
    dos, linux, win32
        Enables this target, instead of defaulting to the host.
        (Note: currently only the 'dos' option is useful)

    standalone
        Needed to build linux-standalone instead of linux.
        (win32/dos: standalone is enabled by default already)

    clean
        Perform the clean-up versions of each step.

    pullbin
        Copy in binaries & libraries from MinGW/DJGPP/the system & the previous
        FB release. The binaries-<target>.ini files contain the lists.

    genimplibs  (win32 only)
        Use the src/contrib/genimplibs tool to generate all import libraries.

    rtlib, gfxlib2, compiler
        What to configure/make.

    configure
        Run configure script(s); exact options are hard-coded.

    make
        Compile stuff.

    remake
        Re-compile fbc with the one present in the root tree.

    build
        Shortcut for 'rtlib gfxlib2 compiler configure make remake',
        i.e. compile everything.

    manifest
        Generate manifest/<target>.lst, based on the include/exclude patterns
        in src/contrib/tram2/manifest-pattern.ini.

    archive
        Put everything in an archive ready for uploading.

    installer
        Build the Windows installer.

    source
        Create a source code archive (uses svn export).

    If no options are specified, tram will do nothing.

--------------------------------------------------------------------------------

All-in-one, from zero to release archive:

    The resulting archives (.tar.lzma) are placed in the parent directory of
    the FreeBASIC/ tree. You can easily see differences between the generated
    manifest and your SVN working base.

    linux -> linux:
        $ ./tram2 build manifest archive
        $ ./tram2 build clean

    linux -> linux standalone:
        $ ./tram2 standalone pullbin build manifest archive
        $ ./tram2 standalone pullbin build clean

    win32 -> dos:
        $ tram2 dos pullbin build manifest archive
        $ tram2 dos pullbin build clean

    win32 -> win32:
        $ tram2 pullbin genimplibs build manifest archive installer
        $ tram2 pullbin genimplibs build clean

--------------------------------------------------------------------------------

Needed stuff (paths can be changed in the source code) & how to setup:

all <target>'s:
    * Working <target> FreeBASIC, defaults:
        dos:    C:/FreeBASIC-dos
        linux:  ~/FreeBASIC
        win32:  C:/FreeBASIC

    * Previous <target> FreeBASIC release, defaults:
      (only needed for standalone)
        dos:    C:/FreeBASIC-dos-0.20
        linux:  ~/FreeBASIC-0.20-standalone
        win32:  C:/FreeBASIC-0.20

dos:
    * DJGPP 2.03/current packages with djdev204.zip from DJGPP 204/beta, default: C:/DJGPP
        Download:

            http://www.delorie.com/pub/djgpp/beta/v2/djdev204.zip       (core)
            http://www.delorie.com/pub/djgpp/current/v2gnu/bnu219b.zip     (binutils 2.19 binaries)
            http://www.delorie.com/pub/djgpp/current/v2gnu/bnu219a.zip     (binutils additional stuff: libiberty, BFD headers, ..)
            http://www.delorie.com/pub/djgpp/current/v2gnu/gcc442b.zip     (gcc 4.4.2 binaries)
            http://www.delorie.com/pub/djgpp/current/v2gnu/gdb611b.zip     (gdb 6.1.1 binaries)
            http://www.delorie.com/pub/djgpp/current/v2gnu/gpp442b.zip     (g++ 4.4.2 binaries)

        Add environment variable:
            DJGPP   =   C:\DJGPP\djgpp.env

        Copy/rename
            C:\DJGPP\lib\gcc\djgpp\4.42\libsupcxx.a
        to
            C:\DJGPP\lib\gcc\djgpp\4.42\libsupcx.a
        (fbc expects that, probably some 8.3 filename issue)

linux standalone:
    * Download recent binutils sources, e.g. binutils-2.20.51.
      Build it and install it on your system, overwriting your current tools.
      These binutils will have less shared library dependencies.
      This will also avoid issues regarding libbfd.

        Ubuntu has binutils etc in /usr, while binutils default prefix is
        /usr/local, so use /usr as prefix.

        $ cd ~/binutils-2.20.51
        $ ./configure --prefix=/usr --disable-shared --disable-nls
        $ make
        $ cd bfd      ; sudo make install-strip; cd ..
        $ cd binutils ; sudo make install-strip; cd ..
        $ cd gas      ; sudo make install-strip; cd ..
        $ cd gprof    ; sudo make install-strip; cd ..
        $ cd ld       ; sudo make install-strip; cd ..
        $ cd libiberty; sudo make install      ; cd ..
        $ cd opcodes  ; sudo make install-strip; cd ..

win32:
    * With TDM-GCC 4.4.1, binutils 2.19

        Download from http://sourceforge.net/downloads/mingw/

            binutils-2.19.1-mingw32-bin.tar.gz
            mingwrt-3.17-mingw32-dev.tar.gz
            mingwrt-3.17-mingw32-dll.tar.gz
            w32api-3.14-mingw32-dev.tar.gz
            make-3.81-20090914-mingw32-bin.tar.gz
            gdb-6.8-mingw-3.tar.bz2                 (for gdb.exe)
            gettext-0.17-1-mingw32-dev.tar.lzma     (for libintl.a)

        And from http://sourceforge.net/downloads/tdm-gcc/

            gcc-4.4.1-tdm-2-core.tar.gz
            gcc-4.4.1-tdm-2-g++.tar.gz


    * With MinGW GCC 4.5.0, binutils 2.20.51

        With GCC 4.5.0, fbc would need to link in libgcc_eh with libsupc++.
        (That's already done on linux, probably it's just MinGW catching up)

        * Download current MinGW (GCC 4.5.0) from http://sourceforge.net/downloads/mingw/

            binutils-2.20.51-1-mingw32-bin.tar.lzma
            gcc-c++-4.5.0-1-mingw32-bin.tar.lzma
            gcc-core-4.5.0-1-mingw32-bin.tar.lzma
            libgmp-5.0.1-1-mingw32-dll-10.tar.lzma
            libmpc-0.8.1-1-mingw32-dll-2.tar.lzma
            libmpfr-2.4.1-1-mingw32-dll-1.tar.lzma
            mingwrt-3.18-mingw32-dev.tar.gz
            mingwrt-3.18-mingw32-dll.tar.gz
            w32api-3.14-mingw32-dev.tar.gz

        * Download & build current binutils snapshot, e.g. binutils-2.20.51,
          in order to replace MinGW's binutils-2.20.51.
          (The libbfd from MinGW depends on libintl & libiconv, with libiconv
          being 1 MB, thus increasing fbc.exe's size by a lot. The libbfd
          built here doesn't have these dependencies.)

            $ cd /c/binutils-2.20.51
            $ ./configure --prefix=C:/MinGW --disable-shared --disable-nls
            $ make
            $ cd bfd      ; make install-strip; cd ..
            $ cd binutils ; make install-strip; cd ..
            $ cd gas      ; make install-strip; cd ..
            $ cd gprof    ; make install-strip; cd ..
            $ cd ld       ; make install-strip; cd ..
            $ cd libiberty; make install      ; cd ..
            $ cd opcodes  ; make install-strip; cd ..

        * Download & build current GDB snapshot, e.g. gdb-7.1.tar.bz2, in
          order to avoid the GDB from MinGW because it depends on
          libexpat-1.dll. That way we can avoid having to distribute the DLL
          in FreeBASIC/bin/win32.
            $ cd /c/gdb-7.1.50.20100613
            $ ./configure --disable-gdbmi --without-expat --without-python
            $ make
            $ cp gdb/gdb.exe C:/MinGW/bin/gdb.exe
            $ strip C:/MinGW/bin/gdb.exe

    * Download libgdsl sources & compile it, put it into C:/MinGW/lib.
        (Replacement for the libgdsl from FreeBASIC-0.20, which was apparently broken)

    * NSIS (for the win32 installer), default: C:/NSIS
        Download from http://nsis.sourceforge.net/Download

    * ddraw.h & dinput.h in C:/MinGW/include
      (win32 DirectX headers needed to compile gfxlib2)
