
[ ] full debug support
    - add dynamic arrays - couldn't get GDB to use Fortran-like arrays
    - each overloaded function will show the locals of *ALL* functions
    - add bounds checking to all kinds of arrays - use IIF() or better: a new AST/IR/EMIT OP
    - add null pointer checking - IIF() too?

[ ] AndAlso and OrElse, short-circuit versions of And and Or

[ ] add the concatenation operator (&) as in VB/... - any type must be implicitly converted to string

[ ] add fix-len and zstring * support to arrays args passed by descriptor

[ ] EMIT:
    - optimize load after store
    - re-ordering optimization if target cpu is +586

[ ] named field initializers: ( "foo" => bar, "udt" => ( 1, { 2, 3 }, 4 ) )
    - all fields initialized must be named as a special parser routine will have to be used,
      that will keep track of what wasn't initialized to fill 'em with 0's - static only, locals
      are already cleared

*** *** *** *** ***
[ ] inline functions
    - better than macros as they can be "turned off" when debugged

[ ] classes
    - *MUST* follow the GCC 3.x ABI to make it easier to reuse C++ libs compiled by GCC
    - Java/Php5-ish syntax: CLASS EXTENDS IMPLEMENTS THROWS
    - single inheritance, plus interfaces
    - exceptions - with unwind support
    - operator overloading
    - pure virtual methods
    - down casting
    - name space
    - static constructors and destructors
    - some support for RTTI

*** future ***
[ ] unreachable code removal

[ ] use a DAG for common sub-expr opt (don't mess up w/ FPU??)

	a = b + c
	b = a - d
	c = b + c
	d = a - d


    v2() = v1(_B) + v0(_C)
 v3(_A) := v2()
    v6() = v5(_A) - v4(_D)
 v7(_B) := v6()
   v10() = v9(_B) + v8(_C)
v11(_C) := v10()
   v14() = v13(_A) - v12(_D)
v15(_D) := v14()

	mov 	eax, b
	Add 	eax, c
	mov 	a, eax
	mov 	eax, a
	Sub 	eax, d
	mov 	b, eax
	mov 	eax, b
	Add 	eax, c
	mov 	c, eax
	mov 	eax, a
	Sub 	eax, d
	mov 	d, eax

|v1|v0|op:2-->|v2
|op:1-->|v3
|v5|op:3-->|v6|v14
|op:1-->|v7|v15
|op:2-->|v10
|op:1-->|v11

	mov	eax, b
	Add	eax, c
	mov	a, eax
	Sub	eax, d
	mov	b, eax
	mov	d, eax
	Add	eax, c
	mov	c, eax
