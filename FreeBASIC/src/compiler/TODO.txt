[ ] "= any" initializer should be allowed with REDIM or arrays
    passed by descriptor to functions will be always cleared

[ ] err:
    - to fun_name and mod_name to work, the current one must be
      saved at procBegin and restore at procEnd

[ ] SCOPE..END SCOPE:
    - can't optimize multiple MEM_CLEAR's if there's any branch to
      one of them
    - error handlers should be restored too (or not allowed at all)

[ ] EXTERN ... END EXTERN
    - C++ mangling needs CONST's to be handled in param attributes:
      - refs and ptrs to constants can't be added unless _POINTER is added
        as a new symbol like with BITFIELD? that will need *a lot* of changes..

[ ] disallow:
	dim foo as foo | enum foo
	.. and later ..
	const|dim|function|etc foo.bar

[ ] when creating static libraries, emit a LD script file with the #inclib's found,
    when linking, check for the scripts (libfoo_a.libs.x or such) and include the files
    listed (will have to check the same dirs as LD does, including LD_LIBRARY_PATH and
    the ones defined in the .x scripts)
    - can't modify LD because adding new libraries found on .drectiv or such sections
      would put them outside the GROUP, causing circular reference errors
    - for the same reason, the list file can't be a LD script to be passed directly,
      the libs must be passed in the cmd-line, between -( and -)
    - libbfd could be used to load add our own sections to object files
      - but then the libraries would have to be opened twice (by fbc and later by LD),
      slowing down linking
      - libbfd is over 600k, fbc will become twice as big just to add an ordinary feature
    - that won't work with object files or when passing more than a single bas file if
      the other ones #include different libraries
      - a foo.o.liblist or such will be needed then, should be created only when
        #inclib's are found
    - a libfoo.a.liblist for libraries
    - #libpath's must be added to .liblist too and checked also

[ ] fbmain - explicit main function
    - must check if anything but the init/end labels were defined already inside
      the implicit main() or the mod-level constructor
    - must delete proto and all ast nodes
    - must create as CDECL but it doesn't have to be obligatory
    - must support RETURN or FUNCTION = to set the result
    - must check the params if passed byval and if they have the right types

[ ] add the ... subscript when initializing array so
    "dim array(0 to ...) = {1, 2, 3, 4}" could be allowed

[ ] forward type defs used in arguments of function ptr type defs shouldn't be an error
    - the prototype mangling must be updated when that occurs, but how to do that fast
      enough? the args would have to be linked to parent (the prototype), but updating
      the mangled alias on every argument can be slow..

[ ] add the wstring type:
    - fb_ConsoleInput() won't call fb_DevScrnInit_ReadWstr( ), so an input to a
      wstring won't work.. to not add more bloat, the compiler should have to
      call fb_ConsoleInput(there_is_any_wstr_argument), not so simple..
    - auto-convert literal strings to w- or z- on assignments, depending on the l-hand
      side type
    - fix the !!!FIXME!!!'s and write the !!!WRITEME!!!'s in the rtlib

[ ] swap of zstring's and var-len string's is not working?? or that's the behaviour..

[ ] @static_array(const) won't become an OFFSET, not allowing initializations..

[ ] passing a temporary string to a zstring ptr should not make yet-another temporary
    assignment in hStrParamToPtrArg(), just a pointer copy that later should be
    strDelete()'d

*** *** *** *** ***
[ ] all functions returning STRING should actually return the FBSTRING
    structure (not a pointer to one):
    - compiler has to allocate the descriptor as it does now following the gcc ABI
    - any function in the run-time library returning strings will have to be
      modified (chicken-egg problem)
    - no more run-time allocation of temp descriptors (better with threads)
    - no more STR_LOCK's (ditto)
    - str_delete won't check for temp descriptors anymore

[ ] fixed-len strings compatible with QB:
    - no null-term, temporaries always created when passing to functions
    - probably will need their own assign and concat functions

[ ] "byval as string" arguments should make a temp copy (including descriptor)
    of the param passed:
    - must pass (?) the address of the temp descriptor, not the string data, what
      will break *all* functions assuming the latter - they would have to be
      declared as zstring ptr, what will need more changes in users' code, because
      the non-implicit pointer deref

[ ] remove fb_init:
    - remove all globals
    - use getters and setters that should do the initializing when needed
    - FPU won't be set to 64-bit internally in x86..

*** *** *** *** ***
[ ] .stabn can't have args > 65535 (ie: line numbers)
    - only switching to DWARF2 (ie: too complex) would fix that, let GCC do it..

[ ] add support for functions returning references (reuse "BYREF"), so those can
    be automatically dereferenced - but *NOT* deleted, only non-local data can
    be returned by reference in C++

[ ] add fix-len and zstring * support to array args passed by descriptor

[ ] named field initializers: ( "foo" => bar, "udt" => ( 1, { 2, 3 }, 4 ) )
    - all fields initialized must be named as a special parser routine will have to be used,
      that will keep track of what wasn't initialized to fill 'em with 0's - static only,
      locals are already cleared

[ ] full debug support
    - add dynamic arrays - couldn't get GDB to use Fortran-like arrays
    - each overloaded function will show the locals of *ALL* functions

[ ] AndAlso and OrElse, short-circuit versions of And and Or
    - pay attention to register spills if functions or complex expressions are
      used in left or right sides

[ ] inline functions
    - better than macros as they can be "turned off" when debugged
    - too hard to be added now due the register spills, IR must handle inter blocks and
      keep track of live vregs

[ ] classes
    - *MUST* follow the GCC 3.x ABI to make it easier to reuse C++ libs compiled by GCC
    - Java/Php5-ish syntax: CLASS INTERFACE EXTENDS IMPLEMENTS THROWS ABSTRACT
    - must support forward references for any kind of symbol, so classes can't be stored
      directly to AST
      - how to deal with "foo(expr)"? it could be an array or a function call..
      - keeping everything in a parser/token tree will allow templates to be added later
      - class shouldn't be emitted unless referenced
        - function bodies defined outside classes follow the private/public proc rules
    - single inheritance, plus interfaces
    - exceptions - with stack unwind support
    - operator overloading
    - properties
    - pure virtual methods
    - down casting
    - static constructors and destructors (including with non-constant args inside scope blocks)
    - some support for RTTI


