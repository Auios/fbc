/'************************************************************************
 *                                                                       *
 * Open Dynamics Engine, Copyright (C) 2001,2002 Russell L. Smith.       *
 * All rights reserved.  Email: russ@q12.org   Web: www.q12.org          *
 *                                                                       *
 * Ported to FreeBASIC by D.J.Peters (Joshy) http: www.freebasic.eu      *
 *                                                                       *
 ************************************************************************'/
#include "crt.bi"
#include "ode/ode.bi"
#include "drawstuff.bi"

' Our heightfield geom
dim shared as dGeomID gheight

' Heightfield dimensions
#define HFIELD_WSTEP 16' Vertex count along edge >= 2
#define HFIELD_DSTEP 32

#define HFIELD_WIDTH  8.0
#define HFIELD_DEPTH  8.0

#define HFIELD_WSAMP ( HFIELD_WIDTH / ( HFIELD_WSTEP-1 ) )
#define HFIELD_DSAMP ( HFIELD_DEPTH / ( HFIELD_DSTEP-1 ) )

#ifdef dDOUBLE
# define dsDrawBox dsDrawBoxD
# define dsDrawSphere dsDrawSphereD
# define dsDrawCylinder dsDrawCylinderD
# define dsDrawCapsule dsDrawCapsuleD
# define dsDrawConvex dsDrawConvexD
# define dsDrawTriangle dsDrawTriangleD
#endif

' Convex Object
' planes for a cube
dim shared as dReal planes(23)= { _
    1.0f, 0.0f, 0.0f,0.25f, _
    0.0f, 1.0f, 0.0f,0.25f, _
    0.0f, 0.0f, 1.0f,0.25f, _
    0.0f, 0.0f,-1.0f,0.25f, _
    0.0f,-1.0f, 0.0f,0.25f, _
   -1.0f, 0.0f, 0.0f,0.25f }
    /'
    1.0f ,0.0f ,0.0f ,2.0f,
    0.0f ,1.0f ,0.0f ,1.0f,
    0.0f ,0.0f ,1.0f ,1.0f,
    0.0f ,0.0f ,-1.0f,1.0f,
    0.0f ,-1.0f,0.0f ,1.0f,
    -1.0f,0.0f ,0.0f ,0.0f
    '/

const as integer planecount=6

' points for a cube
dim shared as dReal points(23)= { _
    0.25f, 0.25f, 0.25f, _ ' point 0
   -0.25f, 0.25f, 0.25f, _ ' point 1
    0.25f,-0.25f, 0.25f, _ ' point 2
   -0.25f,-0.25f, 0.25f, _ ' point 3
    0.25f, 0.25f,-0.25f, _ ' point 4
   -0.25f, 0.25f,-0.25f, _ ' point 5
    0.25f,-0.25f,-0.25f, _ ' point 6
   -0.25f,-0.25f,-0.25f}   ' point 7

const as integer pointcount=8
'Polygons for a cube (6 squares)
dim shared as integer polygons(29) = { _
    4,0,2,6,4, _ ' positive X
    4,1,0,4,5, _ ' positive Y
    4,0,1,3,2, _ ' positive Z
    4,3,1,5,7, _ ' negative X
    4,2,3,7,6, _ ' negative Y
    4,5,4,6,7}  ' negative Z
  
' Convex Object

' select correct drawing functions
#ifdef dDOUBLE
#define dsDrawBox dsDrawBoxD
#define dsDrawSphere dsDrawSphereD
#define dsDrawCylinder dsDrawCylinderD
#define dsDrawCapsule dsDrawCapsuleD
#define dsDrawConvex dsDrawConvexD
#endif

' some constants
#define MAXOBJ 300     ' max number of objects
#define DENSITY 5.0    ' density of all objects
#define GPB 3          ' maximum number of geometries per body
#define MAX_CONTACTS 8 ' maximum number of contact points per body

' dynamics and collision objects
type MyObject 
  as dBodyID body        ' the body
  as dGeomID geom(GPB-1) ' geometries representing this body
  ' Trimesh only - double buffered matrices for 'last transform' setup
  as dReal matrix_dblbuff( 16 * 2-1)
  as integer last_matrix_index
end type

dim shared as integer num     = 0 ' number of objects in simulation
dim shared as integer nextobj = 0 ' next object to recycle if num==NUM
dim shared as dWorldID world
dim shared as dSpaceID world_space
dim shared as MyObject obj(MAXOBJ-1)
dim shared as dJointGroupID contactgroup

dim shared as integer selected      =  0 ' selected object
dim shared as integer show_aabb     =  0 ' show geom AABBs?
dim shared as integer show_contacts =  0 ' show contact points?
dim shared as integer random_pos    =  1 ' drop objects from random position?
dim shared as integer write_world   =  0

' Bunny mesh ripped from Opcode
const as integer VertexCount = 453
const as integer IndexCount  = 902 * 3

type dVector3R
  as dReal v(2)
end type

dim shared as single Vertices(VertexCount * 3-1) = { _
	-0.334392,0.133007,0.062259,_
	-0.350189,0.150354,-0.147769,_
	-0.234201,0.343811,-0.174307,_
	-0.200259,0.285207,0.093749,_
	0.003520,0.475208,-0.159365,_
	0.001856,0.419203,0.098582,_
	-0.252802,0.093666,0.237538,_
	-0.162901,0.237984,0.206905,_
	0.000865,0.318141,0.235370,_
	-0.414624,0.164083,-0.278254,_
	-0.262213,0.357334,-0.293246,_
	0.004628,0.482694,-0.338626,_
	-0.402162,0.133528,-0.443247,_
	-0.243781,0.324275,-0.436763,_
	0.005293,0.437592,-0.458332,_
	-0.339884,-0.041150,-0.668211,_
	-0.248382,0.255825,-0.627493,_
	0.006261,0.376103,-0.631506,_
	-0.216201,-0.126776,-0.886936,_
	-0.171075,0.011544,-0.881386,_
	-0.181074,0.098223,-0.814779,_
	-0.119891,0.218786,-0.760153,_
	-0.078895,0.276780,-0.739281,_
	0.006801,0.310959,-0.735661,_
	-0.168842,0.102387,-0.920381,_
	-0.104072,0.177278,-0.952530,_
	-0.129704,0.211848,-0.836678,_
	-0.099875,0.310931,-0.799381,_
	0.007237,0.361687,-0.794439,_
	-0.077913,0.258753,-0.921640,_
	0.007957,0.282241,-0.931680,_
	-0.252222,-0.550401,-0.557810,_
	-0.267633,-0.603419,-0.655209,_
	-0.446838,-0.118517,-0.466159,_
	-0.459488,-0.093017,-0.311341,_
	-0.370645,-0.100108,-0.159454,_
	-0.371984,-0.091991,-0.011044,_
	-0.328945,-0.098269,0.088659,_
	-0.282452,-0.018862,0.311501,_
	-0.352403,-0.131341,0.144902,_
	-0.364126,-0.200299,0.202388,_
	-0.283965,-0.231869,0.023668,_
	-0.298943,-0.155218,0.369716,_
	-0.293787,-0.121856,0.419097,_
	-0.290163,-0.290797,0.107824,_
	-0.264165,-0.272849,0.036347,_
	-0.228567,-0.372573,0.290309,_
	-0.190431,-0.286997,0.421917,_
	-0.191039,-0.240973,0.507118,_
	-0.287272,-0.276431,-0.065444,_
	-0.295675,-0.280818,-0.174200,_
	-0.399537,-0.313131,-0.376167,_
	-0.392666,-0.488581,-0.427494,_
	-0.331669,-0.570185,-0.466054,_
	-0.282290,-0.618140,-0.589220,_
	-0.374238,-0.594882,-0.323298,_
	-0.381071,-0.629723,-0.350777,_
	-0.382112,-0.624060,-0.221577,_
	-0.272701,-0.566522,0.259157,_
	-0.256702,-0.663406,0.286079,_
	-0.280948,-0.428359,0.055790,_
	-0.184974,-0.508894,0.326265,_
	-0.279971,-0.526918,0.395319,_
	-0.282599,-0.663393,0.412411,_
	-0.188329,-0.475093,0.417954,_
	-0.263384,-0.663396,0.466604,_
	-0.209063,-0.663393,0.509344,_
	-0.002044,-0.319624,0.553078,_
	-0.001266,-0.371260,0.413296,_
	-0.219753,-0.339762,-0.040921,_
	-0.256986,-0.282511,-0.006349,_
	-0.271706,-0.260881,0.001764,_
	-0.091191,-0.419184,-0.045912,_
	-0.114944,-0.429752,-0.124739,_
	-0.113970,-0.382987,-0.188540,_
	-0.243012,-0.464942,-0.242850,_
	-0.314815,-0.505402,-0.324768,_
	0.002774,-0.437526,-0.262766,_
	-0.072625,-0.417748,-0.221440,_
	-0.160112,-0.476932,-0.293450,_
	0.003859,-0.453425,-0.443916,_
	-0.120363,-0.581567,-0.438689,_
	-0.091499,-0.584191,-0.294511,_
	-0.116469,-0.599861,-0.188308,_
	-0.208032,-0.513640,-0.134649,_
	-0.235749,-0.610017,-0.040939,_
	-0.344916,-0.622487,-0.085380,_
	-0.336401,-0.531864,-0.212298,_
	0.001961,-0.459550,-0.135547,_
	-0.058296,-0.430536,-0.043440,_
	0.001378,-0.449511,-0.037762,_
	-0.130135,-0.510222,0.079144,_
	0.000142,-0.477549,0.157064,_
	-0.114284,-0.453206,0.304397,_
	-0.000592,-0.443558,0.285401,_
	-0.056215,-0.663402,0.326073,_
	-0.026248,-0.568010,0.273318,_
	-0.049261,-0.531064,0.389854,_
	-0.127096,-0.663398,0.479316,_
	-0.058384,-0.663401,0.372891,_
	-0.303961,0.054199,0.625921,_
	-0.268594,0.193403,0.502766,_
	-0.277159,0.126123,0.443289,_
	-0.287605,-0.005722,0.531844,_
	-0.231396,-0.121289,0.587387,_
	-0.253475,-0.081797,0.756541,_
	-0.195164,-0.137969,0.728011,_
	-0.167673,-0.156573,0.609388,_
	-0.145917,-0.169029,0.697600,_
	-0.077776,-0.214247,0.622586,_
	-0.076873,-0.214971,0.696301,_
	-0.002341,-0.233135,0.622859,_
	-0.002730,-0.213526,0.691267,_
	-0.003136,-0.192628,0.762731,_
	-0.056136,-0.201222,0.763806,_
	-0.114589,-0.166192,0.770723,_
	-0.155145,-0.129632,0.791738,_
	-0.183611,-0.058705,0.847012,_
	-0.165562,0.001980,0.833386,_
	-0.220084,0.019914,0.768935,_
	-0.255730,0.090306,0.670782,_
	-0.255594,0.113833,0.663389,_
	-0.226380,0.212655,0.617740,_
	-0.003367,-0.195342,0.799680,_
	-0.029743,-0.210508,0.827180,_
	-0.003818,-0.194783,0.873636,_
	-0.004116,-0.157907,0.931268,_
	-0.031280,-0.184555,0.889476,_
	-0.059885,-0.184448,0.841330,_
	-0.135333,-0.164332,0.878200,_
	-0.085574,-0.170948,0.925547,_
	-0.163833,-0.094170,0.897114,_
	-0.138444,-0.104250,0.945975,_
	-0.083497,-0.084934,0.979607,_
	-0.004433,-0.146642,0.985872,_
	-0.150715,0.032650,0.884111,_
	-0.135892,-0.035520,0.945455,_
	-0.070612,0.036849,0.975733,_
	-0.004458,-0.042526,1.015670,_
	-0.004249,0.046042,1.003240,_
	-0.086969,0.133224,0.947633,_
	-0.003873,0.161605,0.970499,_
	-0.125544,0.140012,0.917678,_
	-0.125651,0.250246,0.857602,_
	-0.003127,0.284070,0.878870,_
	-0.159174,0.125726,0.888878,_
	-0.183807,0.196970,0.844480,_
	-0.159890,0.291736,0.732480,_
	-0.199495,0.207230,0.779864,_
	-0.206182,0.164608,0.693257,_
	-0.186315,0.160689,0.817193,_
	-0.192827,0.166706,0.782271,_
	-0.175112,0.110008,0.860621,_
	-0.161022,0.057420,0.855111,_
	-0.172319,0.036155,0.816189,_
	-0.190318,0.064083,0.760605,_
	-0.195072,0.129179,0.731104,_
	-0.203126,0.410287,0.680536,_
	-0.216677,0.309274,0.642272,_
	-0.241515,0.311485,0.587832,_
	-0.002209,0.366663,0.749413,_
	-0.088230,0.396265,0.678635,_
	-0.170147,0.109517,0.840784,_
	-0.160521,0.067766,0.830650,_
	-0.181546,0.139805,0.812146,_
	-0.180495,0.148568,0.776087,_
	-0.180255,0.129125,0.744192,_
	-0.186298,0.078308,0.769352,_
	-0.167622,0.060539,0.806675,_
	-0.189876,0.102760,0.802582,_
	-0.108340,0.455446,0.657174,_
	-0.241585,0.527592,0.669296,_
	-0.265676,0.513366,0.634594,_
	-0.203073,0.478550,0.581526,_
	-0.266772,0.642330,0.602061,_
	-0.216961,0.564846,0.535435,_
	-0.202210,0.525495,0.475944,_
	-0.193888,0.467925,0.520606,_
	-0.265837,0.757267,0.500933,_
	-0.240306,0.653440,0.463215,_
	-0.309239,0.776868,0.304726,_
	-0.271009,0.683094,0.382018,_
	-0.312111,0.671099,0.286687,_
	-0.268791,0.624342,0.377231,_
	-0.302457,0.533996,0.360289,_
	-0.263656,0.529310,0.412564,_
	-0.282311,0.415167,0.447666,_
	-0.239201,0.442096,0.495604,_
	-0.220043,0.569026,0.445877,_
	-0.001263,0.395631,0.602029,_
	-0.057345,0.442535,0.572224,_
	-0.088927,0.506333,0.529106,_
	-0.125738,0.535076,0.612913,_
	-0.126251,0.577170,0.483159,_
	-0.149594,0.611520,0.557731,_
	-0.163188,0.660791,0.491080,_
	-0.172482,0.663387,0.415416,_
	-0.160464,0.591710,0.370659,_
	-0.156445,0.536396,0.378302,_
	-0.136496,0.444358,0.425226,_
	-0.095564,0.373768,0.473659,_
	-0.104146,0.315912,0.498104,_
	-0.000496,0.384194,0.473817,_
	-0.000183,0.297770,0.401486,_
	-0.129042,0.270145,0.434495,_
	0.000100,0.272963,0.349138,_
	-0.113060,0.236984,0.385554,_
	0.007260,0.016311,-0.883396,_
	0.007865,0.122104,-0.956137,_
	-0.032842,0.115282,-0.953252,_
	-0.089115,0.108449,-0.950317,_
	-0.047440,0.014729,-0.882756,_
	-0.104458,0.013137,-0.882070,_
	-0.086439,-0.584866,-0.608343,_
	-0.115026,-0.662605,-0.436732,_
	-0.071683,-0.665372,-0.606385,_
	-0.257884,-0.665381,-0.658052,_
	-0.272542,-0.665381,-0.592063,_
	-0.371322,-0.665382,-0.353620,_
	-0.372362,-0.665381,-0.224420,_
	-0.335166,-0.665380,-0.078623,_
	-0.225999,-0.665375,-0.038981,_
	-0.106719,-0.665374,-0.186351,_
	-0.081749,-0.665372,-0.292554,_
	0.006943,-0.091505,-0.858354,_
	0.006117,-0.280985,-0.769967,_
	0.004495,-0.502360,-0.559799,_
	-0.198638,-0.302135,-0.845816,_
	-0.237395,-0.542544,-0.587188,_
	-0.270001,-0.279489,-0.669861,_
	-0.134547,-0.119852,-0.959004,_
	-0.052088,-0.122463,-0.944549,_
	-0.124463,-0.293508,-0.899566,_
	-0.047616,-0.289643,-0.879292,_
	-0.168595,-0.529132,-0.654931,_
	-0.099793,-0.515719,-0.645873,_
	-0.186168,-0.605282,-0.724690,_
	-0.112970,-0.583097,-0.707469,_
	-0.108152,-0.665375,-0.700408,_
	-0.183019,-0.665378,-0.717630,_
	-0.349529,-0.334459,-0.511985,_
	-0.141182,-0.437705,-0.798194,_
	-0.212670,-0.448725,-0.737447,_
	-0.261111,-0.414945,-0.613835,_
	-0.077364,-0.431480,-0.778113,_
	0.005174,-0.425277,-0.651592,_
	0.089236,-0.431732,-0.777093,_
	0.271006,-0.415749,-0.610577,_
	0.223981,-0.449384,-0.734774,_
	0.153275,-0.438150,-0.796391,_
	0.358414,-0.335529,-0.507649,_
	0.193434,-0.665946,-0.715325,_
	0.118363,-0.665717,-0.699021,_
	0.123515,-0.583454,-0.706020,_
	0.196851,-0.605860,-0.722345,_
	0.109788,-0.516035,-0.644590,_
	0.178656,-0.529656,-0.652804,_
	0.061157,-0.289807,-0.878626,_
	0.138234,-0.293905,-0.897958,_
	0.066933,-0.122643,-0.943820,_
	0.149571,-0.120281,-0.957264,_
	0.280989,-0.280321,-0.666487,_
	0.246581,-0.543275,-0.584224,_
	0.211720,-0.302754,-0.843303,_
	0.086966,-0.665627,-0.291520,_
	0.110634,-0.665702,-0.185021,_
	0.228099,-0.666061,-0.036201,_
	0.337743,-0.666396,-0.074503,_
	0.376722,-0.666513,-0.219833,_
	0.377265,-0.666513,-0.349036,_
	0.281411,-0.666217,-0.588670,_
	0.267564,-0.666174,-0.654834,_
	0.080745,-0.665602,-0.605452,_
	0.122016,-0.662963,-0.435280,_
	0.095767,-0.585141,-0.607228,_
	0.118944,0.012799,-0.880702,_
	0.061944,0.014564,-0.882086,_
	0.104725,0.108156,-0.949130,_
	0.048513,0.115159,-0.952753,_
	0.112696,0.236643,0.386937,_
	0.128177,0.269757,0.436071,_
	0.102643,0.315600,0.499370,_
	0.094535,0.373481,0.474824,_
	0.136270,0.443946,0.426895,_
	0.157071,0.535923,0.380222,_
	0.161350,0.591224,0.372630,_
	0.173035,0.662865,0.417531,_
	0.162808,0.660299,0.493077,_
	0.148250,0.611070,0.559555,_
	0.125719,0.576790,0.484702,_
	0.123489,0.534699,0.614440,_
	0.087621,0.506066,0.530188,_
	0.055321,0.442365,0.572915,_
	0.219936,0.568361,0.448571,_
	0.238099,0.441375,0.498528,_
	0.281711,0.414315,0.451121,_
	0.263833,0.528513,0.415794,_
	0.303284,0.533081,0.363998,_
	0.269687,0.623528,0.380528,_
	0.314255,0.670153,0.290524,_
	0.272023,0.682273,0.385343,_
	0.311480,0.775931,0.308527,_
	0.240239,0.652714,0.466159,_
	0.265619,0.756464,0.504187,_
	0.192562,0.467341,0.522972,_
	0.201605,0.524885,0.478417,_
	0.215743,0.564193,0.538084,_
	0.264969,0.641527,0.605317,_
	0.201031,0.477940,0.584002,_
	0.263086,0.512567,0.637832,_
	0.238615,0.526867,0.672237,_
	0.105309,0.455123,0.658482,_
	0.183993,0.102195,0.804872,_
	0.161563,0.060042,0.808692,_
	0.180748,0.077754,0.771600,_
	0.175168,0.128588,0.746368,_
	0.175075,0.148030,0.778264,_
	0.175658,0.139265,0.814333,_
	0.154191,0.067291,0.832578,_
	0.163818,0.109013,0.842830,_
	0.084760,0.396004,0.679695,_
	0.238888,0.310760,0.590775,_
	0.213380,0.308625,0.644905,_
	0.199666,0.409678,0.683003,_
	0.190143,0.128597,0.733463,_
	0.184833,0.063516,0.762902,_
	0.166070,0.035644,0.818261,_
	0.154361,0.056943,0.857042,_
	0.168542,0.109489,0.862725,_
	0.187387,0.166131,0.784599,_
	0.180428,0.160135,0.819438,_
	0.201823,0.163991,0.695756,_
	0.194206,0.206635,0.782275,_
	0.155438,0.291260,0.734412,_
	0.177696,0.196424,0.846693,_
	0.152305,0.125256,0.890786,_
	0.119546,0.249876,0.859104,_
	0.118369,0.139643,0.919173,_
	0.079410,0.132973,0.948652,_
	0.062419,0.036648,0.976547,_
	0.127847,-0.035919,0.947070,_
	0.143624,0.032206,0.885913,_
	0.074888,-0.085173,0.980577,_
	0.130184,-0.104656,0.947620,_
	0.156201,-0.094653,0.899074,_
	0.077366,-0.171194,0.926545,_
	0.127722,-0.164729,0.879810,_
	0.052670,-0.184618,0.842019,_
	0.023477,-0.184638,0.889811,_
	0.022626,-0.210587,0.827500,_
	0.223089,0.211976,0.620493,_
	0.251444,0.113067,0.666494,_
	0.251419,0.089540,0.673887,_
	0.214360,0.019258,0.771595,_
	0.158999,0.001490,0.835374,_
	0.176696,-0.059249,0.849218,_
	0.148696,-0.130091,0.793599,_
	0.108290,-0.166528,0.772088,_
	0.049820,-0.201382,0.764454,_
	0.071341,-0.215195,0.697209,_
	0.073148,-0.214475,0.623510,_
	0.140502,-0.169461,0.699354,_
	0.163374,-0.157073,0.611416,_
	0.189466,-0.138550,0.730366,_
	0.247593,-0.082554,0.759610,_
	0.227468,-0.121982,0.590197,_
	0.284702,-0.006586,0.535347,_
	0.275741,0.125287,0.446676,_
	0.266650,0.192594,0.506044,_
	0.300086,0.053287,0.629620,_
	0.055450,-0.663935,0.375065,_
	0.122854,-0.664138,0.482323,_
	0.046520,-0.531571,0.391918,_
	0.024824,-0.568450,0.275106,_
	0.053855,-0.663931,0.328224,_
	0.112829,-0.453549,0.305788,_
	0.131265,-0.510617,0.080746,_
	0.061174,-0.430716,-0.042710,_
	0.341019,-0.532887,-0.208150,_
	0.347705,-0.623533,-0.081139,_
	0.238040,-0.610732,-0.038037,_
	0.211764,-0.514274,-0.132078,_
	0.120605,-0.600219,-0.186856,_
	0.096985,-0.584476,-0.293357,_
	0.127621,-0.581941,-0.437170,_
	0.165902,-0.477425,-0.291453,_
	0.077720,-0.417975,-0.220519,_
	0.320892,-0.506363,-0.320874,_
	0.248214,-0.465684,-0.239842,_
	0.118764,-0.383338,-0.187114,_
	0.118816,-0.430106,-0.123307,_
	0.094131,-0.419464,-0.044777,_
	0.274526,-0.261706,0.005110,_
	0.259842,-0.283292,-0.003185,_
	0.222861,-0.340431,-0.038210,_
	0.204445,-0.664380,0.513353,_
	0.259286,-0.664547,0.471281,_
	0.185402,-0.476020,0.421718,_
	0.279163,-0.664604,0.417328,_
	0.277157,-0.528122,0.400208,_
	0.183069,-0.509812,0.329995,_
	0.282599,-0.429210,0.059242,_
	0.254816,-0.664541,0.290687,_
	0.271436,-0.567707,0.263966,_
	0.386561,-0.625221,-0.216870,_
	0.387086,-0.630883,-0.346073,_
	0.380021,-0.596021,-0.318679,_
	0.291269,-0.619007,-0.585707,_
	0.339280,-0.571198,-0.461946,_
	0.400045,-0.489778,-0.422640,_
	0.406817,-0.314349,-0.371230,_
	0.300588,-0.281718,-0.170549,_
	0.290866,-0.277304,-0.061905,_
	0.187735,-0.241545,0.509437,_
	0.188032,-0.287569,0.424234,_
	0.227520,-0.373262,0.293102,_
	0.266526,-0.273650,0.039597,_
	0.291592,-0.291676,0.111386,_
	0.291914,-0.122741,0.422683,_
	0.297574,-0.156119,0.373368,_
	0.286603,-0.232731,0.027162,_
	0.364663,-0.201399,0.206850,_
	0.353855,-0.132408,0.149228,_
	0.282208,-0.019715,0.314960,_
	0.331187,-0.099266,0.092701,_
	0.375463,-0.093120,-0.006467,_
	0.375917,-0.101236,-0.154882,_
	0.466635,-0.094416,-0.305669,_
	0.455805,-0.119881,-0.460632,_
	0.277465,-0.604242,-0.651871,_
	0.261022,-0.551176,-0.554667,_
	0.093627,0.258494,-0.920589,_
	0.114248,0.310608,-0.798070,_
	0.144232,0.211434,-0.835001,_
	0.119916,0.176940,-0.951159,_
	0.184061,0.101854,-0.918220,_
	0.092431,0.276521,-0.738231,_
	0.133504,0.218403,-0.758602,_
	0.194987,0.097655,-0.812476,_
	0.185542,0.011005,-0.879202,_
	0.230315,-0.127450,-0.884202,_
	0.260471,0.255056,-0.624378,_
	0.351567,-0.042194,-0.663976,_
	0.253742,0.323524,-0.433716,_
	0.411612,0.132299,-0.438264,_
	0.270513,0.356530,-0.289984,_
	0.422146,0.162819,-0.273130,_
	0.164724,0.237490,0.208912,_
	0.253806,0.092900,0.240640,_
	0.203608,0.284597,0.096223,_
	0.241006,0.343093,-0.171396,_
	0.356076,0.149288,-0.143443,_
	0.337656,0.131992,0.066374}

dim shared as integer Indices((IndexCount/3)-1,2) = { _
	{126,134,133}, _
	{342,138,134}, _
	{133,134,138}, _
	{126,342,134}, _
	{312,316,317}, _
	{169,163,162}, _
	{312,317,319}, _
	{312,319,318}, _
	{169,162,164}, _
	{169,168,163}, _
	{312,314,315}, _
	{169,164,165}, _
	{169,167,168}, _
	{312,315,316}, _
	{312,313,314}, _
	{169,165,166}, _
	{169,166,167}, _
	{312,318,313}, _
	{308,304,305}, _
	{308,305,306}, _
	{179,181,188}, _
	{177,173,175}, _
	{177,175,176}, _
	{302,293,300}, _
	{322,294,304}, _
	{188,176,175}, _
	{188,175,179}, _
	{158,177,187}, _
	{305,293,302}, _
	{305,302,306}, _
	{322,304,308}, _
	{188,181,183}, _
	{158,173,177}, _
	{293,298,300}, _
	{304,294,296}, _
	{304,296,305}, _
	{185,176,188}, _
	{185,188,183}, _
	{187,177,176}, _
	{187,176,185}, _
	{305,296,298}, _
	{305,298,293}, _
	{436,432, 28}, _
	{436, 28, 23}, _
	{434,278,431}, _
	{ 30,208,209}, _
	{ 30,209, 29}, _
	{ 19, 20, 24}, _
	{208,207,211}, _
	{208,211,209}, _
	{ 19,210,212}, _
	{433,434,431}, _
	{433,431,432}, _
	{433,432,436}, _
	{436,437,433}, _
	{277,275,276}, _
	{277,276,278}, _
	{209,210, 25}, _
	{ 21, 26, 24}, _
	{ 21, 24, 20}, _
	{ 25, 26, 27}, _
	{ 25, 27, 29}, _
	{435,439,277}, _
	{439,275,277}, _
	{432,431, 30}, _
	{432, 30, 28}, _
	{433,437,438}, _
	{433,438,435}, _
	{434,277,278}, _
	{ 24, 25,210}, _
	{ 24, 26, 25}, _
	{ 29, 27, 28}, _
	{ 29, 28, 30}, _
	{ 19, 24,210}, _
	{208, 30,431}, _
	{208,431,278}, _
	{435,434,433}, _
	{435,277,434}, _
	{ 25, 29,209}, _
	{ 27, 22, 23}, _
	{ 27, 23, 28}, _
	{ 26, 22, 27}, _
	{ 26, 21, 22}, _
	{212,210,209}, _
	{212,209,211}, _
	{207,208,278}, _
	{207,278,276}, _
	{439,435,438}, _
	{ 12,  9, 10}, _
	{ 12, 10, 13}, _
	{  2,  3,  5}, _
	{  2,  5,  4}, _
	{ 16, 13, 14}, _
	{ 16, 14, 17}, _
	{ 22, 21, 16}, _
	{ 13, 10, 11}, _
	{ 13, 11, 14}, _
	{  1,  0,  3}, _
	{  1,  3,  2}, _
	{ 15, 12, 16}, _
	{ 19, 18, 15}, _
	{ 19, 15, 16}, _
	{ 19, 16, 20}, _
	{  9,  1,  2}, _
	{  9,  2, 10}, _
	{  3,  7,  8}, _
	{  3,  8,  5}, _
	{ 16, 17, 23}, _
	{ 16, 23, 22}, _
	{ 21, 20, 16}, _
	{ 10,  2,  4}, _
	{ 10,  4, 11}, _
	{  0,  6,  7}, _
	{  0,  7,  3}, _
	{ 12, 13, 16}, _
	{451,446,445}, _
	{451,445,450}, _
	{442,440,439}, _
	{442,439,438}, _
	{442,438,441}, _
	{421,420,422}, _
	{412,411,426}, _
	{412,426,425}, _
	{408,405,407}, _
	{413, 67, 68}, _
	{413, 68,414}, _
	{391,390,412}, _
	{ 80,384,386}, _
	{404,406,378}, _
	{390,391,377}, _
	{390,377, 88}, _
	{400,415,375}, _
	{398,396,395}, _
	{398,395,371}, _
	{398,371,370}, _
	{112,359,358}, _
	{112,358,113}, _
	{351,352,369}, _
	{125,349,348}, _
	{345,343,342}, _
	{342,340,339}, _
	{341,335,337}, _
	{328,341,327}, _
	{331,323,333}, _
	{331,322,323}, _
	{327,318,319}, _
	{327,319,328}, _
	{315,314,324}, _
	{302,300,301}, _
	{302,301,303}, _
	{320,311,292}, _
	{285,284,289}, _
	{310,307,288}, _
	{310,288,290}, _
	{321,350,281}, _
	{321,281,282}, _
	{423,448,367}, _
	{272,273,384}, _
	{272,384,274}, _
	{264,265,382}, _
	{264,382,383}, _
	{440,442,261}, _
	{440,261,263}, _
	{252,253,254}, _
	{252,254,251}, _
	{262,256,249}, _
	{262,249,248}, _
	{228,243,242}, _
	{228, 31,243}, _
	{213,215,238}, _
	{213,238,237}, _
	{ 19,212,230}, _
	{224,225,233}, _
	{224,233,231}, _
	{217,218, 56}, _
	{217, 56, 54}, _
	{217,216,239}, _
	{217,239,238}, _
	{217,238,215}, _
	{218,217,215}, _
	{218,215,214}, _
	{  6,102,206}, _
	{186,199,200}, _
	{197,182,180}, _
	{170,171,157}, _
	{201,200,189}, _
	{170,190,191}, _
	{170,191,192}, _
	{175,174,178}, _
	{175,178,179}, _
	{168,167,155}, _
	{122,149,158}, _
	{122,158,159}, _
	{135,153,154}, _
	{135,154,118}, _
	{143,140,141}, _
	{143,141,144}, _
	{132,133,136}, _
	{130,126,133}, _
	{124,125,127}, _
	{122,101,100}, _
	{122,100,121}, _
	{110,108,107}, _
	{110,107,109}, _
	{ 98, 99, 97}, _
	{ 98, 97, 64}, _
	{ 98, 64, 66}, _
	{ 87, 55, 57}, _
	{ 83, 82, 79}, _
	{ 83, 79, 84}, _
	{ 78, 74, 50}, _
	{ 49, 71, 41}, _
	{ 49, 41, 37}, _
	{ 49, 37, 36}, _
	{ 58, 44, 60}, _
	{ 60, 59, 58}, _
	{ 51, 34, 33}, _
	{ 39, 40, 42}, _
	{ 39, 42, 38}, _
	{243,240, 33}, _
	{243, 33,229}, _
	{ 39, 38,  6}, _
	{ 44, 46, 40}, _
	{ 55, 56, 57}, _
	{ 64, 62, 65}, _
	{ 64, 65, 66}, _
	{ 41, 71, 45}, _
	{ 75, 50, 51}, _
	{ 81, 79, 82}, _
	{ 77, 88, 73}, _
	{ 93, 92, 94}, _
	{ 68, 47, 46}, _
	{ 96, 97, 99}, _
	{ 96, 99, 95}, _
	{110,109,111}, _
	{111,112,110}, _
	{114,113,123}, _
	{114,123,124}, _
	{132,131,129}, _
	{133,137,136}, _
	{135,142,145}, _
	{145,152,135}, _
	{149,147,157}, _
	{157,158,149}, _
	{164,150,151}, _
	{153,163,168}, _
	{153,168,154}, _
	{185,183,182}, _
	{185,182,184}, _
	{161,189,190}, _
	{200,199,191}, _
	{200,191,190}, _
	{180,178,195}, _
	{180,195,196}, _
	{102,101,204}, _
	{102,204,206}, _
	{ 43, 48,104}, _
	{ 43,104,103}, _
	{216,217, 54}, _
	{216, 54, 32}, _
	{207,224,231}, _
	{230,212,211}, _
	{230,211,231}, _
	{227,232,241}, _
	{227,241,242}, _
	{235,234,241}, _
	{235,241,244}, _
	{430,248,247}, _
	{272,274,253}, _
	{272,253,252}, _
	{439,260,275}, _
	{225,224,259}, _
	{225,259,257}, _
	{269,270,407}, _
	{269,407,405}, _
	{270,269,273}, _
	{270,273,272}, _
	{273,269,268}, _
	{273,268,267}, _
	{273,267,266}, _
	{273,266,265}, _
	{273,265,264}, _
	{448,279,367}, _
	{281,350,368}, _
	{285,286,301}, _
	{290,323,310}, _
	{290,311,323}, _
	{282,281,189}, _
	{292,311,290}, _
	{292,290,291}, _
	{307,306,302}, _
	{307,302,303}, _
	{316,315,324}, _
	{316,324,329}, _
	{331,351,350}, _
	{330,334,335}, _
	{330,335,328}, _
	{341,337,338}, _
	{344,355,354}, _
	{346,345,348}, _
	{346,348,347}, _
	{364,369,352}, _
	{364,352,353}, _
	{365,363,361}, _
	{365,361,362}, _
	{376,401,402}, _
	{373,372,397}, _
	{373,397,400}, _
	{376, 92,377}, _
	{381,378,387}, _
	{381,387,385}, _
	{386, 77, 80}, _
	{390,389,412}, _
	{416,417,401}, _
	{403,417,415}, _
	{408,429,430}, _
	{419,423,418}, _
	{427,428,444}, _
	{427,444,446}, _
	{437,436,441}, _
	{450,445, 11}, _
	{450, 11,  4}, _
	{447,449,  5}, _
	{447,  5,  8}, _
	{441,438,437}, _
	{425,426,451}, _
	{425,451,452}, _
	{417,421,415}, _
	{408,407,429}, _
	{399,403,400}, _
	{399,400,397}, _
	{394,393,416}, _
	{389,411,412}, _
	{386,383,385}, _
	{408,387,378}, _
	{408,378,406}, _
	{377,391,376}, _
	{ 94,375,415}, _
	{372,373,374}, _
	{372,374,370}, _
	{359,111,360}, _
	{359,112,111}, _
	{113,358,349}, _
	{113,349,123}, _
	{346,343,345}, _
	{343,340,342}, _
	{338,336,144}, _
	{338,144,141}, _
	{327,341,354}, _
	{327,354,326}, _
	{331,350,321}, _
	{331,321,322}, _
	{314,313,326}, _
	{314,326,325}, _
	{300,298,299}, _
	{300,299,301}, _
	{288,287,289}, _
	{189,292,282}, _
	{287,288,303}, _
	{284,285,297}, _
	{368,280,281}, _
	{448,447,279}, _
	{274,226,255}, _
	{267,268,404}, _
	{267,404,379}, _
	{429,262,430}, _
	{439,440,260}, _
	{257,258,249}, _
	{257,249,246}, _
	{430,262,248}, _
	{234,228,242}, _
	{234,242,241}, _
	{237,238,239}, _
	{237,239,236}, _
	{ 15, 18,227}, _
	{ 15,227,229}, _
	{222,223, 82}, _
	{222, 82, 83}, _
	{214,215,213}, _
	{214,213, 81}, _
	{ 38,102,  6}, _
	{122,159,200}, _
	{122,200,201}, _
	{174,171,192}, _
	{174,192,194}, _
	{197,193,198}, _
	{190,170,161}, _
	{181,179,178}, _
	{181,178,180}, _
	{166,156,155}, _
	{163,153,152}, _
	{163,152,162}, _
	{120,156,149}, _
	{120,149,121}, _
	{152,153,135}, _
	{140,143,142}, _
	{135,131,132}, _
	{135,132,136}, _
	{130,129,128}, _
	{130,128,127}, _
	{100,105,119}, _
	{100,119,120}, _
	{106,104,107}, _
	{106,107,108}, _
	{ 91, 95, 59}, _
	{ 93, 94, 68}, _
	{ 91, 89, 92}, _
	{ 76, 53, 55}, _
	{ 76, 55, 87}, _
	{ 81, 78, 79}, _
	{ 74, 73, 49}, _
	{ 69, 60, 45}, _
	{ 58, 62, 64}, _
	{ 58, 64, 61}, _
	{ 53, 31, 32}, _
	{ 32, 54, 53}, _
	{ 42, 43, 38}, _
	{ 35, 36,  0}, _
	{ 35,  0,  1}, _
	{ 34, 35,  1}, _
	{ 34,  1,  9}, _
	{ 44, 40, 41}, _
	{ 44, 41, 45}, _
	{ 33,240, 51}, _
	{ 63, 62, 58}, _
	{ 63, 58, 59}, _
	{ 45, 71, 70}, _
	{ 76, 75, 51}, _
	{ 76, 51, 52}, _
	{ 86, 85, 84}, _
	{ 86, 84, 87}, _
	{ 89, 72, 73}, _
	{ 89, 73, 88}, _
	{ 91, 92, 96}, _
	{ 91, 96, 95}, _
	{ 72, 91, 60}, _
	{ 72, 60, 69}, _
	{104,106,105}, _
	{119,105,117}, _
	{119,117,118}, _
	{124,127,128}, _
	{117,116,129}, _
	{117,129,131}, _
	{118,117,131}, _
	{135,140,142}, _
	{146,150,152}, _
	{146,152,145}, _
	{149,122,121}, _
	{166,165,151}, _
	{166,151,156}, _
	{158,172,173}, _
	{161,160,189}, _
	{199,198,193}, _
	{199,193,191}, _
	{204,201,202}, _
	{178,174,194}, _
	{200,159,186}, _
	{109, 48, 67}, _
	{ 48,107,104}, _
	{216, 32,236}, _
	{216,236,239}, _
	{223,214, 81}, _
	{223, 81, 82}, _
	{ 33, 12, 15}, _
	{ 32,228,234}, _
	{ 32,234,236}, _
	{240, 31, 52}, _
	{256,255,246}, _
	{256,246,249}, _
	{258,263,248}, _
	{258,248,249}, _
	{275,260,259}, _
	{275,259,276}, _
	{207,276,259}, _
	{270,271,429}, _
	{270,429,407}, _
	{413,418,366}, _
	{413,366,365}, _
	{368,367,279}, _
	{368,279,280}, _
	{303,301,286}, _
	{303,286,287}, _
	{283,282,292}, _
	{283,292,291}, _
	{320,292,189}, _
	{298,296,297}, _
	{298,297,299}, _
	{318,327,326}, _
	{318,326,313}, _
	{329,330,317}, _
	{336,333,320}, _
	{326,354,353}, _
	{334,332,333}, _
	{334,333,336}, _
	{342,339,139}, _
	{342,139,138}, _
	{345,342,126}, _
	{347,357,356}, _
	{369,368,351}, _
	{363,356,357}, _
	{363,357,361}, _
	{366,367,368}, _
	{366,368,369}, _
	{375,373,400}, _
	{ 92, 90,377}, _
	{409,387,408}, _
	{386,385,387}, _
	{386,387,388}, _
	{412,394,391}, _
	{396,398,399}, _
	{408,406,405}, _
	{415,421,419}, _
	{415,419,414}, _
	{425,452,448}, _
	{425,448,424}, _
	{444,441,443}, _
	{448,452,449}, _
	{448,449,447}, _
	{446,444,443}, _
	{446,443,445}, _
	{250,247,261}, _
	{250,261,428}, _
	{421,422,423}, _
	{421,423,419}, _
	{427,410,250}, _
	{417,403,401}, _
	{403,402,401}, _
	{420,392,412}, _
	{420,412,425}, _
	{420,425,424}, _
	{386,411,389}, _
	{383,382,381}, _
	{383,381,385}, _
	{378,379,404}, _
	{372,371,395}, _
	{372,395,397}, _
	{371,372,370}, _
	{361,359,360}, _
	{361,360,362}, _
	{368,350,351}, _
	{349,347,348}, _
	{356,355,344}, _
	{356,344,346}, _
	{344,341,340}, _
	{344,340,343}, _
	{338,337,336}, _
	{328,335,341}, _
	{324,352,351}, _
	{324,351,331}, _
	{320,144,336}, _
	{314,325,324}, _
	{322,308,309}, _
	{310,309,307}, _
	{287,286,289}, _
	{203,280,279}, _
	{203,279,205}, _
	{297,295,283}, _
	{297,283,284}, _
	{447,205,279}, _
	{274,384, 80}, _
	{274, 80,226}, _
	{266,267,379}, _
	{266,379,380}, _
	{225,257,246}, _
	{225,246,245}, _
	{256,254,253}, _
	{256,253,255}, _
	{430,247,250}, _
	{226,235,244}, _
	{226,244,245}, _
	{232,233,244}, _
	{232,244,241}, _
	{230, 18, 19}, _
	{ 32, 31,228}, _
	{219,220, 86}, _
	{219, 86, 57}, _
	{226,213,235}, _
	{206,  7,  6}, _
	{122,201,101}, _
	{201,204,101}, _
	{180,196,197}, _
	{170,192,171}, _
	{200,190,189}, _
	{194,193,195}, _
	{183,181,180}, _
	{183,180,182}, _
	{155,154,168}, _
	{149,156,151}, _
	{149,151,148}, _
	{155,156,120}, _
	{145,142,143}, _
	{145,143,146}, _
	{136,137,140}, _
	{133,132,130}, _
	{128,129,116}, _
	{100,120,121}, _
	{110,112,113}, _
	{110,113,114}, _
	{ 66, 65, 63}, _
	{ 66, 63, 99}, _
	{ 66, 99, 98}, _
	{ 96, 46, 61}, _
	{ 89, 88, 90}, _
	{ 86, 87, 57}, _
	{ 80, 78, 81}, _
	{ 72, 69, 49}, _
	{ 67, 48, 47}, _
	{ 67, 47, 68}, _
	{ 56, 55, 53}, _
	{ 50, 49, 36}, _
	{ 50, 36, 35}, _
	{ 40, 39, 41}, _
	{242,243,229}, _
	{242,229,227}, _
	{  6, 37, 39}, _
	{ 42, 47, 48}, _
	{ 42, 48, 43}, _
	{ 61, 46, 44}, _
	{ 45, 70, 69}, _
	{ 69, 70, 71}, _
	{ 69, 71, 49}, _
	{ 74, 78, 77}, _
	{ 83, 84, 85}, _
	{ 73, 74, 77}, _
	{ 93, 96, 92}, _
	{ 68, 46, 93}, _
	{ 95, 99, 63}, _
	{ 95, 63, 59}, _
	{115,108,110}, _
	{115,110,114}, _
	{125,126,127}, _
	{129,130,132}, _
	{137,133,138}, _
	{137,138,139}, _
	{148,146,143}, _
	{148,143,147}, _
	{119,118,154}, _
	{161,147,143}, _
	{165,164,151}, _
	{158,157,171}, _
	{158,171,172}, _
	{159,158,187}, _
	{159,187,186}, _
	{194,192,191}, _
	{194,191,193}, _
	{189,202,201}, _
	{182,197,184}, _
	{205,  8,  7}, _
	{ 48,109,107}, _
	{218,219, 57}, _
	{218, 57, 56}, _
	{207,231,211}, _
	{232,230,231}, _
	{232,231,233}, _
	{ 53, 52, 31}, _
	{388,411,386}, _
	{409,430,250}, _
	{262,429,254}, _
	{262,254,256}, _
	{442,444,428}, _
	{273,264,383}, _
	{273,383,384}, _
	{429,271,251}, _
	{429,251,254}, _
	{413,365,362}, _
	{ 67,413,360}, _
	{282,283,295}, _
	{285,301,299}, _
	{202,281,280}, _
	{284,283,291}, _
	{284,291,289}, _
	{320,189,160}, _
	{308,306,307}, _
	{307,309,308}, _
	{319,317,330}, _
	{319,330,328}, _
	{353,352,324}, _
	{332,331,333}, _
	{340,341,338}, _
	{354,341,344}, _
	{349,358,357}, _
	{349,357,347}, _
	{364,355,356}, _
	{364,356,363}, _
	{364,365,366}, _
	{364,366,369}, _
	{374,376,402}, _
	{375, 92,373}, _
	{ 77,389,390}, _
	{382,380,381}, _
	{389, 77,386}, _
	{393,394,412}, _
	{393,412,392}, _
	{401,394,416}, _
	{415,400,403}, _
	{411,410,427}, _
	{411,427,426}, _
	{422,420,424}, _
	{247,248,263}, _
	{247,263,261}, _
	{445,443, 14}, _
	{445, 14, 11}, _
	{449,450,  4}, _
	{449,  4,  5}, _
	{443,441, 17}, _
	{443, 17, 14}, _
	{436, 23, 17}, _
	{436, 17,441}, _
	{424,448,422}, _
	{448,423,422}, _
	{414,419,418}, _
	{414,418,413}, _
	{406,404,405}, _
	{399,397,395}, _
	{399,395,396}, _
	{420,416,392}, _
	{388,410,411}, _
	{386,384,383}, _
	{390, 88, 77}, _
	{375, 94, 92}, _
	{415,414, 68}, _
	{415, 68, 94}, _
	{370,374,402}, _
	{370,402,398}, _
	{361,357,358}, _
	{361,358,359}, _
	{125,348,126}, _
	{346,344,343}, _
	{340,338,339}, _
	{337,335,334}, _
	{337,334,336}, _
	{325,353,324}, _
	{324,331,332}, _
	{324,332,329}, _
	{323,322,309}, _
	{323,309,310}, _
	{294,295,297}, _
	{294,297,296}, _
	{289,286,285}, _
	{202,280,203}, _
	{288,307,303}, _
	{282,295,321}, _
	{ 67,360,111}, _
	{418,423,367}, _
	{418,367,366}, _
	{272,252,251}, _
	{272,251,271}, _
	{272,271,270}, _
	{255,253,274}, _
	{265,266,380}, _
	{265,380,382}, _
	{442,428,261}, _
	{440,263,258}, _
	{440,258,260}, _
	{409,250,410}, _
	{255,226,245}, _
	{255,245,246}, _
	{ 31,240,243}, _
	{236,234,235}, _
	{236,235,237}, _
	{233,225,245}, _
	{233,245,244}, _
	{220,221, 85}, _
	{220, 85, 86}, _
	{ 81,213,226}, _
	{ 81,226, 80}, _
	{  7,206,205}, _
	{186,184,198}, _
	{186,198,199}, _
	{204,203,205}, _
	{204,205,206}, _
	{195,193,196}, _
	{171,174,172}, _
	{173,174,175}, _
	{173,172,174}, _
	{155,167,166}, _
	{160,161,143}, _
	{160,143,144}, _
	{119,154,155}, _
	{148,151,150}, _
	{148,150,146}, _
	{140,137,139}, _
	{140,139,141}, _
	{127,126,130}, _
	{114,124,128}, _
	{114,128,115}, _
	{117,105,106}, _
	{117,106,116}, _
	{104,105,100}, _
	{104,100,103}, _
	{ 59, 60, 91}, _
	{ 97, 96, 61}, _
	{ 97, 61, 64}, _
	{ 91, 72, 89}, _
	{ 87, 84, 79}, _
	{ 87, 79, 76}, _
	{ 78, 80, 77}, _
	{ 49, 50, 74}, _
	{ 60, 44, 45}, _
	{ 61, 44, 58}, _
	{ 51, 50, 35}, _
	{ 51, 35, 34}, _
	{ 39, 37, 41}, _
	{ 33, 34,  9}, _
	{ 33,  9, 12}, _
	{  0, 36, 37}, _
	{  0, 37,  6}, _
	{ 40, 46, 47}, _
	{ 40, 47, 42}, _
	{ 53, 54, 56}, _
	{ 65, 62, 63}, _
	{ 72, 49, 73}, _
	{ 79, 78, 75}, _
	{ 79, 75, 76}, _
	{ 52, 53, 76}, _
	{ 92, 89, 90}, _
	{ 96, 93, 46}, _
	{102,103,100}, _
	{102,100,101}, _
	{116,106,108}, _
	{116,108,115}, _
	{123,125,124}, _
	{116,115,128}, _
	{118,131,135}, _
	{140,135,136}, _
	{148,147,149}, _
	{120,119,155}, _
	{164,162,152}, _
	{164,152,150}, _
	{157,147,161}, _
	{157,161,170}, _
	{186,187,185}, _
	{186,185,184}, _
	{193,197,196}, _
	{202,203,204}, _
	{194,195,178}, _
	{198,184,197}, _
	{ 67,111,109}, _
	{ 38, 43,103}, _
	{ 38,103,102}, _
	{214,223,222}, _
	{214,222,221}, _
	{214,221,220}, _
	{214,220,219}, _
	{214,219,218}, _
	{213,237,235}, _
	{221,222, 83}, _
	{221, 83, 85}, _
	{ 15,229, 33}, _
	{227, 18,230}, _
	{227,230,232}, _
	{ 52, 51,240}, _
	{ 75, 78, 50}, _
	{408,430,409}, _
	{260,258,257}, _
	{260,257,259}, _
	{224,207,259}, _
	{268,269,405}, _
	{268,405,404}, _
	{413,362,360}, _
	{447,  8,205}, _
	{299,297,285}, _
	{189,281,202}, _
	{290,288,289}, _
	{290,289,291}, _
	{322,321,295}, _
	{322,295,294}, _
	{333,323,311}, _
	{333,311,320}, _
	{317,316,329}, _
	{320,160,144}, _
	{353,325,326}, _
	{329,332,334}, _
	{329,334,330}, _
	{339,338,141}, _
	{339,141,139}, _
	{348,345,126}, _
	{347,356,346}, _
	{123,349,125}, _
	{364,353,354}, _
	{364,354,355}, _
	{365,364,363}, _
	{376,391,394}, _
	{376,394,401}, _
	{ 92,376,374}, _
	{ 92,374,373}, _
	{377, 90, 88}, _
	{380,379,378}, _
	{380,378,381}, _
	{388,387,409}, _
	{388,409,410}, _
	{416,393,392}, _
	{399,398,402}, _
	{399,402,403}, _
	{250,428,427}, _
	{421,417,416}, _
	{421,416,420}, _
	{426,427,446}, _
	{426,446,451}, _
	{444,442,441}, _
	{452,451,450}, _
	{452,450,449} }

function heightfield_callback cdecl (byval lpData as any ptr, _
                                     byval x as integer, _
                                     byval z as integer) as dReal

  dim as dReal fx = ( x - ( HFIELD_WSTEP-1 )/2 ) / ( HFIELD_WSTEP-1 )
  dim as dReal fz = ( z - ( HFIELD_DSTEP-1 )/2 ) / ( HFIELD_DSTEP-1 )

  ' Create an interesting 'hump' shape
  dim as dReal h = 1.0  + ( -16.0 * ( fx*fx*fx + fz*fz*fz ) )
  return h
end function

' this is called by dSpaceCollide when two objects 
' in space are potentially colliding.
sub CollisionCallback cdecl (lpDdata as any ptr, _
                        o1 as dGeomID  , _
                        o2 as dGeomID)
  ' up to MAX_CONTACTS contacts per box-box
  static as dContact contact(MAX_CONTACTS-1)

  ' exit without doing anything if the two bodies 
  ' are connected by a joint
  dim as dBodyID b1 = dGeomGetBody(o1)
  dim as dBodyID b2 = dGeomGetBody(o2)
  dim as integer ret
  if (b1<>NULL) and (b2<>NULL) then 
    ret=dAreConnectedExcluding(b1,b2,dJointTypeContact)
    if ret=1 then return
  end if

  ' how many contacs
  dim as integer n = dCollide(o1,o2, _
                        MAX_CONTACTS,_
                        @contact(0).geom, _
                        sizeof(dContact)) 
  if n then
    dim as dMatrix3 RI
    dRSetIdentity (@RI) '!!!
    dim as dJointID c
    dim as dReal ss(2) = {0.02,0.02,0.02}
    for i as integer=0 to n-1
      contact(i).surface.mode       = dContactBounce or dContactSoftCFM
      contact(i).surface.mu         = dInfinity
      contact(i).surface.mu2        = 0
      contact(i).surface.bounce     = 0.1
      contact(i).surface.bounce_vel = 1
      contact(i).surface.soft_cfm   = 0.01 
      c = dJointCreateContact(world, _
                              contactgroup, _
                              @contact(i)) '!!! contact+i
      dJointAttach (c,b1,b2)
      if (show_contacts<>0) then dsDrawBox(@contact(i).geom.pos.v(0),@RI.m(0),@ss(0))
    next
  end if
end sub

' start simulation - set viewpoint
sub DoStart()
  static as single xyz(2) = {10,-2.5,2}
  static as single hpr(2) = {160,-17,0}
  dsSetViewpoint (@xyz(0),@hpr(0))
  dsPrint ("To drop another object, press:")
  dsPrint ("   'b' for box.")
  dsPrint ("   's' for sphere.")
  dsPrint ("   'c' for capsule.")
  dsPrint ("   'y' for cylinder.")
  dsPrint ("   'x' for a composite object.")
  dsPrint ("   'm' for a trimesh.")
  dsPrint ("")
  dsPrint ("   ' ' select an object.")
  dsPrint ("   'd' disable the selected object.")
  dsPrint ("   'e' enable the selected object.")
  dsPrint ("   'a' toggle showing the geom AABBs.")
  dsPrint ("   't' toggle showing the contact points.")
  dsPrint ("   'r' toggle dropping from random position/orientation.")
  dsPrint ("")
  dsPrint ("   'T' toggle texture.")
  dsPrint ("   'S' toggle shadow.")
  dsPrint ("   'F' toggle fog.")
  dsPrint ("")
  dsPrint ("camera: drag the mouse")
  dsPrint ("    left  button rotate")
  dsPrint ("    right button move")
  dsPrint ("    both  button up/down")
end sub


' called when a key pressed
sub DoCommand (cmd as integer)
  dim as string key=lcase(chr(cmd)) 
  dim as integer i,j,k
  dim as dReal sides(2)
  dim as dMass m
  '
  ' Geom Creation
  '
  select case key 
    case "b","s","c","x","y","m"
      if num<MAXOBJ then
        i = num:num+=1
      else
        i = nextobj
        nextobj+=1
        if (nextobj >= num) then nextobj = 0

        ' destroy the body and geoms for slot i
        if obj(i).body<>NULL then dBodyDestroy(obj(i).body)
         for k=0 to GPB-1 ' geoms per body
           if (obj(i).geom(k)<>NULL) then dGeomDestroy(obj(i).geom(k))
         next
       memset (@obj(i),0,sizeof(obj(i)))
      end if
      
      obj(i).body = dBodyCreate(world)
      for k=0 to 2:sides(k) = dRandReal()*0.5+0.1:next
     
      dim as dMatrix3 R
      if (random_pos<>0) then
        dBodySetPosition (obj(i).body, _
                          dRandReal()*HFIELD_WIDTH-HFIELD_WIDTH*0.5, _
                          dRandReal()*HFIELD_DEPTH-HFIELD_DEPTH*0.5, _
                          4 )

        dRFromAxisAndAngle(@R, _
                           dRandReal()* 2.0-1.0, _
                           dRandReal()* 2.0-1.0, _
                           dRandReal()* 2.0-1.0, _
                           dRandReal()*90.0-45.0)
      else
        dim as dReal maxheight = 0
        dim as dReal ptr p 
        for k=0 to (num-1)
          p=dBodyGetPosition(obj(k).body)
          if (p[2]>maxheight) then maxheight=p[2]
        next
        dBodySetPosition  (obj(i).body, 0,maxheight+1,0)
        dRFromAxisAndAngle(@R,0,0,1,dRandReal()*10.0-5.0)
      end if

      dBodySetRotation (obj(i).body,R)
      'dBodySetData (obj(i).body,cptr(any ptr,i))
    
      select case key
        case "b"
          dMassSetBox (@m,DENSITY,sides(0),sides(1),sides(2))
          obj(i).geom(0) = dCreateBox (world_space,sides(0),sides(1),sides(2))
          
        case "c"
          sides(0) *= 0.5
          dMassSetCapsule (@m,DENSITY,3,sides(0),sides(1))
          obj(i).geom(0) = dCreateCapsule(world_space,sides(0),sides(1))

        case "y"' Convex Object
          dMassSetCylinder (@m,DENSITY,3,sides(0),sides(1))
          obj(i).geom(0) = dCreateCylinder(world_space,sides(0),sides(1))

        case "s"
          sides(0) *= 0.5
          dMassSetSphere (@m,DENSITY,sides(0))
          obj(i).geom(0) = dCreateSphere (world_space,sides(0))

        case "m"
          dim as dTriMeshDataID new_tmdata = dGeomTriMeshDataCreate()
          dGeomTriMeshDataBuildSingle(new_tmdata, _
                                      @Vertices(0) , 3 * sizeof(single), _
                                      VertexCount  , _
                                      @Indices(0,0), _
                                      IndexCount   , 3 * sizeof(integer))
          obj(i).geom(0) = dCreateTriMesh(world_space, _
                                          new_tmdata , _
                                          0, 0, 0)

          ' remember the mesh's dTriMeshDataID on its userdata for convenience.
          dGeomSetData(obj(i).geom(0), new_tmdata)
          dMassSetBox (@m,DENSITY,sides(0),sides(1),sides(2))
        case "x"
          dim as dGeomID g2(GPB-1)   ' encapsulated geometries
          dim as dReal dpos(GPB-1,2) ' delta-positions for encapsulated geometries
          ' start accumulating masses for the encapsulated geometries
          dim as dMass m2
          dMassSetZero (@m)

          ' set random delta positions
          for j=0  to GPB-1
            for k=0 to 2:dpos(j,k) = dRandReal()*0.3-0.15:next
          next

          for k=0 to GPB-1
            obj(i).geom(k) = dCreateGeomTransform (world_space)
            dGeomTransformSetCleanup (obj(i).geom(k),1)

            if (k=0) then
              dim as dReal radius = dRandReal()*0.25+0.05
              g2(k) = dCreateSphere (0,radius)
              dMassSetSphere (@m2,DENSITY,radius)

            elseif (k=1) then
              g2(k) = dCreateBox (0,sides(0),sides(1),sides(2))
              dMassSetBox (@m2,DENSITY,sides(0),sides(1),sides(2))
            else 
              dim as dReal radius = dRandReal()*0.1+0.05
              dim as dReal length = dRandReal()*1.0+0.1
              g2(k) = dCreateCapsule (0,radius,length)
              dMassSetCapsule (@m2,DENSITY,3,radius,length)
            end if
            dGeomTransformSetGeom (obj(i).geom(k),g2(k))

            ' set the transformation (adjust the mass too)
            dGeomSetPosition (g2(k),dpos(k,0),dpos(k,1),dpos(k,2))
            dMassTranslate (@m2,dpos(k,0),dpos(k,1),dpos(k,2))
            dim as dMatrix3 Rtx
            dRFromAxisAndAngle (@Rtx,dRandReal()*2.0-1.0, _
                                     dRandReal()*2.0-1.0, _
                                     dRandReal()*2.0-1.0, _
                                     dRandReal()*10.0-5.0)

            dGeomSetRotation (g2(k),Rtx)
            dMassRotate (@m2,Rtx)

            ' add to the total mass
            dMassAdd (@m,@m2)
           next
           ' move all encapsulated objects so that the center of mass is (0,0,0)
           for k=0 to 1
             dGeomSetPosition (g2(k),dpos(k,0)-m.c.v(0), _
                                     dpos(k,1)-m.c.v(1), _
                                     dpos(k,2)-m.c.v(2))
           next
           dMassTranslate (@m,-m.c.v(0),-m.c.v(1),-m.c.v(2))
      end select
      for k=0 to GPB-1
        if (obj(i).geom(k)) then dGeomSetBody(obj(i).geom(k),obj(i).body)
      next
      dBodySetMass (obj(i).body,@m)
  end select


  '
  ' Control Commands
  '
  select case key
    case " "
      selected+=1
      if (selected >= num) then selected = 0
      if (selected <    0) then selected = 0
    case "d"
      if (selected >= 0) and (selected < num) then
        dBodyDisable (obj(selected).body)
      end if
    case "e" 
      if (selected >= 0) and (selected < num) then
        dBodyEnable (obj(selected).body)
      end if
    case "a"
      show_aabb     xor= 1
    case "t"
      show_contacts xor= 1
    case "r"
      random_pos    xor= 1
  end select

end sub


' draw a geom
sub drawGeom(byval g as dGeomID  , _
             byval p as dReal ptr, _
             byval R as dReal ptr, _
             byval show_aabb as integer)
  static as dVector3 tmpv,tmpv2
  static as dMatrix3 tmpm
  
  dim as dReal radius,length
  if (g=NULL) then return
  if (p=NULL) then p = dGeomGetPosition(g)
  if (R=NULL) then R = dGeomGetRotation(g)

  dim as integer cType = dGeomGetClass(g)
  if (cType = dBoxClass) then
    dim as dVector3 sides
    dGeomBoxGetLengths (g,@sides)
    dsDrawBox (p,R,@sides.v(0))

  elseif (cType = dSphereClass) then
    radius=dGeomSphereGetRadius(g)
    dsDrawSphere(p,R,radius)

  elseif (cType = dCapsuleClass) then
    dGeomCapsuleGetParams (g,@radius,@length)
    dsDrawCapsule(p,R,length,radius)

  elseif (cType = dConvexClass) then
    'dVector3 sides={0.50,0.50,0.50}
    dsDrawConvex(p,R,@planes(0),_
                     planecount,_
                     @points(0),_
                     pointcount,_
                     @polygons(0))
    
  elseif (cType = dCylinderClass) then
    dGeomCylinderGetParams (g,@radius,@length)
    dsDrawCylinder (p,R,length,radius)

  elseif (cType = dGeomTransformClass) then
    dim as dGeomID g2 = dGeomTransformGetGeom(g)
    dim as dReal ptr pos2=dGeomGetPosition(g2)
    dim as dReal ptr R2  =dGeomGetRotation(g2)
    
    dim as single ptr actual_pos=@tmpv.v(0)
   
    dim as single ptr actual_R  =@tmpm.m(0)
    dMULTIPLY0_331 (actual_pos,R,pos2)
    actual_pos[0] += p[0]
    actual_pos[1] += p[1]
    actual_pos[2] += p[2]
    dMULTIPLY0_333 (actual_R,R,R2)
    drawGeom (g2,actual_pos,actual_R,0)
  end if

  if (show_aabb<>0) then
    ' draw the bounding box for this geom
    dim as dReal aabb(5)
    dGeomGetAABB (g,@aabb(0))
    dim as single ptr bbpos=@tmpv.v(0)
    for i as integer= 0 to 2:bbpos[i] = 0.5*(aabb(i*2) + aabb(i*2+1)):next
    dim as single ptr bbsides=@tmpv2.v(0)
    for i as integer= 0 to 2:bbsides[i] = aabb(i*2+1) - aabb(i*2):next
    dim as dMatrix3 RI
    dRSetIdentity (@RI)
    dsSetColorAlpha (1,0,0,0.5)
    dsDrawBox(bbpos,@RI.m(0),bbsides)
  end if

end sub

' simulation loop
sub DoSimLoop(pause as integer)
  dim as integer i,j

  dsSetColor (0,0,2)
  dSpaceCollide(world_space,0,@CollisionCallback)
  if (pause=0) then dWorldQuickStep(world,0.02)
  if (write_world=1) then write_world = 0

  ' remove all contact joints
  dJointGroupEmpty (contactgroup)
  dim as dReal ptr pReal = dGeomGetPosition(gheight)
  dim as dReal ptr RReal = dGeomGetRotation(gheight)

  ' Draw Heightfield
  ' Set ox and oz to zero for DHEIGHTFIELD_CORNER_ORIGIN mode.
  const as integer ox = cint(-HFIELD_WIDTH/2)
  const as integer oz = cint(-HFIELD_DEPTH/2)

  dsSetColorAlpha (0.5,1,0.5,0.5)
  dsSetTexture(DS_WOOD)
  for i = 0 to  HFIELD_WSTEP - 2
    for j = 0 to HFIELD_DSTEP - 2
      dim as dReal a(2), b(2), c(2), d(3)
      a(0) = ox + ( i ) * HFIELD_WSAMP
      a(1) = heightfield_callback( NULL, i, j )
      a(2) = oz + ( j ) * HFIELD_DSAMP

      b(0) = ox + (i+1) * HFIELD_WSAMP
      b(1) = heightfield_callback(NULL,i+1,j )
      b(2) = oz +  j * HFIELD_DSAMP

      c(0) = ox + i  * HFIELD_WSAMP
      c(1) = heightfield_callback(NULL,i,j+1)
      c(2) = oz + (j+1) * HFIELD_DSAMP

      d(0) = ox + (i+1) * HFIELD_WSAMP
      d(1) = heightfield_callback( NULL,i+1,j+1)
      d(2) = oz + (j+1) * HFIELD_DSAMP
      dsDrawTriangle(pReal,RReal,@a(0),@c(0),@b(0),1)
      dsDrawTriangle(pReal,RReal,@b(0),@c(0),@d(0),1)
    next
  next

  dsSetColor(1,1,0)
  dsSetTexture(DS_WOOD)
  for i= 0 to num-1
    for j=0 to GPB-1
      if (i=selected) then
        dsSetColor (0,0.7,1)
      elseif (dBodyIsEnabled(obj(i).body)=0) then
        dsSetColor (1,0.8,0)
      else 
        dsSetColor (1,1,0)
      end if

      if (obj(i).geom(j)<>0) then
        if (dGeomGetClass(obj(i).geom(j))=dTriMeshClass) then
          dim as integer ptr iIndices = @Indices(0,0)

          ' assume all trimeshes are drawn as bunnies
          dim as dReal ptr Posi=dGeomGetPosition(obj(i).geom(j))
          dim as dReal ptr Rot =dGeomGetRotation(obj(i).geom(j))
          dim as integer ii
        
          for ii=0 to (IndexCount / 3)-1
            ' explicit conversion from float to dReal
            dim as dReal v(8) = { _
              Vertices(iIndices[ii * 3 + 0] * 3 + 0),_
              Vertices(iIndices[ii * 3 + 0] * 3 + 1),_
              Vertices(iIndices[ii * 3 + 0] * 3 + 2),_
              Vertices(iIndices[ii * 3 + 1] * 3 + 0),_
              Vertices(iIndices[ii * 3 + 1] * 3 + 1),_
              Vertices(iIndices[ii * 3 + 1] * 3 + 2),_
              Vertices(iIndices[ii * 3 + 2] * 3 + 0),_
              Vertices(iIndices[ii * 3 + 2] * 3 + 1),_
              Vertices(iIndices[ii * 3 + 2] * 3 + 2)}

              dsDrawTriangle(Posi,Rot,@v(0),@v(3),@v(6),1)
          next
          ' tell the tri-tri collider the current transform of the 
          ' trimesh this is fairly important for good results.
          ' Fill in the (4x4) matrix.
          dim as dReal ptr p_matrix = @obj(i).matrix_dblbuff(0) _
                                     +(obj(i).last_matrix_index * 16 )

          p_matrix[ 0] = Rot[0]
          p_matrix[ 1] = Rot[1]
          p_matrix[ 1] = Rot[1]
          p_matrix[ 3] = 0
          p_matrix[ 4] = Rot[ 4]
          p_matrix[ 5] = Rot[ 5]
          p_matrix[ 6] = Rot[ 6]
          p_matrix[ 7] = 0
          p_matrix[ 8] = Rot[ 8]
          p_matrix[ 9] = Rot[ 9]
          p_matrix[10] = Rot[10]
          p_matrix[11] = 0
          p_matrix[12] = Posi[0]
          p_matrix[13] = Posi[1]
          p_matrix[14] = Posi[1]
          p_matrix[15] = 1
          ' !!! Flip to other matrix.
          obj(i).last_matrix_index xor =obj(i).last_matrix_index

          dim as dTriMeshDataID TriMeshData =  _
                 dGeomTriMeshGetTriMeshDataID(obj(i).geom(j))

          ' Apply the 'other' matrix which is the oldest.
          dGeomTriMeshDataSet(TriMeshData, _
                              TRIMESH_LAST_TRANSFORMATION,_
                              cptr(any ptr,@obj(i).matrix_dblbuff(0) _
                                           +(obj(i).last_matrix_index * 16 )))
        else
         drawGeom (obj(i).geom(j),0,0,show_aabb)
        end if
      end if 'if obj(i).geom(j)
    next
  next

  if (show_aabb) then
    ' draw the bounding box for this geom
    dim as dReal aabb(5)
    dGeomGetAABB(gheight,@aabb(0))
    dim as dVector3 bbpos
    for i=0 to 2:bbpos.v(i) = 0.5*(aabb(i*2) + aabb(i*2+1)):next
    dim as dVector3 bbsides
    for i=0 to 2:bbsides.v(i) = aabb(i*2+1) - aabb(i*2):next
    dim as dMatrix3 RI
    dRSetIdentity (@RI)
    dsSetColorAlpha (1,0,0,0.5)
    dsDrawBox(@bbpos.v(0),@RI.m(0),@bbsides.v(0))
  end if 
end sub


'
' main
'
' setup pointers to drawstuff callback functions
dim as dsFunctions fn
fn.version  = DS_VERSION
fn._start   = @DoStart
fn._step    = @DoSimLoop
fn._command = @DoCommand
fn._stop = 0

' create world
world = dWorldCreate()
world_space  = dHashSpaceCreate(0)
contactgroup = dJointGroupCreate(0)
dWorldSetGravity                 (world,0,0,-0.5)
dWorldSetCFM                     (world,1e-5)
dWorldSetAutoDisableFlag         (world,1)
dWorldSetContactMaxCorrectingVel (world,0.1)
dWorldSetContactSurfaceLayer     (world,0.001)
'memset (@obj(0),0,sizeof(obj))

' base plane to catch overspill
dCreatePlane(world_space,0,0,1,0)

' our heightfield floor
dim as dHeightfieldDataID heightid = dGeomHeightfieldDataCreate()
' Create an finite heightfield.
dGeomHeightfieldDataBuildCallback(heightid                  , _
                                  NULL                      , _
                                  @heightfield_callback     , _
                                  HFIELD_WIDTH, HFIELD_DEPTH, _
                                  HFIELD_WSTEP, HFIELD_DSTEP, _
                                  1.0, 0.0, 0.0, 0)
'dGeomHeightfieldDataBuildCallback(heightid,NULL,@heightfield_callback,4,8,15,31,1,0,0,0)

' Give some very bounds which, while conservative,
' makes AABB computation more accurate than +/-INF.
dGeomHeightfieldDataSetBounds(heightid,-4.0,+6.0)
gheight = dCreateHeightfield(world_space,heightid,1)

dim as dVector3 p
' Rotate so Z is up, not Y (which is the default orientation)
dim as dMatrix3 R
dRSetIdentity(@R)
dRFromAxisAndAngle(@R,1,0,0,DEG_TO_RAD*90)
' Place it.
dGeomSetRotation( gheight,R)
dGeomSetPosition( gheight,p.v(0),p.v(1),p.v(2))

' run simulation
dim as integer w,h
screeninfo w,h:w*=0.75:h*=0.75
dsSimulationLoop (w,h,@fn)

dJointGroupDestroy (contactgroup)
dSpaceDestroy (world_space)
dWorldDestroy (world)

end 0

