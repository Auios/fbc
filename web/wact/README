--------------------------------------------------------------------------------
Web Application Component Toolkit
--------------------------------------------------------------------------------
http://www.sourceforge.net/projects/wact

--------------------------------------------------------------------------------
!!!! VERY VERY IMPORTANT !!!!
--------------------------------------------------------------------------------
Release 0.2_alpha is EXPERIMENTAL. There are bugs we know about and many more we
don't. Future releases may break APIs. Areas of WACT have yet to have their
design finalized.

Use at your own risk!

--------------------------------------------------------------------------------
!!! IMPORTANT !!!
--------------------------------------------------------------------------------
Your PHP installation will need write access to a 'compiled' directory under
every 'templates' directory in order for the examples and unit tests to work.

On a Unix(ish) system the 'setup.sh' script will set up the required directories
with permissions set to world writeable. You can run the script from this
directory with the command:

$ ./setup.sh

--------------------------------------------------------------------------------
REQUIREMENTS
--------------------------------------------------------------------------------

WACT requires PHP 4.1.2 or better.  
It has been tested on 4.1.2, 4.3.8, 4.3.9, 5.0.1 and 5.0.2

Some optional portions of WACT use various PEAR modules.  See the file PEARNOTES
for information on using PEAR with WACT.

--------------------------------------------------------------------------------
UNIT TESTS
--------------------------------------------------------------------------------
The WACT unit test suite uses the SimpleTest unit testing framework, available
from:

http://www.lastcraft.com/simple_test.php

The simpletest distribution should be made available in a 'external/simpletest'
directory.

Some of the unit test cases use SimpleTest's web testing facilities - for these
tests to work you will need to set the value of the WACT_TEST_HTTP_PATH constant
in tests/common.inc.

The CLI interface for the WACT unit test suite requires PEAR::Console for full
functionality - you are likely to have this installed already if you have used
the PEAR installer.

--------------------------------------------------------------------------------
HELP NEEDED
--------------------------------------------------------------------------------
Most important is documentation. We are using the WACT WIKI;
http://wact.sourceforge.net to provide user documentation as well as API
docs available at http://wact.sourceforge.net/api/. Be aware that there
are links from the API docs to the WIKI. In most cases a terse entry will
have been added. Please add your notes / comments / examples as you work
with WACT.

For bug reports. Please submit bugs to the SF tracker:
http://sourceforge.net/tracker/?group_id=85372&atid=575984

If you have feature requests, please use the feature request tracker:
http://sourceforge.net/tracker/?group_id=85372&atid=575987

We are also in need of extra hands. WACT is quickly growing beyond the time
available to the current developers. 

http://wact.sourceforge.net/index.php/HowToContribute

We are particularly in need of:

- People familiar with javascript programming to add client side validation
  capabilities for WACT forms.

- People familiar with i18n to guide WACT in how it should approach the 
  non-english world.

- Patches / bug fixes.

- Last but not least, developers willing to go "full time" to work on WACT.

If you're interested, it's best to immerse yourself in WACT. Read the WIKI.
Join the mailing list.  Examine the code in as much detail as you can.

--------------------------------------------------------------------------------
SECURITY
--------------------------------------------------------------------------------
Depending on how you install WACT, be careful about where you place the template
directories and (if any) cache directories. Ideally these (plus the framework
directory) should be kept outside your document root. Be careful with .ini files
as well, as exposing them in a public directory may be giving away information
like database username / password.

You might consider using .htaccess files, if possible, contain either;

    order deny,allow
    <FilesMatch "\.(ini)$">
       deny from all
    </FilesMatch>

Will prevent access to .ini files in or below the current directory.

    order deny,allow
    deny from all

Will prevent all access to the current directory and below (good for template
/ cache directories).

Otherwise be aware of the classes in the framework/request/ directory, which,
if used (and they are automatically by some WACT form controllers) are
designed to strip magic_quotes, if they are switched on.

--------------------------------------------------------------------------------
CONFIG.INI
--------------------------------------------------------------------------------
In WACT_ROOT you will find the file config.ini. This the central
configuration file which WACT falls back to unless it finds a configuration
file in the directory where the current PHP script is executing.

If you place a config.ini file in the same directory as a PHP script which is
being executed, it will prefer that over the file in WACT_ROOT. Otherwise the
constant WACT_CONFIG_DIRECTORY can be defined at the start of your code to
specify the location of config.ini.

Some important settings in config.ini

[templates]
forcecompile = TRUE | FALSE

When developing WACT templates, this should be
switched to "TRUE" so that templates are recompiled on each viewing. Once
you're finished editing templates, switch it to "FALSE" (and watch performance
improve significantly).

[database]
; which database driver to use.
driver = mysql | pear | adodb

;Mysql settings
mysql.database = "wactexamples"
mysql.user = "wack"
mysql.password = "wacky"
mysql.host = "localhost"

;PEAR::DB settings
pear.dbtype = "oracle"
pear.database = "wactexamples"
pear.user = "wact"
pear.password = "wacky"
pear.host = "localhost"

;ADOdb settings
adodb.dbtype = "pgsql"
adodb.database = "wactexamples"
adodb.user = "wact"
adodb.password = "wacky"
adodb.host = "localhost"

;PEAR::MDB settings
mdb.dbtype = "mysql"
mdb.database = "wactexamples"
mdb.user = "wact"
mdb.password = "wacky"
mdb.host = "localhost"

;PEAR::MDB2 settings
mdb2.dbtype = "ibase"
mdb2.database = "wactexamples"
mdb2.user = "wact"
mdb2.password = "wacky"
mdb2.host = "localhost"


Hopefully the database settings explain themselves. WACT comes with a
"database driver" for MySQL but also has drivers which adapt PEAR::DB/MDB/MDB2
and ADOdb to the WACT database (DBC) API. You will need to configure
the local config.ini files in WACT_ROOT/examples/demoapp and
WACT_ROOT/examples/dbadapters to run those examples.

The [output_cache] section is specific to the Core Outputcache Tag, the
settings here controlling the behaviour of PEAR::Cache_Lite which is used
the the underlying library for caching.

The remain sections for [adodb] and [pear] specify the locations from
where these libraries can be found for inclusion.

--------------------------------------------------------------------------------
WHAT DO I NEED AS A USER
--------------------------------------------------------------------------------
The following files/directories below the WACT_ROOT directory
contain classes you may be interested in using;

WACT_ROOT/common.inc.php
You always need to include this file

WACT_ROOT/template/template.inc.php
You need this to use templates (probably always)

WACT_ROOT/db/db.inc.php
You need this if you are going to access a database. It takes care of
including the specific driver you need automatically

WACT_ROOT/template/components
The classes in here are automatically included by the WACT template
engine when you use the corresponding Tag in your template. You do
need to be aware of the classes here though, as you'll be using them
to control the behaviour of template components at runtime.

WACT_ROOT/controller/
In here are controllers to help you work with forms and more.

WACT_ROOT/util/
There are a number of classes in here to be aware of, mainly to help
working with datasets. The files you are most likely to need to
specifically include are;

arraydataset.inc.php - allows you to build a dataset from a PHP array
datasetdecorator.inc.php - decorate an existing dataset with further
functionality dataspacemapper.inc.php - remap variable names in the dataspace.

--------------------------------------------------------------------------------
WHERE NOW
--------------------------------------------------------------------------------
Online you'll find further information at;

http://wact.sourceforge.net/api (with links to relavant WIKI pages)
http://wact.sourceforge.net/examples

The examples are also provided with the distribution and present the best source
of further information. With the examples is a tutorial walking through building
an RSS feed with WACT.
